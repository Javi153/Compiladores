package asint;

import java_cup.runtime.*;
import alex.AnalizadorLexicoTiny;
import alex.UnidadLexica;
import errors.GestionErroresTiny;

scan with {: return getScanner().next_token(); :};
parser code {: 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }
:};
init with {: 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);
:};


terminal     DONDE, EVALUA, IDEN, ENT, REAL, MAS,
             MENOS, POR, DIV, IGUAL, COMA, PAP, PCIERRE, CAP, CCIERRE, ALMOHADILLA, 
             LREDUCE, LMAP, LFILTER, MAYOR, MENOR, IDOBLE, DISTINTO, PRINT;

non terminal  S, Ds, LDs, D, E0, E1, E2, OP0, OP1, LIS, ELEMS, LRED, LM, LFIL, POSLIS0, POSLIS1, POSLIS2, OP2;

S   ::= EVALUA E0 Ds | IDEN IGUAL POSLIS0 S | PRINT POSLIS0 S | ;
Ds  ::= DONDE LDs | ;
LDs ::= LDs COMA D | D ;
D   ::= IDEN IGUAL E0; 
E0  ::= E0 OP0 E1  | E1 ;
E1  ::= E1 OP1 E2  | E2 ;
E2  ::= ENT  | REAL  | IDEN  | PAP E0 PCIERRE ;  
OP0 ::= MAS  | MENOS ;
OP1 ::= POR | DIV ;
OP2 ::= MAYOR | MENOR | IDOBLE | DISTINTO;
LIS ::= CAP CCIERRE | CAP ELEMS CCIERRE;
ELEMS ::= ENT | POSLIS0 | ELEMS COMA ENT | ELEMS COMA POSLIS0;
POSLIS0 ::= POSLIS0 ALMOHADILLA POSLIS1 | POSLIS1 ;
POSLIS1 ::= LRED | LM | LFIL | POSLIS2 ;
POSLIS2 ::= LIS | IDEN | PAP POSLIS0 PCIERRE ;
LRED ::= LREDUCE OP0 POSLIS1 | LREDUCE OP1 POSLIS1 ;
LM ::= LMAP OP0 ENT POSLIS1 | LMAP OP1 ENT POSLIS1 ;
LFIL ::= LFILTER OP2 ENT POSLIS1;

