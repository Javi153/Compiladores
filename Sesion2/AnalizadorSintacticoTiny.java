
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Fri Feb 17 13:08:10 CET 2023
//----------------------------------------------------

package asint;

import java_cup.runtime.*;
import alex.AnalizadorLexicoTiny;
import alex.UnidadLexica;
import errors.GestionErroresTiny;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Fri Feb 17 13:08:10 CET 2023
  */
public class AnalizadorSintacticoTiny extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoTiny() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\056\000\002\002\005\000\002\002\004\000\002\002" +
    "\006\000\002\002\005\000\002\002\002\000\002\003\004" +
    "\000\002\003\002\000\002\004\005\000\002\004\003\000" +
    "\002\005\005\000\002\006\005\000\002\006\003\000\002" +
    "\007\005\000\002\007\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\005\000\002\011\003" +
    "\000\002\011\003\000\002\012\003\000\002\012\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\013\004\000\002\013\005\000\002\014" +
    "\003\000\002\014\003\000\002\014\005\000\002\014\005" +
    "\000\002\020\005\000\002\020\003\000\002\021\003\000" +
    "\002\021\003\000\002\021\003\000\002\021\003\000\002" +
    "\022\003\000\002\022\003\000\002\022\005\000\002\015" +
    "\005\000\002\015\005\000\002\016\006\000\002\016\006" +
    "\000\002\017\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\116\000\012\002\ufffd\005\006\006\007\033\004\001" +
    "\002\000\016\006\015\017\014\021\016\024\024\025\025" +
    "\026\013\001\002\000\004\002\116\001\002\000\012\006" +
    "\075\007\073\010\072\017\074\001\002\000\004\015\010" +
    "\001\002\000\016\006\015\017\014\021\016\024\024\025" +
    "\025\026\013\001\002\000\022\002\uffdf\005\uffdf\006\uffdf" +
    "\016\uffdf\020\uffdf\022\uffdf\023\uffdf\033\uffdf\001\002\000" +
    "\022\002\uffde\005\uffde\006\uffde\016\uffde\020\uffde\022\uffde" +
    "\023\uffde\033\uffde\001\002\000\012\027\065\030\064\031" +
    "\063\032\062\001\002\000\016\006\015\017\014\021\016" +
    "\024\024\025\025\026\013\001\002\000\022\002\uffda\005" +
    "\uffda\006\uffda\016\uffda\020\uffda\022\uffda\023\uffda\033\uffda" +
    "\001\002\000\022\006\015\007\047\017\014\021\016\022" +
    "\051\024\024\025\025\026\013\001\002\000\022\002\uffdc" +
    "\005\uffdc\006\uffdc\016\uffdc\020\uffdc\022\uffdc\023\uffdc\033" +
    "\uffdc\001\002\000\022\002\uffdb\005\uffdb\006\uffdb\016\uffdb" +
    "\020\uffdb\022\uffdb\023\uffdb\033\uffdb\001\002\000\022\002" +
    "\uffe0\005\uffe0\006\uffe0\016\uffe0\020\uffe0\022\uffe0\023\uffe0" +
    "\033\uffe0\001\002\000\014\002\ufffd\005\006\006\007\023" +
    "\045\033\004\001\002\000\022\002\uffdd\005\uffdd\006\uffdd" +
    "\016\uffdd\020\uffdd\022\uffdd\023\uffdd\033\uffdd\001\002\000" +
    "\012\011\026\012\031\013\033\014\032\001\002\000\012" +
    "\011\026\012\031\013\033\014\032\001\002\000\022\006" +
    "\uffef\007\uffef\010\uffef\017\uffef\021\uffef\024\uffef\025\uffef" +
    "\026\uffef\001\002\000\004\007\036\001\002\000\004\007" +
    "\034\001\002\000\022\006\uffee\007\uffee\010\uffee\017\uffee" +
    "\021\uffee\024\uffee\025\uffee\026\uffee\001\002\000\022\006" +
    "\uffec\007\uffec\010\uffec\017\uffec\021\uffec\024\uffec\025\uffec" +
    "\026\uffec\001\002\000\022\006\uffed\007\uffed\010\uffed\017" +
    "\uffed\021\uffed\024\uffed\025\uffed\026\uffed\001\002\000\016" +
    "\006\015\017\014\021\016\024\024\025\025\026\013\001" +
    "\002\000\022\002\uffd6\005\uffd6\006\uffd6\016\uffd6\020\uffd6" +
    "\022\uffd6\023\uffd6\033\uffd6\001\002\000\016\006\015\017" +
    "\014\021\016\024\024\025\025\026\013\001\002\000\022" +
    "\002\uffd5\005\uffd5\006\uffd5\016\uffd5\020\uffd5\022\uffd5\023" +
    "\uffd5\033\uffd5\001\002\000\016\006\015\017\014\021\016" +
    "\024\024\025\025\026\013\001\002\000\016\006\015\017" +
    "\014\021\016\024\024\025\025\026\013\001\002\000\022" +
    "\002\uffd8\005\uffd8\006\uffd8\016\uffd8\020\uffd8\022\uffd8\023" +
    "\uffd8\033\uffd8\001\002\000\022\002\uffd7\005\uffd7\006\uffd7" +
    "\016\uffd7\020\uffd7\022\uffd7\023\uffd7\033\uffd7\001\002\000" +
    "\004\002\uffff\001\002\000\016\006\015\017\014\021\016" +
    "\024\024\025\025\026\013\001\002\000\022\002\uffe1\005" +
    "\uffe1\006\uffe1\016\uffe1\020\uffe1\022\uffe1\023\uffe1\033\uffe1" +
    "\001\002\000\006\016\uffe5\022\uffe5\001\002\000\010\016" +
    "\uffe4\022\uffe4\023\045\001\002\000\022\002\uffe7\005\uffe7" +
    "\006\uffe7\016\uffe7\020\uffe7\022\uffe7\023\uffe7\033\uffe7\001" +
    "\002\000\006\016\053\022\054\001\002\000\020\006\015" +
    "\007\055\017\014\021\016\024\024\025\025\026\013\001" +
    "\002\000\022\002\uffe6\005\uffe6\006\uffe6\016\uffe6\020\uffe6" +
    "\022\uffe6\023\uffe6\033\uffe6\001\002\000\006\016\uffe3\022" +
    "\uffe3\001\002\000\010\016\uffe2\022\uffe2\023\045\001\002" +
    "\000\006\020\060\023\045\001\002\000\022\002\uffd9\005" +
    "\uffd9\006\uffd9\016\uffd9\020\uffd9\022\uffd9\023\uffd9\033\uffd9" +
    "\001\002\000\004\007\066\001\002\000\004\007\uffe8\001" +
    "\002\000\004\007\uffe9\001\002\000\004\007\uffea\001\002" +
    "\000\004\007\uffeb\001\002\000\016\006\015\017\014\021" +
    "\016\024\024\025\025\026\013\001\002\000\022\002\uffd4" +
    "\005\uffd4\006\uffd4\016\uffd4\020\uffd4\022\uffd4\023\uffd4\033" +
    "\uffd4\001\002\000\022\002\ufff6\004\ufff6\011\ufff6\012\ufff6" +
    "\013\033\014\032\016\ufff6\020\ufff6\001\002\000\012\002" +
    "\ufffb\004\105\011\026\012\031\001\002\000\022\002\ufff2" +
    "\004\ufff2\011\ufff2\012\ufff2\013\ufff2\014\ufff2\016\ufff2\020" +
    "\ufff2\001\002\000\022\002\ufff3\004\ufff3\011\ufff3\012\ufff3" +
    "\013\ufff3\014\ufff3\016\ufff3\020\ufff3\001\002\000\012\006" +
    "\075\007\073\010\072\017\074\001\002\000\022\002\ufff1" +
    "\004\ufff1\011\ufff1\012\ufff1\013\ufff1\014\ufff1\016\ufff1\020" +
    "\ufff1\001\002\000\022\002\ufff4\004\ufff4\011\ufff4\012\ufff4" +
    "\013\ufff4\014\ufff4\016\ufff4\020\ufff4\001\002\000\010\011" +
    "\026\012\031\020\100\001\002\000\022\002\ufff0\004\ufff0" +
    "\011\ufff0\012\ufff0\013\ufff0\014\ufff0\016\ufff0\020\ufff0\001" +
    "\002\000\012\006\075\007\073\010\072\017\074\001\002" +
    "\000\022\002\ufff7\004\ufff7\011\ufff7\012\ufff7\013\033\014" +
    "\032\016\ufff7\020\ufff7\001\002\000\012\006\075\007\073" +
    "\010\072\017\074\001\002\000\022\002\ufff5\004\ufff5\011" +
    "\ufff5\012\ufff5\013\ufff5\014\ufff5\016\ufff5\020\ufff5\001\002" +
    "\000\004\006\110\001\002\000\004\002\001\001\002\000" +
    "\006\002\ufffc\016\114\001\002\000\004\015\112\001\002" +
    "\000\006\002\ufff9\016\ufff9\001\002\000\012\006\075\007" +
    "\073\010\072\017\074\001\002\000\012\002\ufff8\011\026" +
    "\012\031\016\ufff8\001\002\000\004\006\110\001\002\000" +
    "\006\002\ufffa\016\ufffa\001\002\000\004\002\000\001\002" +
    "\000\014\002\ufffd\005\006\006\007\023\045\033\004\001" +
    "\002\000\004\002\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\116\000\004\002\004\001\001\000\020\013\017\015" +
    "\010\016\011\017\022\020\116\021\020\022\016\001\001" +
    "\000\002\001\001\000\010\006\070\007\067\010\075\001" +
    "\001\000\002\001\001\000\020\013\017\015\010\016\011" +
    "\017\022\020\021\021\020\022\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\060\001\001\000\020" +
    "\013\017\015\010\016\011\017\022\020\056\021\020\022" +
    "\016\001\001\000\002\001\001\000\022\013\017\014\051" +
    "\015\010\016\011\017\022\020\047\021\020\022\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\002\043\001\001\000\002\001\001\000\006\011" +
    "\040\012\037\001\001\000\006\011\027\012\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\013\017\015\010\016\011\017\022\021\034\022\016\001" +
    "\001\000\002\001\001\000\016\013\017\015\010\016\011" +
    "\017\022\021\036\022\016\001\001\000\002\001\001\000" +
    "\016\013\017\015\010\016\011\017\022\021\042\022\016" +
    "\001\001\000\016\013\017\015\010\016\011\017\022\021" +
    "\041\022\016\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\013\017\015\010\016\011\017" +
    "\022\021\045\022\016\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\013\017\015\010\016\011\017\022\020\055" +
    "\021\020\022\016\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\013\017\015\010" +
    "\016\011\017\022\021\066\022\016\001\001\000\002\001" +
    "\001\000\004\012\102\001\001\000\006\003\105\011\100" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\006" +
    "\076\007\067\010\075\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\100\001\001\000\002\001\001\000" +
    "\006\007\101\010\075\001\001\000\004\012\102\001\001" +
    "\000\004\010\103\001\001\000\002\001\001\000\006\004" +
    "\106\005\110\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\006\112\007" +
    "\067\010\075\001\001\000\004\011\100\001\001\000\004" +
    "\005\114\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\002\117\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoTiny$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoTiny$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoTiny$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoTiny$actions {
  private final AnalizadorSintacticoTiny parser;

  /** Constructor */
  CUP$AnalizadorSintacticoTiny$actions(AnalizadorSintacticoTiny parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoTiny$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= EVALUA E0 Ds 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("S",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoTiny$parser.done_parsing();
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= IDEN IGUAL POSLIS0 S 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("S",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // S ::= PRINT POSLIS0 S 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("S",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // S ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("S",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Ds ::= DONDE LDs 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Ds",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Ds ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Ds",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LDs ::= LDs COMA D 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LDs",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LDs ::= D 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LDs",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // D ::= IDEN IGUAL E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("D",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // E0 ::= E0 OP0 E1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // E0 ::= E1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // E1 ::= E1 OP1 E2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // E1 ::= E2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // E2 ::= ENT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // E2 ::= REAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // E2 ::= IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // E2 ::= PAP E0 PCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // OP0 ::= MAS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP0",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // OP0 ::= MENOS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP0",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // OP1 ::= POR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP1",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // OP1 ::= DIV 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP1",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // OP2 ::= MAYOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP2",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // OP2 ::= MENOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP2",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // OP2 ::= IDOBLE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP2",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // OP2 ::= DISTINTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP2",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LIS ::= CAP CCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LIS",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LIS ::= CAP ELEMS CCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LIS",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ELEMS ::= ENT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ELEMS",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ELEMS ::= POSLIS0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ELEMS",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ELEMS ::= ELEMS COMA ENT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ELEMS",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ELEMS ::= ELEMS COMA POSLIS0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ELEMS",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // POSLIS0 ::= POSLIS0 ALMOHADILLA POSLIS1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("POSLIS0",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // POSLIS0 ::= POSLIS1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("POSLIS0",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // POSLIS1 ::= LRED 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("POSLIS1",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // POSLIS1 ::= LM 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("POSLIS1",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // POSLIS1 ::= LFIL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("POSLIS1",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // POSLIS1 ::= POSLIS2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("POSLIS1",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // POSLIS2 ::= LIS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("POSLIS2",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // POSLIS2 ::= IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("POSLIS2",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // POSLIS2 ::= PAP POSLIS0 PCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("POSLIS2",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // LRED ::= LREDUCE OP0 POSLIS1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LRED",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // LRED ::= LREDUCE OP1 POSLIS1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LRED",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // LM ::= LMAP OP0 ENT POSLIS1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LM",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // LM ::= LMAP OP1 ENT POSLIS1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LM",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // LFIL ::= LFILTER OP2 ENT POSLIS1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LFIL",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoTiny$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoTiny$do_action_part00000000(
                               CUP$AnalizadorSintacticoTiny$act_num,
                               CUP$AnalizadorSintacticoTiny$parser,
                               CUP$AnalizadorSintacticoTiny$stack,
                               CUP$AnalizadorSintacticoTiny$top);
    }
}

