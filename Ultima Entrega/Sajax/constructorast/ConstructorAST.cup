package constructorast;

import java_cup.runtime.*;
import sajax_lex.AnalizadorLexicoSajax;
import sajax_lex.UnidadLexica;
import sajax_lex.TokenValue;
import errors.GestionErroresTiny;
import ast.*;
import java.util.ArrayList;
import java.util.Arrays;

scan with {: return getScanner().next_token(); :};
//action code {:
//   ... add some code to declare and initialize e.g. variables used by the code embedded in the grammar
//:};
parser code {: 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }
:};
init with {: 
   errores = new GestionErroresTiny();
   AnalizadorLexicoSajax sajax = (AnalizadorLexicoSajax)getScanner();
   sajax.fijaGestionErrores(errores);
:};

terminal     OR, AND, NOT, MAS, MENOS, POR, DIV, POT, MOD,
             IGDOBLE, DISTINTO, MENOR, MAYOR, MENIGUAL, MAYIGUAL,
             IGUAL, COMA, PAP, PCIERRE, WHILE, FOR, VOID, RETURN,
             STRUCT, LLAP, LLCIERRE, PTOCOMA, IF, ELSIF, ELSE,
	         SWITCH, CASE, DEFAULT, BREAK, MEMSPACE, FREE, NULL,
	         INT, FLOAT, BOOL, PRINT, PRINTLN, INPUT, MAIN,
	         CAP, CCIERRE, FLECHA, PUNTO, DOSPTOS, TRUE, FALSE, OPREF;
terminal TokenValue ENT, REAL, IDEN;

non terminal Programa S;
non terminal ArrayList<Statement> BloqueGeneral;
non terminal ArrayList<ASTNode> AtribStruct;
non terminal ArrayList<Case> Cases;
non terminal Return SReturn;
non terminal Statement SAsign, SDec, SDecArray, SIf, SWhile, SSwitch, SBreak, SFor, SCallFun;
non terminal Definicion SStruct, SDecFuncion, SDecFuncionInline;
non terminal ArrayList<Ent> Dims;
non terminal DefaultCase Default;
non terminal E SExp4, SExp3, SExp2, SExp1, SExp0, Exp, CallFun, IdenOps, IdenOps0, IdenOps1, IdenOps2;
non terminal Ent Entero;
non terminal Tipo TipoBas, TipoStruct, Tipos, TipoVoid;
non terminal ArrayList<Elsif> SElsif;
non terminal ArrayList<Parametro> SParams, SParamsNoVacio;
non terminal ArrayList<E> SParExp, SParExp1;
non terminal ArrayList<Definicion> GrupoDefs;
non terminal MainFun Main;


S ::= GrupoDefs:defs Main:main                     //El grupo de definiciones corresponde a variables globales, funciones y structs
   {: RESULT=new Programa(new BloqueDef(defs), main); :};
GrupoDefs ::= GrupoDefs:defs SDecFuncionInline:newdef  //Inline se refiere a las definiciones de funciones sin cuerpo, solo para indicar que la funcion existe y se define mas adelante
   {: defs.add(newdef); RESULT = defs; :};
GrupoDefs ::= GrupoDefs:defs SDecFuncion:newdef
   {: defs.add(newdef); RESULT = defs; :};
GrupoDefs ::= GrupoDefs:defs SStruct:newdef
   {: defs.add(newdef); RESULT = defs; :};
GrupoDefs ::= GrupoDefs:defs SDec:newdef
   {: defs.add(new VarGlobal(newdef)); RESULT = defs; :};
GrupoDefs ::= GrupoDefs:defs SDecArray:newdef
   {: defs.add(new VarGlobal(newdef)); RESULT = defs; :};
GrupoDefs ::=
   {: RESULT = new ArrayList<Definicion>(); :};
Main ::= INT MAIN PAP PCIERRE LLAP BloqueGeneral:bloque SReturn:ret LLCIERRE //Bloque main
   {: RESULT=new MainFun(new BloqueIns(bloque), ret); :};
BloqueGeneral ::= BloqueGeneral:genBlock SAsign: aDeexp //El bloque general es el conjunto de instrucciones que pueden estar dento del main
   {: genBlock.add(aDeexp); RESULT=genBlock; :};
BloqueGeneral ::= BloqueGeneral:genBlock SDec: aDeexp
   {: genBlock.add(aDeexp); RESULT=genBlock; :};
BloqueGeneral ::= BloqueGeneral:genBlock SDecArray: aDeexp
   {: genBlock.add(aDeexp); RESULT=genBlock; :};
BloqueGeneral ::= BloqueGeneral:genBlock SIf: aDeexp
   {: genBlock.add(aDeexp); RESULT=genBlock; :};
BloqueGeneral ::= BloqueGeneral:genBlock SFor: aDeexp
   {: genBlock.add(aDeexp); RESULT=genBlock; :};
BloqueGeneral ::= BloqueGeneral:genBlock SWhile: aDeexp
   {: genBlock.add(aDeexp); RESULT=genBlock; :};
BloqueGeneral ::= BloqueGeneral:genBlock SSwitch: aDeexp
   {: genBlock.add(aDeexp); RESULT=genBlock; :};
BloqueGeneral ::= BloqueGeneral:genBlock SBreak: aDeexp
   {: genBlock.add(aDeexp); RESULT=genBlock; :};
BloqueGeneral ::= BloqueGeneral:genBlock SCallFun: aDeexp
   {: genBlock.add(aDeexp); RESULT=genBlock; :};
BloqueGeneral ::=
   {: RESULT=new ArrayList<Statement>(); :}; //El bloque esta formado por un vector de instrucciones
SStruct ::= STRUCT IDEN:name LLAP AtribStruct:atributos LLCIERRE  //Los atributos de struct se refiere tambien a metodos dentro de structs
   {: RESULT=new Struct(name.lexema, new Bloque(atributos)); :};
AtribStruct ::= AtribStruct:bloqueatr SDecArray: dec
   {: bloqueatr.add(dec); RESULT=bloqueatr; :};
AtribStruct ::= AtribStruct:bloqueatr SDec: dec
   {: bloqueatr.add(dec); RESULT=bloqueatr; :};
AtribStruct ::= AtribStruct:bloqueatr SDecFuncion: dec
   {: bloqueatr.add(dec); RESULT=bloqueatr; :};
AtribStruct ::=
   {: RESULT=new ArrayList<ASTNode>(); :};
SIf ::= IF PAP SExp4:cond1 PCIERRE LLAP BloqueGeneral:St LLCIERRE SElsif:arrayelsifs //If puede tener instrucciones en su cuerpo, las mismas que el propio main
   {: RESULT=new IfElse(cond1, new BloqueIns(St), arrayelsifs); :};
SIf ::= IF PAP SExp4:cond2 PCIERRE LLAP BloqueGeneral:St1 LLCIERRE SElsif:arrayelsifs ELSE LLAP BloqueGeneral:St2 LLCIERRE
   {: RESULT=new IfElse(cond2, new BloqueIns(St1), arrayelsifs, new BloqueIns(St2)); :};
SIf ::= IF PAP error LLCIERRE SElsif:arrayelsifs ELSE LLAP BloqueGeneral:St2 LLCIERRE
   {: System.out.println("Se esperaba \")\""); RESULT=null; :};
SIf ::= IF PAP error LLCIERRE
   {: System.out.println("Se esperaba \")\""); RESULT=null; :};
SIf ::= IF error LLCIERRE
   {: System.out.println("Se esperaba \"(\""); RESULT=null; :};
SElsif ::= SElsif:arrayelsifs ELSIF PAP SExp4:cond3 PCIERRE LLAP BloqueGeneral:St3 LLCIERRE
   {: arrayelsifs.add(new Elsif(cond3, new BloqueIns(St3))); RESULT=arrayelsifs; :};
SElsif ::=
   {: RESULT=new ArrayList<Elsif>(); :};
SDec ::= Tipos:tipoAsig IDEN:ident PTOCOMA //Las declaraciones pueden o no tener valor inicial
   {: RESULT=new Dec(tipoAsig, ident.lexema); :};
SDec ::= Tipos:tipoAsig error
   {: System.out.println("Se esperaba \";\""); RESULT=null; :};
SDec ::= Tipos: tipoAsig IDEN:ident IGUAL SExp4:expterm PTOCOMA
   {: RESULT=new Dec(tipoAsig, ident.lexema, expterm); :};
SAsign ::= IdenOps2:designador IGUAL SExp4:expterm PTOCOMA
   {: RESULT=new Asign(designador, expterm); :};
SAsign ::= IdenOps2:designador IGUAL error
   {: System.out.println("Se esperaba ;"); RESULT=null; :};
SFor ::= FOR PAP INT IDEN:iden IGUAL SExp4:inicio PTOCOMA SExp4:fin PCIERRE LLAP BloqueGeneral:statement LLCIERRE //Dentro de for puede haber mas instrucciones
   {: RESULT=new For(new Dec(new Tipo(TipoEnum.INT),iden.lexema,inicio), fin, new BloqueIns(statement)); :};
SFor ::= FOR PAP INT IDEN:iden IGUAL SExp4:inicio PTOCOMA SExp4:fin PTOCOMA SExp4:paso PCIERRE LLAP BloqueGeneral:statement LLCIERRE
   {: RESULT=new For(new Dec(new Tipo(TipoEnum.INT),iden.lexema,inicio), fin, paso, new BloqueIns(statement)); :};
SWhile ::= WHILE PAP SExp4:cond PCIERRE LLAP BloqueGeneral:instrucciones LLCIERRE //Mismo caso con el while
   {: RESULT=new While(cond, new BloqueIns(instrucciones)); :};
SWhile ::= WHILE PAP error LLCIERRE
   {: System.out.println("Se esperaba \")\""); RESULT=null; :};
SWhile ::= WHILE error LLCIERRE
   {: System.out.println("Se esperaba \"(\""); RESULT=null; :};
SSwitch ::= SWITCH PAP SExp4:exp PCIERRE LLAP Cases:cases LLCIERRE
   {: RESULT=new Switch(exp, cases); :};
SSwitch ::= SWITCH PAP SExp4:exp PCIERRE LLAP Cases:cases Default:defCase LLCIERRE //El escribir default en el switch es opciones
   {: RESULT=new Switch(exp, cases, defCase); :};
SSwitch ::= SWITCH PAP error LLCIERRE
   {: System.out.println("Se esperaba \")\""); RESULT=null; :};
SSwitch ::= SWITCH error LLCIERRE
   {: System.out.println("Se esperaba \"(\""); RESULT=null; :};
Cases ::=
   {: RESULT=new ArrayList<Case>(); :};
Cases ::= Cases:cases CASE Entero:ent DOSPTOS BloqueGeneral:bloqGen
   {: cases.add(new Case(ent, bloqGen, false)); RESULT=cases; :};
Cases ::= Cases:cases CASE Entero:ent DOSPTOS BloqueGeneral:bloqGen BREAK PTOCOMA //Las instrucciones break solo son posibles en los cases de un switch
   {: cases.add(new Case(ent, bloqGen, true)); RESULT=cases; :};
Default ::= DEFAULT DOSPTOS BloqueGeneral:bloqGen
   {: RESULT=new DefaultCase(bloqGen, false); :};
Default ::= DEFAULT DOSPTOS BloqueGeneral:bloqGen BREAK PTOCOMA
   {: RESULT=new DefaultCase(bloqGen, true); :};
SDecFuncionInline ::= Tipos:tipo IDEN:name PAP SParams:params PCIERRE PTOCOMA //Esta definicion se hace en una linea terminado en punto y coma e incluye punto y coma al final y los paramtros
   {: RESULT=new DecFuncion(tipo, name.lexema, params, null, null); :};
SDecFuncionInline ::= TipoVoid:tipo IDEN:name PAP SParams:params PCIERRE PTOCOMA //Las funciones pueden ser procedimientos y no devolver nada. En el AST las trataremos igual
   {: RESULT=new DecFuncion(tipo, name.lexema, params, null, null); :};
SDecFuncion ::= Tipos:tipo IDEN:name PAP SParams:params PCIERRE LLAP BloqueGeneral:block SReturn:ret LLCIERRE //Notese que el valor de retorno va al final de la funcion
   {: RESULT=new DecFuncion(tipo, name.lexema, params, new BloqueIns(block), ret); :};
SDecFuncion ::= TipoVoid:tipo IDEN:name PAP SParams:params PCIERRE LLAP BloqueGeneral:block LLCIERRE //Notese que el procedimiento no acepta return
   {: RESULT=new DecFuncion(tipo, name.lexema, params, new BloqueIns(block), null); :};
SDecArray ::= Tipos:tipo IDEN:iden Dims:dims PTOCOMA
   {: RESULT=new DecArray(tipo, iden.lexema, dims); :};
Dims ::= Dims:dims CAP ENT:tam CCIERRE              //dimesiones de los arrays entre corchetes, posibles dimensiones multiples
   {: dims.add(new Ent(tam.lexema)); RESULT=dims; :};
Dims ::= CAP ENT:tam CCIERRE
   {: RESULT=new ArrayList<Ent>(Arrays.asList(new Ent(tam.lexema))); :};
SReturn ::= RETURN SExp4:expresion PTOCOMA //Return para las funciones, debe tener una expresion
   {: RESULT=new Return(expresion); :};
SCallFun ::=IdenOps1:idenops0 PUNTO CallFun:llamada PTOCOMA //Llamadas a funcion, pueden ser metodos de struct, a pesar de que a nivel de codigo no estan implementados
    {: RESULT = new EBin(idenops0, llamada, KindE.PUNTO); :};
SCallFun ::=IdenOps1:idenops0 FLECHA CallFun:llamada PTOCOMA
    {: RESULT = new EBin(idenops0, llamada, KindE.FLECHA); :};
SCallFun ::= CallFun:llamada PTOCOMA
   {: RESULT=llamada; :};
CallFun ::= PRINT PAP SExp4:expresion PCIERRE //Las funciones predefinidas
   {: RESULT=new Print(expresion, false); :};
CallFun ::= PRINTLN PAP SExp4:expresion PCIERRE
   {: RESULT=new Print(expresion, true); :};
CallFun ::= INPUT PAP IdenOps2:expresion PCIERRE
   {: RESULT=new Input(expresion); :};
CallFun ::= MEMSPACE PAP SExp4:arg1 PCIERRE
   {: RESULT=new Memspace(arg1); :};
CallFun ::= FREE PAP IDEN: arg1 PCIERRE //Finalmente no se traduce free en el codigo como se indico en clase
   {: RESULT=new Free(new Ident(arg1.lexema)); :};
CallFun ::= IDEN:ident PAP SParExp:parexp PCIERRE //SparExp son parametros de funcion
   {: RESULT=new LlamadaFuncion(ident.lexema, parexp); :};
SParExp ::= SParExp1:sparexp1 //Llamo a otra gramatica porque puede o no ser vacio y por tanto llevar comas
   {: RESULT=sparexp1; :};
SParExp ::=
   {: RESULT=new ArrayList<E>(); :};
SParExp1 ::= SParExp1: parlist COMA SExp4:expr
   {: parlist.add(expr); RESULT=parlist; :};
SParExp1 ::= SExp4:expr //Los parametros son expresiones
   {: RESULT=new ArrayList<E>(Arrays.asList(expr)); :};
SParams ::= SParamsNoVacio: params //Estos parametros son para declaracion de funciones e incluyen tipos
   {: RESULT=params; :};
SParams ::=
   {: RESULT=new ArrayList<Parametro>(); :};
SParamsNoVacio ::= SParamsNoVacio: params COMA Tipos:tipo OPREF IDEN:name //Parametros para declaraciones de funciones con tipos, sabiendo que hay al menos uno
   {: params.add(new Parametro(tipo, true, name.lexema)); RESULT=params; :};
SParamsNoVacio ::= SParamsNoVacio: params COMA Tipos:tipo IDEN:name
   {: params.add(new Parametro(tipo, false, name.lexema)); RESULT=params; :};
SParamsNoVacio ::= Tipos:tipo OPREF IDEN:name
   {: RESULT=new ArrayList<Parametro>(Arrays.asList(new Parametro(tipo, true, name.lexema))); :};
SParamsNoVacio ::= Tipos:tipo IDEN:name
   {: RESULT=new ArrayList<Parametro>(Arrays.asList(new Parametro(tipo, false, name.lexema))); :};
SExp4 ::= SExp3: expterm1 IGDOBLE SExp3: expterm2 //Llegamos a la gramatica de expresiones, para ver el orden revisese el archivo pdf de documentacion
   {: RESULT=new EBin(expterm1, expterm2,KindE.ID); :};
SExp4 ::= SExp3: expterm1 DISTINTO SExp3: expterm2
   {: RESULT=new EBin(expterm1, expterm2,KindE.DISTINTO); :};
SExp4 ::= SExp3: expterm1
   {: RESULT=expterm1; :};
SExp3 ::= SExp2: expterm1 MENOR SExp2: expterm2
   {: RESULT=new EBin(expterm1, expterm2,KindE.MENOR); :};
SExp3 ::= SExp2: expterm1 MAYOR SExp2: expterm2
   {: RESULT=new EBin(expterm1, expterm2,KindE.MAYOR); :};
SExp3 ::= SExp2: expterm1 MENIGUAL SExp2: expterm2
   {: RESULT=new EBin(expterm1, expterm2,KindE.MENIGUAL); :};
SExp3 ::= SExp2: expterm1 MAYIGUAL SExp2: expterm2
   {: RESULT=new EBin(expterm1, expterm2,KindE.MAYIGUAL); :};
SExp3 ::= SExp2: expterm1
   {: RESULT=expterm1; :};
SExp2 ::= SExp2: expterm1 OR SExp1: expterm2
   {: RESULT=new EBin(expterm1, expterm2, KindE.OR); :};
SExp2 ::= SExp2: floatexp1 MAS SExp1: expterm
   {: RESULT= new EBin(floatexp1,expterm,KindE.SUMA); :};
SExp2 ::= SExp2: floatexp1 MENOS SExp1: expterm
   {: RESULT= new EBin(floatexp1,expterm,KindE.RESTA); :};
SExp2 ::= SExp1: expterm1
   {: RESULT=expterm1; :};
SExp1 ::= SExp1: expterm1 AND SExp0: expterm2
   {: RESULT=new EBin(expterm1, expterm2, KindE.AND); :};
SExp1 ::= SExp1: expterm1 POR SExp0: expfact
   {: RESULT= new EBin(expterm1,expfact, KindE.MUL); :};
SExp1 ::= SExp1: expterm1 DIV SExp0: expfact
   {: RESULT= new EBin(expterm1,expfact, KindE.DIV); :};
SExp1 ::= SExp1: aDeterm1 MOD SExp0: aDefact
   {: RESULT= new EBin(aDeterm1,aDefact, KindE.MOD); :};
SExp1 ::= SExp0: expterm1
   {: RESULT=expterm1; :};
SExp0 ::= Exp: expfact POT SExp0: expterm2
   {: RESULT= new EBin(expfact,expterm2, KindE.POT); :};
SExp0 ::= NOT SExp0:boolVal
   {: RESULT=new EUnar(boolVal, KindE.NOT); :};
SExp0 ::= Exp: expterm1
   {: RESULT=expterm1; :};
Exp ::= Entero:numEnt
   {: RESULT=numEnt; :};
Entero ::= ENT: numEnt
   {: RESULT=new Ent(numEnt.lexema); :};
Entero ::= MENOS ENT: numEnt    //Los numeros pueden ser negativos
   {: RESULT=new Ent("-" + numEnt.lexema); :};
Exp ::= REAL: numReal
   {: RESULT=new Real(numReal.lexema); :};
Exp ::= MENOS REAL: numReal
   {: RESULT=new Real("-" + numReal.lexema); :};
Exp ::= TRUE: trueterm
   {: RESULT=new True(); :};
Exp ::= FALSE: falseterm
   {: RESULT=new False(); :};
Exp ::= NULL
   {: RESULT=new Null(); :};
Exp ::= IdenOps2:idenops
   {: RESULT=idenops; :};
IdenOps2 ::= POR IdenOps2:idenOps // IdenOps se refiere a operadores que solo se aplican sobre identificadores. Esto es lo que queda aqui [], ->, ., *iden
   {:RESULT = new EUnar(idenOps, KindE.ASTERISCO); :};
IdenOps2 ::= IdenOps1:idenOps
   {: RESULT = idenOps; :};
IdenOps1 ::= IdenOps1:idenOps0 PUNTO IdenOps0:idenOps // . y -> asocian de izquierda a derecha
   {: RESULT=new EBin(idenOps0, idenOps, KindE.PUNTO); :};
IdenOps1 ::= IdenOps1:idenOps0 FLECHA IdenOps0:idenOps
   {: RESULT=new EBin(idenOps0, idenOps, KindE.FLECHA); :};
IdenOps1 ::= IdenOps0:idenOps
   {: RESULT = idenOps; :};
IdenOps0 ::= IdenOps0:idenOps0 CAP SExp4:exp CCIERRE
   {: RESULT = new EBin(idenOps0, exp, KindE.CORCHETES); :};
IdenOps0 ::= IdenOps:idenOps
   {: RESULT = idenOps; :};
IdenOps ::= PAP SExp4:idenOps PCIERRE
   {: RESULT = idenOps; :};
IdenOps ::= IDEN:iden
   {: RESULT =  new Ident(iden.lexema); :};
IdenOps ::= CallFun:fun //Una llamada a funcion puede ser una expresion, por ejemplo al llamarla en un while
   {: RESULT = fun; :};
TipoVoid ::= TipoVoid:tipo POR //A nivel de gramatica existe void* de manera similar a C, pero no llega a usarse en la practica
   {: RESULT=new Puntero(tipo); :};
TipoVoid ::= VOID
   {: RESULT= new Tipo(TipoEnum.VOID); :};
Tipos ::= TipoBas: tipobas //Tipos basicos, int, float, bool
   {: RESULT=tipobas; :};
Tipos ::= TipoStruct: tipostruct //Tipos definidos por usuario, structs
   {: RESULT=tipostruct; :};
TipoBas ::= TipoBas: tipobas POR
   {: RESULT=new Puntero(tipobas); :};
TipoBas ::= BOOL
   {: RESULT=new Tipo(TipoEnum.BOOL); :};
TipoBas ::= INT
   {: RESULT=new Tipo(TipoEnum.INT); :};
TipoBas ::= FLOAT
   {: RESULT=new Tipo(TipoEnum.FLOAT); :};
TipoStruct ::= TipoStruct:ident POR //Tipos definidos por usuario posiblemente con asterisco para puntero
   {: RESULT=new Puntero(ident); :};
TipoStruct ::= IDEN:ident
   {: RESULT=new TipoStruct(ident.lexema); :};
