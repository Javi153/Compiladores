
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Tue Apr 18 23:38:19 CEST 2023
//----------------------------------------------------

package constructorast;

import java_cup.runtime.*;
import sajax_lex.AnalizadorLexicoSajax;
import sajax_lex.UnidadLexica;
import sajax_lex.TokenValue;
import errors.GestionErroresTiny;
import ast.*;
import java.util.ArrayList;
import java.util.Arrays;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Tue Apr 18 23:38:19 CEST 2023
  */
public class ConstructorASTExp extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ConstructorASTExp() {super();}

  /** Constructor which sets the default scanner. */
  public ConstructorASTExp(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ConstructorASTExp(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\156\000\002\002\004\000\002\002\004\000\002\050" +
    "\004\000\002\050\004\000\002\050\004\000\002\050\004" +
    "\000\002\050\004\000\002\050\002\000\002\051\012\000" +
    "\002\003\004\000\002\003\004\000\002\003\004\000\002" +
    "\003\004\000\002\003\004\000\002\003\004\000\002\003" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\002" +
    "\000\002\020\007\000\002\004\004\000\002\004\004\000" +
    "\002\004\002\000\002\015\004\000\002\012\012\000\002" +
    "\012\016\000\002\043\012\000\002\043\002\000\002\010" +
    "\005\000\002\010\007\000\002\007\006\000\002\016\013" +
    "\000\002\016\015\000\002\013\011\000\002\014\011\000" +
    "\002\014\012\000\002\005\002\000\002\005\007\000\002" +
    "\024\005\000\002\022\010\000\002\022\010\000\002\021" +
    "\013\000\002\021\012\000\002\011\006\000\002\023\006" +
    "\000\002\023\005\000\002\006\005\000\002\017\007\000" +
    "\002\017\007\000\002\017\007\000\002\017\007\000\002" +
    "\017\007\000\002\017\004\000\002\033\006\000\002\046" +
    "\003\000\002\046\002\000\002\047\005\000\002\047\003" +
    "\000\002\044\003\000\002\044\002\000\002\045\007\000" +
    "\002\045\006\000\002\045\005\000\002\045\004\000\002" +
    "\025\005\000\002\025\005\000\002\025\003\000\002\026" +
    "\005\000\002\026\005\000\002\026\005\000\002\026\005" +
    "\000\002\026\003\000\002\027\005\000\002\027\005\000" +
    "\002\027\005\000\002\027\003\000\002\030\005\000\002" +
    "\030\005\000\002\030\005\000\002\030\005\000\002\030" +
    "\003\000\002\031\005\000\002\031\004\000\002\031\003" +
    "\000\002\032\003\000\002\032\004\000\002\032\003\000" +
    "\002\032\004\000\002\032\003\000\002\032\003\000\002" +
    "\032\003\000\002\032\003\000\002\036\004\000\002\036" +
    "\003\000\002\035\005\000\002\035\005\000\002\035\006" +
    "\000\002\035\003\000\002\034\005\000\002\034\003\000" +
    "\002\042\004\000\002\042\003\000\002\041\003\000\002" +
    "\041\003\000\002\037\004\000\002\037\003\000\002\037" +
    "\003\000\002\037\003\000\002\040\004\000\002\040\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0102\000\016\031\ufffa\033\ufffa\050\ufffa\051\ufffa\052" +
    "\ufffa\071\ufffa\001\002\000\016\031\016\033\014\050\010" +
    "\051\026\052\012\071\015\001\002\000\004\002\006\001" +
    "\002\000\004\002\000\001\002\000\004\071\u0100\001\002" +
    "\000\010\011\uff97\056\371\071\uff97\001\002\000\016\031" +
    "\ufffe\033\ufffe\050\ufffe\051\ufffe\052\ufffe\071\ufffe\001\002" +
    "\000\010\011\uff98\066\uff98\071\uff98\001\002\000\016\031" +
    "\ufffb\033\ufffb\050\ufffb\051\ufffb\052\ufffb\071\ufffb\001\002" +
    "\000\004\071\342\001\002\000\010\011\uff94\066\uff94\071" +
    "\uff94\001\002\000\006\011\uff9c\071\uff9c\001\002\000\010" +
    "\011\341\066\uff9a\071\uff9a\001\002\000\006\011\030\071" +
    "\031\001\002\000\016\031\uffff\033\uffff\050\uffff\051\uffff" +
    "\052\uffff\071\uffff\001\002\000\016\031\ufffd\033\ufffd\050" +
    "\ufffd\051\ufffd\052\ufffd\071\ufffd\001\002\000\016\031\ufffc" +
    "\033\ufffc\050\ufffc\051\ufffc\052\ufffc\071\ufffc\001\002\000" +
    "\004\002\001\001\002\000\010\011\027\066\uff9b\071\uff9b" +
    "\001\002\000\010\011\uff96\066\uff96\071\uff96\001\002\000" +
    "\010\011\uff99\066\uff99\071\uff99\001\002\000\006\011\uff9d" +
    "\071\uff9d\001\002\000\004\025\032\001\002\000\014\026" +
    "\uffc6\050\034\051\026\052\012\071\015\001\002\000\006" +
    "\066\336\071\337\001\002\000\010\011\uff97\066\uff97\071" +
    "\uff97\001\002\000\006\024\331\026\uffc7\001\002\000\004" +
    "\026\037\001\002\000\006\034\040\036\041\001\002\000" +
    "\044\011\uffef\025\uffef\027\uffef\030\uffef\035\uffef\037\uffef" +
    "\042\uffef\045\uffef\046\uffef\047\uffef\050\uffef\051\uffef\052" +
    "\uffef\053\uffef\054\uffef\055\uffef\071\uffef\001\002\000\016" +
    "\031\uffd9\033\uffd9\050\uffd9\051\uffd9\052\uffd9\071\uffd9\001" +
    "\002\000\044\011\054\025\066\027\046\030\074\035\067" +
    "\037\053\042\051\045\065\046\070\047\073\050\034\051" +
    "\026\052\012\053\071\054\062\055\044\071\050\001\002" +
    "\000\052\011\ufff6\025\ufff6\027\ufff6\030\ufff6\032\ufff6\035" +
    "\ufff6\037\ufff6\042\ufff6\043\ufff6\044\ufff6\045\ufff6\046\ufff6" +
    "\047\ufff6\050\ufff6\051\ufff6\052\ufff6\053\ufff6\054\ufff6\055" +
    "\ufff6\071\ufff6\001\002\000\004\025\325\001\002\000\052" +
    "\011\ufff8\025\ufff8\027\ufff8\030\ufff8\032\ufff8\035\ufff8\037" +
    "\ufff8\042\ufff8\043\ufff8\044\ufff8\045\ufff8\046\ufff8\047\ufff8" +
    "\050\ufff8\051\ufff8\052\ufff8\053\ufff8\054\ufff8\055\ufff8\071" +
    "\ufff8\001\002\000\004\025\317\001\002\000\052\011\ufff7" +
    "\025\ufff7\027\ufff7\030\ufff7\032\ufff7\035\ufff7\037\ufff7\042" +
    "\ufff7\043\ufff7\044\ufff7\045\ufff7\046\ufff7\047\ufff7\050\ufff7" +
    "\051\ufff7\052\ufff7\053\ufff7\054\ufff7\055\ufff7\071\ufff7\001" +
    "\002\000\020\011\uff94\023\uff9e\025\167\057\uff9e\061\uff9e" +
    "\062\uff9e\071\uff94\001\002\000\004\025\300\001\002\000" +
    "\052\011\ufff1\025\ufff1\027\ufff1\030\ufff1\032\ufff1\035\ufff1" +
    "\037\ufff1\042\ufff1\043\ufff1\044\ufff1\045\ufff1\046\ufff1\047" +
    "\ufff1\050\ufff1\051\ufff1\052\ufff1\053\ufff1\054\ufff1\055\ufff1" +
    "\071\ufff1\001\002\000\004\025\256\001\002\000\010\011" +
    "\054\025\066\071\241\001\002\000\004\036\254\001\002" +
    "\000\052\011\ufff2\025\ufff2\027\ufff2\030\ufff2\032\ufff2\035" +
    "\ufff2\037\ufff2\042\ufff2\043\ufff2\044\ufff2\045\ufff2\046\ufff2" +
    "\047\ufff2\050\ufff2\051\ufff2\052\ufff2\053\ufff2\054\ufff2\055" +
    "\ufff2\071\ufff2\001\002\000\052\011\ufff4\025\ufff4\027\ufff4" +
    "\030\ufff4\032\ufff4\035\ufff4\037\ufff4\042\ufff4\043\ufff4\044" +
    "\ufff4\045\ufff4\046\ufff4\047\ufff4\050\ufff4\051\ufff4\052\ufff4" +
    "\053\ufff4\054\ufff4\055\ufff4\071\ufff4\001\002\000\004\023" +
    "\251\001\002\000\052\011\ufff5\025\ufff5\027\ufff5\030\ufff5" +
    "\032\ufff5\035\ufff5\037\ufff5\042\ufff5\043\ufff5\044\ufff5\045" +
    "\ufff5\046\ufff5\047\ufff5\050\ufff5\051\ufff5\052\ufff5\053\ufff5" +
    "\054\ufff5\055\ufff5\071\ufff5\001\002\000\004\025\245\001" +
    "\002\000\056\004\uffa0\005\uffa0\007\uffa0\010\uffa0\011\uffa0" +
    "\012\uffa0\013\uffa0\014\uffa0\015\uffa0\016\uffa0\017\uffa0\020" +
    "\uffa0\021\uffa0\022\uffa0\023\uffa0\024\uffa0\026\uffa0\036\uffa0" +
    "\057\uffa0\060\uffa0\061\uffa0\062\uffa0\001\002\000\056\004" +
    "\uffa4\005\uffa4\007\uffa4\010\uffa4\011\uffa4\012\uffa4\013\uffa4" +
    "\014\uffa4\015\uffa4\016\uffa4\017\uffa4\020\uffa4\021\uffa4\022" +
    "\uffa4\023\uffa4\024\uffa4\026\uffa4\036\uffa4\057\236\060\uffa4" +
    "\061\235\062\237\001\002\000\004\036\234\001\002\000" +
    "\024\006\101\010\100\011\054\025\066\064\103\065\107" +
    "\067\114\070\110\071\102\001\002\000\020\031\uffd7\033" +
    "\uffd7\035\uffd7\050\uffd7\051\uffd7\052\uffd7\071\uffd7\001\002" +
    "\000\004\025\226\001\002\000\004\025\222\001\002\000" +
    "\004\071\205\001\002\000\004\025\201\001\002\000\004" +
    "\025\077\001\002\000\052\011\ufff0\025\ufff0\027\ufff0\030" +
    "\ufff0\032\ufff0\035\ufff0\037\ufff0\042\ufff0\043\ufff0\044\ufff0" +
    "\045\ufff0\046\ufff0\047\ufff0\050\ufff0\051\ufff0\052\ufff0\053" +
    "\ufff0\054\ufff0\055\ufff0\071\ufff0\001\002\000\052\011\ufff3" +
    "\025\ufff3\027\ufff3\030\ufff3\032\ufff3\035\ufff3\037\ufff3\042" +
    "\ufff3\043\ufff3\044\ufff3\045\ufff3\046\ufff3\047\ufff3\050\ufff3" +
    "\051\ufff3\052\ufff3\053\ufff3\054\ufff3\055\ufff3\071\ufff3\001" +
    "\002\000\024\006\101\010\100\011\054\025\066\064\103" +
    "\065\107\067\114\070\110\071\102\001\002\000\006\067" +
    "\177\070\200\001\002\000\024\006\101\010\100\011\054" +
    "\025\066\064\103\065\107\067\114\070\110\071\102\001" +
    "\002\000\056\004\uff9e\005\uff9e\007\uff9e\010\uff9e\011\uff9e" +
    "\012\uff9e\013\uff9e\014\uff9e\015\uff9e\016\uff9e\017\uff9e\020" +
    "\uff9e\021\uff9e\022\uff9e\024\uff9e\025\167\026\uff9e\036\uff9e" +
    "\057\uff9e\060\uff9e\061\uff9e\062\uff9e\001\002\000\046\004" +
    "\uffa9\005\uffa9\007\uffa9\010\uffa9\011\uffa9\012\uffa9\013\uffa9" +
    "\014\uffa9\015\uffa9\016\uffa9\017\uffa9\020\uffa9\021\uffa9\022" +
    "\uffa9\024\uffa9\026\uffa9\036\uffa9\060\uffa9\001\002\000\046" +
    "\004\uffa6\005\uffa6\007\uffa6\010\uffa6\011\uffa6\012\uffa6\013" +
    "\uffa6\014\uffa6\015\uffa6\016\uffa6\017\uffa6\020\uffa6\021\uffa6" +
    "\022\uffa6\024\uffa6\026\uffa6\036\uffa6\060\uffa6\001\002\000" +
    "\046\004\uffa7\005\uffa7\007\uffa7\010\uffa7\011\uffa7\012\uffa7" +
    "\013\uffa7\014\uffa7\015\uffa7\016\uffa7\017\uffa7\020\uffa7\021" +
    "\uffa7\022\uffa7\024\uffa7\026\uffa7\036\uffa7\060\uffa7\001\002" +
    "\000\046\004\uffae\005\uffae\007\uffae\010\uffae\011\uffae\012" +
    "\uffae\013\165\014\uffae\015\uffae\016\uffae\017\uffae\020\uffae" +
    "\021\uffae\022\uffae\024\uffae\026\uffae\036\uffae\060\uffae\001" +
    "\002\000\046\004\uffa8\005\uffa8\007\uffa8\010\uffa8\011\uffa8" +
    "\012\uffa8\013\uffa8\014\uffa8\015\uffa8\016\uffa8\017\uffa8\020" +
    "\uffa8\021\uffa8\022\uffa8\024\uffa8\026\uffa8\036\uffa8\060\uffa8" +
    "\001\002\000\046\004\uffab\005\uffab\007\uffab\010\uffab\011" +
    "\uffab\012\uffab\013\uffab\014\uffab\015\uffab\016\uffab\017\uffab" +
    "\020\uffab\021\uffab\022\uffab\024\uffab\026\uffab\036\uffab\060" +
    "\uffab\001\002\000\004\036\151\001\002\000\016\015\145" +
    "\016\146\024\uffbf\026\uffbf\036\uffbf\060\uffbf\001\002\000" +
    "\034\004\135\007\127\010\131\015\uffba\016\uffba\017\133" +
    "\020\134\021\132\022\130\024\uffba\026\uffba\036\uffba\060" +
    "\uffba\001\002\000\046\004\uffad\005\uffad\007\uffad\010\uffad" +
    "\011\uffad\012\uffad\013\uffad\014\uffad\015\uffad\016\uffad\017" +
    "\uffad\020\uffad\021\uffad\022\uffad\024\uffad\026\uffad\036\uffad" +
    "\060\uffad\001\002\000\044\004\uffb6\005\120\007\uffb6\010" +
    "\uffb6\011\122\012\121\014\117\015\uffb6\016\uffb6\017\uffb6" +
    "\020\uffb6\021\uffb6\022\uffb6\024\uffb6\026\uffb6\036\uffb6\060" +
    "\uffb6\001\002\000\044\004\uffb1\005\uffb1\007\uffb1\010\uffb1" +
    "\011\uffb1\012\uffb1\014\uffb1\015\uffb1\016\uffb1\017\uffb1\020" +
    "\uffb1\021\uffb1\022\uffb1\024\uffb1\026\uffb1\036\uffb1\060\uffb1" +
    "\001\002\000\024\006\101\010\100\011\054\025\066\064" +
    "\103\065\107\067\114\070\110\071\102\001\002\000\024" +
    "\006\101\010\100\011\054\025\066\064\103\065\107\067" +
    "\114\070\110\071\102\001\002\000\024\006\101\010\100" +
    "\011\054\025\066\064\103\065\107\067\114\070\110\071" +
    "\102\001\002\000\024\006\101\010\100\011\054\025\066" +
    "\064\103\065\107\067\114\070\110\071\102\001\002\000" +
    "\044\004\uffb4\005\uffb4\007\uffb4\010\uffb4\011\uffb4\012\uffb4" +
    "\014\uffb4\015\uffb4\016\uffb4\017\uffb4\020\uffb4\021\uffb4\022" +
    "\uffb4\024\uffb4\026\uffb4\036\uffb4\060\uffb4\001\002\000\044" +
    "\004\uffb3\005\uffb3\007\uffb3\010\uffb3\011\uffb3\012\uffb3\014" +
    "\uffb3\015\uffb3\016\uffb3\017\uffb3\020\uffb3\021\uffb3\022\uffb3" +
    "\024\uffb3\026\uffb3\036\uffb3\060\uffb3\001\002\000\044\004" +
    "\uffb5\005\uffb5\007\uffb5\010\uffb5\011\uffb5\012\uffb5\014\uffb5" +
    "\015\uffb5\016\uffb5\017\uffb5\020\uffb5\021\uffb5\022\uffb5\024" +
    "\uffb5\026\uffb5\036\uffb5\060\uffb5\001\002\000\044\004\uffb2" +
    "\005\uffb2\007\uffb2\010\uffb2\011\uffb2\012\uffb2\014\uffb2\015" +
    "\uffb2\016\uffb2\017\uffb2\020\uffb2\021\uffb2\022\uffb2\024\uffb2" +
    "\026\uffb2\036\uffb2\060\uffb2\001\002\000\024\006\101\010" +
    "\100\011\054\025\066\064\103\065\107\067\114\070\110" +
    "\071\102\001\002\000\024\006\101\010\100\011\054\025" +
    "\066\064\103\065\107\067\114\070\110\071\102\001\002" +
    "\000\024\006\101\010\100\011\054\025\066\064\103\065" +
    "\107\067\114\070\110\071\102\001\002\000\024\006\101" +
    "\010\100\011\054\025\066\064\103\065\107\067\114\070" +
    "\110\071\102\001\002\000\024\006\101\010\100\011\054" +
    "\025\066\064\103\065\107\067\114\070\110\071\102\001" +
    "\002\000\024\006\101\010\100\011\054\025\066\064\103" +
    "\065\107\067\114\070\110\071\102\001\002\000\024\006" +
    "\101\010\100\011\054\025\066\064\103\065\107\067\114" +
    "\070\110\071\102\001\002\000\044\004\uffb9\005\120\007" +
    "\uffb9\010\uffb9\011\122\012\121\014\117\015\uffb9\016\uffb9" +
    "\017\uffb9\020\uffb9\021\uffb9\022\uffb9\024\uffb9\026\uffb9\036" +
    "\uffb9\060\uffb9\001\002\000\024\004\135\007\127\010\131" +
    "\015\uffbd\016\uffbd\024\uffbd\026\uffbd\036\uffbd\060\uffbd\001" +
    "\002\000\024\004\135\007\127\010\131\015\uffbe\016\uffbe" +
    "\024\uffbe\026\uffbe\036\uffbe\060\uffbe\001\002\000\024\004" +
    "\135\007\127\010\131\015\uffbc\016\uffbc\024\uffbc\026\uffbc" +
    "\036\uffbc\060\uffbc\001\002\000\044\004\uffb7\005\120\007" +
    "\uffb7\010\uffb7\011\122\012\121\014\117\015\uffb7\016\uffb7" +
    "\017\uffb7\020\uffb7\021\uffb7\022\uffb7\024\uffb7\026\uffb7\036" +
    "\uffb7\060\uffb7\001\002\000\024\004\135\007\127\010\131" +
    "\015\uffbb\016\uffbb\024\uffbb\026\uffbb\036\uffbb\060\uffbb\001" +
    "\002\000\044\004\uffb8\005\120\007\uffb8\010\uffb8\011\122" +
    "\012\121\014\117\015\uffb8\016\uffb8\017\uffb8\020\uffb8\021" +
    "\uffb8\022\uffb8\024\uffb8\026\uffb8\036\uffb8\060\uffb8\001\002" +
    "\000\024\006\101\010\100\011\054\025\066\064\103\065" +
    "\107\067\114\070\110\071\102\001\002\000\024\006\101" +
    "\010\100\011\054\025\066\064\103\065\107\067\114\070" +
    "\110\071\102\001\002\000\012\024\uffc0\026\uffc0\036\uffc0" +
    "\060\uffc0\001\002\000\012\024\uffc1\026\uffc1\036\uffc1\060" +
    "\uffc1\001\002\000\024\006\101\010\100\011\054\025\066" +
    "\064\103\065\107\067\114\070\110\071\102\001\002\000" +
    "\006\026\154\036\153\001\002\000\024\006\101\010\100" +
    "\011\054\025\066\064\103\065\107\067\114\070\110\071" +
    "\102\001\002\000\004\034\155\001\002\000\044\011\uffef" +
    "\025\uffef\027\uffef\030\uffef\035\uffef\037\uffef\042\uffef\045" +
    "\uffef\046\uffef\047\uffef\050\uffef\051\uffef\052\uffef\053\uffef" +
    "\054\uffef\055\uffef\071\uffef\001\002\000\044\011\054\025" +
    "\066\027\046\030\074\035\157\037\053\042\051\045\065" +
    "\046\070\047\073\050\034\051\026\052\012\053\071\054" +
    "\062\055\044\071\050\001\002\000\052\011\uffe2\025\uffe2" +
    "\027\uffe2\030\uffe2\032\uffe2\035\uffe2\037\uffe2\042\uffe2\043" +
    "\uffe2\044\uffe2\045\uffe2\046\uffe2\047\uffe2\050\uffe2\051\uffe2" +
    "\052\uffe2\053\uffe2\054\uffe2\055\uffe2\071\uffe2\001\002\000" +
    "\004\026\161\001\002\000\004\034\162\001\002\000\044" +
    "\011\uffef\025\uffef\027\uffef\030\uffef\035\uffef\037\uffef\042" +
    "\uffef\045\uffef\046\uffef\047\uffef\050\uffef\051\uffef\052\uffef" +
    "\053\uffef\054\uffef\055\uffef\071\uffef\001\002\000\044\011" +
    "\054\025\066\027\046\030\074\035\164\037\053\042\051" +
    "\045\065\046\070\047\073\050\034\051\026\052\012\053" +
    "\071\054\062\055\044\071\050\001\002\000\052\011\uffe1" +
    "\025\uffe1\027\uffe1\030\uffe1\032\uffe1\035\uffe1\037\uffe1\042" +
    "\uffe1\043\uffe1\044\uffe1\045\uffe1\046\uffe1\047\uffe1\050\uffe1" +
    "\051\uffe1\052\uffe1\053\uffe1\054\uffe1\055\uffe1\071\uffe1\001" +
    "\002\000\024\006\101\010\100\011\054\025\066\064\103" +
    "\065\107\067\114\070\110\071\102\001\002\000\044\004" +
    "\uffb0\005\uffb0\007\uffb0\010\uffb0\011\uffb0\012\uffb0\014\uffb0" +
    "\015\uffb0\016\uffb0\017\uffb0\020\uffb0\021\uffb0\022\uffb0\024" +
    "\uffb0\026\uffb0\036\uffb0\060\uffb0\001\002\000\026\006\101" +
    "\010\100\011\054\025\066\026\uffca\064\103\065\107\067" +
    "\114\070\110\071\102\001\002\000\006\024\174\026\uffcb" +
    "\001\002\000\004\026\173\001\002\000\006\024\uffc8\026" +
    "\uffc8\001\002\000\046\004\uffcc\005\uffcc\007\uffcc\010\uffcc" +
    "\011\uffcc\012\uffcc\013\uffcc\014\uffcc\015\uffcc\016\uffcc\017" +
    "\uffcc\020\uffcc\021\uffcc\022\uffcc\024\uffcc\026\uffcc\036\uffcc" +
    "\060\uffcc\001\002\000\024\006\101\010\100\011\054\025" +
    "\066\064\103\065\107\067\114\070\110\071\102\001\002" +
    "\000\006\024\uffc9\026\uffc9\001\002\000\044\004\uffaf\005" +
    "\uffaf\007\uffaf\010\uffaf\011\uffaf\012\uffaf\014\uffaf\015\uffaf" +
    "\016\uffaf\017\uffaf\020\uffaf\021\uffaf\022\uffaf\024\uffaf\026" +
    "\uffaf\036\uffaf\060\uffaf\001\002\000\046\004\uffac\005\uffac" +
    "\007\uffac\010\uffac\011\uffac\012\uffac\013\uffac\014\uffac\015" +
    "\uffac\016\uffac\017\uffac\020\uffac\021\uffac\022\uffac\024\uffac" +
    "\026\uffac\036\uffac\060\uffac\001\002\000\046\004\uffaa\005" +
    "\uffaa\007\uffaa\010\uffaa\011\uffaa\012\uffaa\013\uffaa\014\uffaa" +
    "\015\uffaa\016\uffaa\017\uffaa\020\uffaa\021\uffaa\022\uffaa\024" +
    "\uffaa\026\uffaa\036\uffaa\060\uffaa\001\002\000\004\071\202" +
    "\001\002\000\004\026\203\001\002\000\004\036\204\001" +
    "\002\000\052\011\uffce\025\uffce\027\uffce\030\uffce\032\uffce" +
    "\035\uffce\037\uffce\042\uffce\043\uffce\044\uffce\045\uffce\046" +
    "\uffce\047\uffce\050\uffce\051\uffce\052\uffce\053\uffce\054\uffce" +
    "\055\uffce\071\uffce\001\002\000\010\023\210\036\207\057" +
    "\206\001\002\000\024\006\101\010\100\011\054\025\066" +
    "\064\103\065\107\067\114\070\110\071\102\001\002\000" +
    "\056\011\uffe5\025\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5" +
    "\033\uffe5\035\uffe5\037\uffe5\042\uffe5\043\uffe5\044\uffe5\045" +
    "\uffe5\046\uffe5\047\uffe5\050\uffe5\051\uffe5\052\uffe5\053\uffe5" +
    "\054\uffe5\055\uffe5\071\uffe5\001\002\000\024\006\101\010" +
    "\100\011\054\025\066\064\103\065\107\067\114\070\110" +
    "\071\102\001\002\000\006\036\213\057\212\001\002\000" +
    "\024\006\101\010\100\011\054\025\066\064\103\065\107" +
    "\067\114\070\110\071\102\001\002\000\056\011\uffd6\025" +
    "\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\035\uffd6" +
    "\037\uffd6\042\uffd6\043\uffd6\044\uffd6\045\uffd6\046\uffd6\047" +
    "\uffd6\050\uffd6\051\uffd6\052\uffd6\053\uffd6\054\uffd6\055\uffd6" +
    "\071\uffd6\001\002\000\004\060\215\001\002\000\006\036" +
    "\uffd5\057\uffd5\001\002\000\004\036\217\001\002\000\056" +
    "\011\uffe4\025\uffe4\027\uffe4\030\uffe4\031\uffe4\032\uffe4\033" +
    "\uffe4\035\uffe4\037\uffe4\042\uffe4\043\uffe4\044\uffe4\045\uffe4" +
    "\046\uffe4\047\uffe4\050\uffe4\051\uffe4\052\uffe4\053\uffe4\054" +
    "\uffe4\055\uffe4\071\uffe4\001\002\000\004\060\221\001\002" +
    "\000\006\036\uffd4\057\uffd4\001\002\000\024\006\101\010" +
    "\100\011\054\025\066\064\103\065\107\067\114\070\110" +
    "\071\102\001\002\000\004\026\224\001\002\000\004\036" +
    "\225\001\002\000\052\011\uffd2\025\uffd2\027\uffd2\030\uffd2" +
    "\032\uffd2\035\uffd2\037\uffd2\042\uffd2\043\uffd2\044\uffd2\045" +
    "\uffd2\046\uffd2\047\uffd2\050\uffd2\051\uffd2\052\uffd2\053\uffd2" +
    "\054\uffd2\055\uffd2\071\uffd2\001\002\000\024\006\101\010" +
    "\100\011\054\025\066\064\103\065\107\067\114\070\110" +
    "\071\102\001\002\000\004\026\230\001\002\000\004\036" +
    "\231\001\002\000\052\011\uffcf\025\uffcf\027\uffcf\030\uffcf" +
    "\032\uffcf\035\uffcf\037\uffcf\042\uffcf\043\uffcf\044\uffcf\045" +
    "\uffcf\046\uffcf\047\uffcf\050\uffcf\051\uffcf\052\uffcf\053\uffcf" +
    "\054\uffcf\055\uffcf\071\uffcf\001\002\000\004\026\233\001" +
    "\002\000\056\004\uff9f\005\uff9f\007\uff9f\010\uff9f\011\uff9f" +
    "\012\uff9f\013\uff9f\014\uff9f\015\uff9f\016\uff9f\017\uff9f\020" +
    "\uff9f\021\uff9f\022\uff9f\023\uff9f\024\uff9f\026\uff9f\036\uff9f" +
    "\057\uff9f\060\uff9f\061\uff9f\062\uff9f\001\002\000\052\011" +
    "\uffea\025\uffea\027\uffea\030\uffea\032\uffea\035\uffea\037\uffea" +
    "\042\uffea\043\uffea\044\uffea\045\uffea\046\uffea\047\uffea\050" +
    "\uffea\051\uffea\052\uffea\053\uffea\054\uffea\055\uffea\071\uffea" +
    "\001\002\000\006\025\066\071\241\001\002\000\024\006" +
    "\101\010\100\011\054\025\066\064\103\065\107\067\114" +
    "\070\110\071\102\001\002\000\006\025\066\071\241\001" +
    "\002\000\056\004\uffa3\005\uffa3\007\uffa3\010\uffa3\011\uffa3" +
    "\012\uffa3\013\uffa3\014\uffa3\015\uffa3\016\uffa3\017\uffa3\020" +
    "\uffa3\021\uffa3\022\uffa3\023\uffa3\024\uffa3\026\uffa3\036\uffa3" +
    "\057\uffa3\060\uffa3\061\uffa3\062\uffa3\001\002\000\056\004" +
    "\uff9e\005\uff9e\007\uff9e\010\uff9e\011\uff9e\012\uff9e\013\uff9e" +
    "\014\uff9e\015\uff9e\016\uff9e\017\uff9e\020\uff9e\021\uff9e\022" +
    "\uff9e\023\uff9e\024\uff9e\026\uff9e\036\uff9e\057\uff9e\060\uff9e" +
    "\061\uff9e\062\uff9e\001\002\000\004\060\243\001\002\000" +
    "\056\004\uffa1\005\uffa1\007\uffa1\010\uffa1\011\uffa1\012\uffa1" +
    "\013\uffa1\014\uffa1\015\uffa1\016\uffa1\017\uffa1\020\uffa1\021" +
    "\uffa1\022\uffa1\023\uffa1\024\uffa1\026\uffa1\036\uffa1\057\uffa1" +
    "\060\uffa1\061\uffa1\062\uffa1\001\002\000\056\004\uffa2\005" +
    "\uffa2\007\uffa2\010\uffa2\011\uffa2\012\uffa2\013\uffa2\014\uffa2" +
    "\015\uffa2\016\uffa2\017\uffa2\020\uffa2\021\uffa2\022\uffa2\023" +
    "\uffa2\024\uffa2\026\uffa2\036\uffa2\057\uffa2\060\uffa2\061\uffa2" +
    "\062\uffa2\001\002\000\024\006\101\010\100\011\054\025" +
    "\066\064\103\065\107\067\114\070\110\071\102\001\002" +
    "\000\004\026\247\001\002\000\004\036\250\001\002\000" +
    "\052\011\uffd1\025\uffd1\027\uffd1\030\uffd1\032\uffd1\035\uffd1" +
    "\037\uffd1\042\uffd1\043\uffd1\044\uffd1\045\uffd1\046\uffd1\047" +
    "\uffd1\050\uffd1\051\uffd1\052\uffd1\053\uffd1\054\uffd1\055\uffd1" +
    "\071\uffd1\001\002\000\024\006\101\010\100\011\054\025" +
    "\066\064\103\065\107\067\114\070\110\071\102\001\002" +
    "\000\004\036\253\001\002\000\052\011\uffe3\025\uffe3\027" +
    "\uffe3\030\uffe3\032\uffe3\035\uffe3\037\uffe3\042\uffe3\043\uffe3" +
    "\044\uffe3\045\uffe3\046\uffe3\047\uffe3\050\uffe3\051\uffe3\052" +
    "\uffe3\053\uffe3\054\uffe3\055\uffe3\071\uffe3\001\002\000\052" +
    "\011\uffcd\025\uffcd\027\uffcd\030\uffcd\032\uffcd\035\uffcd\037" +
    "\uffcd\042\uffcd\043\uffcd\044\uffcd\045\uffcd\046\uffcd\047\uffcd" +
    "\050\uffcd\051\uffcd\052\uffcd\053\uffcd\054\uffcd\055\uffcd\071" +
    "\uffcd\001\002\000\050\004\uffa5\005\uffa5\007\uffa5\010\uffa5" +
    "\011\uffa5\012\uffa5\013\uffa5\014\uffa5\015\uffa5\016\uffa5\017" +
    "\uffa5\020\uffa5\021\uffa5\022\uffa5\023\uffa5\024\uffa5\026\uffa5" +
    "\036\uffa5\060\uffa5\001\002\000\024\006\101\010\100\011" +
    "\054\025\066\064\103\065\107\067\114\070\110\071\102" +
    "\001\002\000\004\026\260\001\002\000\004\034\261\001" +
    "\002\000\044\011\uffef\025\uffef\027\uffef\030\uffef\035\uffef" +
    "\037\uffef\042\uffef\045\uffef\046\uffef\047\uffef\050\uffef\051" +
    "\uffef\052\uffef\053\uffef\054\uffef\055\uffef\071\uffef\001\002" +
    "\000\044\011\054\025\066\027\046\030\074\035\263\037" +
    "\053\042\051\045\065\046\070\047\073\050\034\051\026" +
    "\052\012\053\071\054\062\055\044\071\050\001\002\000" +
    "\056\011\uffe6\025\uffe6\027\uffe6\030\uffe6\032\uffe6\035\uffe6" +
    "\037\uffe6\040\uffe6\041\uffe6\042\uffe6\043\uffe6\044\uffe6\045" +
    "\uffe6\046\uffe6\047\uffe6\050\uffe6\051\uffe6\052\uffe6\053\uffe6" +
    "\054\uffe6\055\uffe6\071\uffe6\001\002\000\056\011\uffe9\025" +
    "\uffe9\027\uffe9\030\uffe9\032\uffe9\035\uffe9\037\uffe9\040\266" +
    "\041\265\042\uffe9\043\uffe9\044\uffe9\045\uffe9\046\uffe9\047" +
    "\uffe9\050\uffe9\051\uffe9\052\uffe9\053\uffe9\054\uffe9\055\uffe9" +
    "\071\uffe9\001\002\000\004\034\275\001\002\000\004\025" +
    "\267\001\002\000\024\006\101\010\100\011\054\025\066" +
    "\064\103\065\107\067\114\070\110\071\102\001\002\000" +
    "\004\026\271\001\002\000\004\034\272\001\002\000\044" +
    "\011\uffef\025\uffef\027\uffef\030\uffef\035\uffef\037\uffef\042" +
    "\uffef\045\uffef\046\uffef\047\uffef\050\uffef\051\uffef\052\uffef" +
    "\053\uffef\054\uffef\055\uffef\071\uffef\001\002\000\044\011" +
    "\054\025\066\027\046\030\074\035\274\037\053\042\051" +
    "\045\065\046\070\047\073\050\034\051\026\052\012\053" +
    "\071\054\062\055\044\071\050\001\002\000\056\011\uffe7" +
    "\025\uffe7\027\uffe7\030\uffe7\032\uffe7\035\uffe7\037\uffe7\040" +
    "\uffe7\041\uffe7\042\uffe7\043\uffe7\044\uffe7\045\uffe7\046\uffe7" +
    "\047\uffe7\050\uffe7\051\uffe7\052\uffe7\053\uffe7\054\uffe7\055" +
    "\uffe7\071\uffe7\001\002\000\044\011\uffef\025\uffef\027\uffef" +
    "\030\uffef\035\uffef\037\uffef\042\uffef\045\uffef\046\uffef\047" +
    "\uffef\050\uffef\051\uffef\052\uffef\053\uffef\054\uffef\055\uffef" +
    "\071\uffef\001\002\000\044\011\054\025\066\027\046\030" +
    "\074\035\277\037\053\042\051\045\065\046\070\047\073" +
    "\050\034\051\026\052\012\053\071\054\062\055\044\071" +
    "\050\001\002\000\052\011\uffe8\025\uffe8\027\uffe8\030\uffe8" +
    "\032\uffe8\035\uffe8\037\uffe8\042\uffe8\043\uffe8\044\uffe8\045" +
    "\uffe8\046\uffe8\047\uffe8\050\uffe8\051\uffe8\052\uffe8\053\uffe8" +
    "\054\uffe8\055\uffe8\071\uffe8\001\002\000\024\006\101\010" +
    "\100\011\054\025\066\064\103\065\107\067\114\070\110" +
    "\071\102\001\002\000\004\026\302\001\002\000\004\034" +
    "\303\001\002\000\010\035\uffdd\043\uffdd\044\uffdd\001\002" +
    "\000\010\035\307\043\310\044\305\001\002\000\004\063" +
    "\315\001\002\000\004\035\314\001\002\000\052\011\uffdf" +
    "\025\uffdf\027\uffdf\030\uffdf\032\uffdf\035\uffdf\037\uffdf\042" +
    "\uffdf\043\uffdf\044\uffdf\045\uffdf\046\uffdf\047\uffdf\050\uffdf" +
    "\051\uffdf\052\uffdf\053\uffdf\054\uffdf\055\uffdf\071\uffdf\001" +
    "\002\000\004\067\311\001\002\000\004\063\312\001\002" +
    "\000\050\011\uffef\025\uffef\027\uffef\030\uffef\035\uffef\037" +
    "\uffef\042\uffef\043\uffef\044\uffef\045\uffef\046\uffef\047\uffef" +
    "\050\uffef\051\uffef\052\uffef\053\uffef\054\uffef\055\uffef\071" +
    "\uffef\001\002\000\050\011\054\025\066\027\046\030\074" +
    "\035\uffdc\037\053\042\051\043\uffdc\044\uffdc\045\065\046" +
    "\070\047\073\050\034\051\026\052\012\053\071\054\062" +
    "\055\044\071\050\001\002\000\052\011\uffde\025\uffde\027" +
    "\uffde\030\uffde\032\uffde\035\uffde\037\uffde\042\uffde\043\uffde" +
    "\044\uffde\045\uffde\046\uffde\047\uffde\050\uffde\051\uffde\052" +
    "\uffde\053\uffde\054\uffde\055\uffde\071\uffde\001\002\000\044" +
    "\011\uffef\025\uffef\027\uffef\030\uffef\035\uffef\037\uffef\042" +
    "\uffef\045\uffef\046\uffef\047\uffef\050\uffef\051\uffef\052\uffef" +
    "\053\uffef\054\uffef\055\uffef\071\uffef\001\002\000\044\011" +
    "\054\025\066\027\046\030\074\035\uffdb\037\053\042\051" +
    "\045\065\046\070\047\073\050\034\051\026\052\012\053" +
    "\071\054\062\055\044\071\050\001\002\000\024\006\101" +
    "\010\100\011\054\025\066\064\103\065\107\067\114\070" +
    "\110\071\102\001\002\000\004\026\321\001\002\000\004" +
    "\034\322\001\002\000\044\011\uffef\025\uffef\027\uffef\030" +
    "\uffef\035\uffef\037\uffef\042\uffef\045\uffef\046\uffef\047\uffef" +
    "\050\uffef\051\uffef\052\uffef\053\uffef\054\uffef\055\uffef\071" +
    "\uffef\001\002\000\044\011\054\025\066\027\046\030\074" +
    "\035\324\037\053\042\051\045\065\046\070\047\073\050" +
    "\034\051\026\052\012\053\071\054\062\055\044\071\050" +
    "\001\002\000\052\011\uffe0\025\uffe0\027\uffe0\030\uffe0\032" +
    "\uffe0\035\uffe0\037\uffe0\042\uffe0\043\uffe0\044\uffe0\045\uffe0" +
    "\046\uffe0\047\uffe0\050\uffe0\051\uffe0\052\uffe0\053\uffe0\054" +
    "\uffe0\055\uffe0\071\uffe0\001\002\000\004\071\326\001\002" +
    "\000\004\026\327\001\002\000\004\036\330\001\002\000" +
    "\052\011\uffd0\025\uffd0\027\uffd0\030\uffd0\032\uffd0\035\uffd0" +
    "\037\uffd0\042\uffd0\043\uffd0\044\uffd0\045\uffd0\046\uffd0\047" +
    "\uffd0\050\uffd0\051\uffd0\052\uffd0\053\uffd0\054\uffd0\055\uffd0" +
    "\071\uffd0\001\002\000\012\050\034\051\026\052\012\071" +
    "\015\001\002\000\006\066\333\071\334\001\002\000\004" +
    "\071\335\001\002\000\006\024\uffc4\026\uffc4\001\002\000" +
    "\006\024\uffc5\026\uffc5\001\002\000\004\071\340\001\002" +
    "\000\006\024\uffc2\026\uffc2\001\002\000\006\024\uffc3\026" +
    "\uffc3\001\002\000\010\011\uff95\066\uff95\071\uff95\001\002" +
    "\000\004\034\343\001\002\000\016\031\uffeb\035\uffeb\050" +
    "\uffeb\051\uffeb\052\uffeb\071\uffeb\001\002\000\016\031\016" +
    "\035\347\050\034\051\026\052\012\071\015\001\002\000" +
    "\004\071\356\001\002\000\016\031\uffec\035\uffec\050\uffec" +
    "\051\uffec\052\uffec\071\uffec\001\002\000\016\031\uffee\033" +
    "\uffee\050\uffee\051\uffee\052\uffee\071\uffee\001\002\000\006" +
    "\011\030\071\352\001\002\000\016\031\uffed\035\uffed\050" +
    "\uffed\051\uffed\052\uffed\071\uffed\001\002\000\004\025\353" +
    "\001\002\000\014\026\uffc6\050\034\051\026\052\012\071" +
    "\015\001\002\000\004\026\355\001\002\000\004\034\040" +
    "\001\002\000\010\023\210\025\357\036\207\001\002\000" +
    "\014\026\uffc6\050\034\051\026\052\012\071\015\001\002" +
    "\000\004\026\361\001\002\000\004\034\362\001\002\000" +
    "\044\011\uffef\025\uffef\027\uffef\030\uffef\032\uffef\037\uffef" +
    "\042\uffef\045\uffef\046\uffef\047\uffef\050\uffef\051\uffef\052" +
    "\uffef\053\uffef\054\uffef\055\uffef\071\uffef\001\002\000\044" +
    "\011\054\025\066\027\046\030\074\032\364\037\053\042" +
    "\051\045\065\046\070\047\073\050\034\051\026\052\012" +
    "\053\071\054\062\055\044\071\050\001\002\000\024\006" +
    "\101\010\100\011\054\025\066\064\103\065\107\067\114" +
    "\070\110\071\102\001\002\000\004\035\366\001\002\000" +
    "\020\031\uffd8\033\uffd8\035\uffd8\050\uffd8\051\uffd8\052\uffd8" +
    "\071\uffd8\001\002\000\004\036\370\001\002\000\004\035" +
    "\uffd3\001\002\000\004\025\372\001\002\000\004\026\373" +
    "\001\002\000\004\034\374\001\002\000\044\011\uffef\025" +
    "\uffef\027\uffef\030\uffef\032\uffef\037\uffef\042\uffef\045\uffef" +
    "\046\uffef\047\uffef\050\uffef\051\uffef\052\uffef\053\uffef\054" +
    "\uffef\055\uffef\071\uffef\001\002\000\044\011\054\025\066" +
    "\027\046\030\074\032\364\037\053\042\051\045\065\046" +
    "\070\047\073\050\034\051\026\052\012\053\071\054\062" +
    "\055\044\071\050\001\002\000\004\035\377\001\002\000" +
    "\004\002\ufff9\001\002\000\012\023\210\025\u0101\036\207" +
    "\057\206\001\002\000\014\026\uffc6\050\034\051\026\052" +
    "\012\071\015\001\002\000\004\026\u0103\001\002\000\006" +
    "\034\362\036\u0104\001\002\000\016\031\uffda\033\uffda\050" +
    "\uffda\051\uffda\052\uffda\071\uffda\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0102\000\006\002\004\050\003\001\001\000\026\010" +
    "\022\011\012\020\021\021\010\022\020\037\024\040\016" +
    "\041\006\042\017\051\023\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\037\024\040\016\041\032\044\035\045\034" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\041" +
    "\001\001\000\002\001\001\000\042\007\044\010\046\011" +
    "\042\012\060\013\075\014\055\015\051\016\056\017\074" +
    "\033\054\034\062\035\063\036\057\037\024\040\016\041" +
    "\071\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\034\062\035\063\036\254\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\025\231\026\111" +
    "\027\112\030\114\031\115\032\105\033\103\034\062\035" +
    "\063\036\104\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\025\110\026\111\027\112\030\114\031\115\032\105\033" +
    "\103\034\062\035\063\036\104\001\001\000\002\001\001" +
    "\000\016\031\175\032\105\033\103\034\062\035\063\036" +
    "\104\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\031\125\032\105\033\103\034\062" +
    "\035\063\036\104\001\001\000\016\031\124\032\105\033" +
    "\103\034\062\035\063\036\104\001\001\000\016\031\123" +
    "\032\105\033\103\034\062\035\063\036\104\001\001\000" +
    "\016\031\122\032\105\033\103\034\062\035\063\036\104" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\030\143\031\115\032\105" +
    "\033\103\034\062\035\063\036\104\001\001\000\022\027" +
    "\142\030\114\031\115\032\105\033\103\034\062\035\063" +
    "\036\104\001\001\000\020\030\141\031\115\032\105\033" +
    "\103\034\062\035\063\036\104\001\001\000\022\027\140" +
    "\030\114\031\115\032\105\033\103\034\062\035\063\036" +
    "\104\001\001\000\022\027\137\030\114\031\115\032\105" +
    "\033\103\034\062\035\063\036\104\001\001\000\022\027" +
    "\136\030\114\031\115\032\105\033\103\034\062\035\063" +
    "\036\104\001\001\000\020\030\135\031\115\032\105\033" +
    "\103\034\062\035\063\036\104\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\026\147\027\112\030\114\031\115\032\105\033\103\034" +
    "\062\035\063\036\104\001\001\000\024\026\146\027\112" +
    "\030\114\031\115\032\105\033\103\034\062\035\063\036" +
    "\104\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\025\151\026\111\027\112\030\114\031\115\032\105\033" +
    "\103\034\062\035\063\036\104\001\001\000\002\001\001" +
    "\000\026\025\157\026\111\027\112\030\114\031\115\032" +
    "\105\033\103\034\062\035\063\036\104\001\001\000\002" +
    "\001\001\000\004\003\155\001\001\000\042\007\044\010" +
    "\046\011\042\012\060\013\075\014\055\015\051\016\056" +
    "\017\074\033\054\034\062\035\063\036\057\037\024\040" +
    "\016\041\071\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\162\001\001\000\042\007" +
    "\044\010\046\011\042\012\060\013\075\014\055\015\051" +
    "\016\056\017\074\033\054\034\062\035\063\036\057\037" +
    "\024\040\016\041\071\001\001\000\002\001\001\000\016" +
    "\031\165\032\105\033\103\034\062\035\063\036\104\001" +
    "\001\000\002\001\001\000\032\025\171\026\111\027\112" +
    "\030\114\031\115\032\105\033\103\034\062\035\063\036" +
    "\104\046\170\047\167\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\025" +
    "\174\026\111\027\112\030\114\031\115\032\105\033\103" +
    "\034\062\035\063\036\104\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\210\001\001\000\026\025\217\026\111" +
    "\027\112\030\114\031\115\032\105\033\103\034\062\035" +
    "\063\036\104\001\001\000\002\001\001\000\026\025\215" +
    "\026\111\027\112\030\114\031\115\032\105\033\103\034" +
    "\062\035\063\036\104\001\001\000\002\001\001\000\026" +
    "\025\213\026\111\027\112\030\114\031\115\032\105\033" +
    "\103\034\062\035\063\036\104\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\025\222\026\111\027\112\030\114\031\115\032\105\033" +
    "\103\034\062\035\063\036\104\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\025\226\026" +
    "\111\027\112\030\114\031\115\032\105\033\103\034\062" +
    "\035\063\036\104\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\034\243\001\001\000\026\025" +
    "\241\026\111\027\112\030\114\031\115\032\105\033\103" +
    "\034\062\035\063\036\104\001\001\000\004\034\237\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\025\245\026" +
    "\111\027\112\030\114\031\115\032\105\033\103\034\062" +
    "\035\063\036\104\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\025\251\026\111\027\112" +
    "\030\114\031\115\032\105\033\103\034\062\035\063\036" +
    "\104\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\025\256\026\111\027" +
    "\112\030\114\031\115\032\105\033\103\034\062\035\063" +
    "\036\104\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\261\001\001\000\042\007\044\010\046\011\042" +
    "\012\060\013\075\014\055\015\051\016\056\017\074\033" +
    "\054\034\062\035\063\036\057\037\024\040\016\041\071" +
    "\001\001\000\004\043\263\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\025\267\026\111" +
    "\027\112\030\114\031\115\032\105\033\103\034\062\035" +
    "\063\036\104\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\003\272\001\001\000\042\007\044\010\046\011" +
    "\042\012\060\013\075\014\055\015\051\016\056\017\074" +
    "\033\054\034\062\035\063\036\057\037\024\040\016\041" +
    "\071\001\001\000\002\001\001\000\004\003\275\001\001" +
    "\000\042\007\044\010\046\011\042\012\060\013\075\014" +
    "\055\015\051\016\056\017\074\033\054\034\062\035\063" +
    "\036\057\037\024\040\016\041\071\001\001\000\002\001" +
    "\001\000\026\025\300\026\111\027\112\030\114\031\115" +
    "\032\105\033\103\034\062\035\063\036\104\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\303\001\001" +
    "\000\004\024\305\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\003\312\001\001\000\042\007\044\010\046\011" +
    "\042\012\060\013\075\014\055\015\051\016\056\017\074" +
    "\033\054\034\062\035\063\036\057\037\024\040\016\041" +
    "\071\001\001\000\002\001\001\000\004\003\315\001\001" +
    "\000\042\007\044\010\046\011\042\012\060\013\075\014" +
    "\055\015\051\016\056\017\074\033\054\034\062\035\063" +
    "\036\057\037\024\040\016\041\071\001\001\000\026\025" +
    "\317\026\111\027\112\030\114\031\115\032\105\033\103" +
    "\034\062\035\063\036\104\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\322\001\001\000\042\007\044" +
    "\010\046\011\042\012\060\013\075\014\055\015\051\016" +
    "\056\017\074\033\054\034\062\035\063\036\057\037\024" +
    "\040\016\041\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\037\024\040\016\041\331\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\343\001\001" +
    "\000\016\010\350\021\345\037\024\040\016\041\344\042" +
    "\347\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\037\024\040\016\041\032\044\353\045\034" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\037\024\040\016\041\032\044\357\045\034" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\362\001\001\000\044\006\364\007\044\010\046\011\042" +
    "\012\060\013\075\014\055\015\051\016\056\017\074\033" +
    "\054\034\062\035\063\036\057\037\024\040\016\041\071" +
    "\001\001\000\026\025\366\026\111\027\112\030\114\031" +
    "\115\032\105\033\103\034\062\035\063\036\104\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\003\374\001\001\000\044\006\375\007" +
    "\044\010\046\011\042\012\060\013\075\014\055\015\051" +
    "\016\056\017\074\033\054\034\062\035\063\036\057\037" +
    "\024\040\016\041\071\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\210\001\001\000\014\037\024\040" +
    "\016\041\032\044\u0101\045\034\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ConstructorASTExp$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ConstructorASTExp$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ConstructorASTExp$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny();
   AnalizadorLexicoSajax sajax = (AnalizadorLexicoSajax)getScanner();
   sajax.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ConstructorASTExp$actions {
  private final ConstructorASTExp parser;

  /** Constructor */
  CUP$ConstructorASTExp$actions(ConstructorASTExp parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ConstructorASTExp$do_action_part00000000(
    int                        CUP$ConstructorASTExp$act_num,
    java_cup.runtime.lr_parser CUP$ConstructorASTExp$parser,
    java.util.Stack            CUP$ConstructorASTExp$stack,
    int                        CUP$ConstructorASTExp$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ConstructorASTExp$result;

      /* select the action based on the action number */
      switch (CUP$ConstructorASTExp$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= GrupoDefs Main 
            {
              Programa RESULT =null;
		ArrayList<Definicion> defs = (ArrayList<Definicion>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		MainFun main = (MainFun)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new Programa(new BloqueDef(defs), main); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("S",0, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		Programa start_val = (Programa)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		RESULT = start_val;
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$ConstructorASTExp$parser.done_parsing();
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // GrupoDefs ::= GrupoDefs SDecFuncionInline 
            {
              ArrayList<Definicion> RESULT =null;
		ArrayList<Definicion> defs = (ArrayList<Definicion>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Definicion newdef = (Definicion)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 defs.add(newdef); RESULT = defs; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("GrupoDefs",38, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // GrupoDefs ::= GrupoDefs SDecFuncion 
            {
              ArrayList<Definicion> RESULT =null;
		ArrayList<Definicion> defs = (ArrayList<Definicion>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Definicion newdef = (Definicion)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 defs.add(newdef); RESULT = defs; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("GrupoDefs",38, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // GrupoDefs ::= GrupoDefs SStruct 
            {
              ArrayList<Definicion> RESULT =null;
		ArrayList<Definicion> defs = (ArrayList<Definicion>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Definicion newdef = (Definicion)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 defs.add(newdef); RESULT = defs; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("GrupoDefs",38, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // GrupoDefs ::= GrupoDefs SDec 
            {
              ArrayList<Definicion> RESULT =null;
		ArrayList<Definicion> defs = (ArrayList<Definicion>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Statement newdef = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 defs.add(new VarGlobal(newdef)); RESULT = defs; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("GrupoDefs",38, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // GrupoDefs ::= GrupoDefs SDecArray 
            {
              ArrayList<Definicion> RESULT =null;
		ArrayList<Definicion> defs = (ArrayList<Definicion>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Statement newdef = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 defs.add(new VarGlobal(newdef)); RESULT = defs; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("GrupoDefs",38, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // GrupoDefs ::= 
            {
              ArrayList<Definicion> RESULT =null;
		 RESULT = new ArrayList<Definicion>(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("GrupoDefs",38, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Main ::= INT MAIN PAP PCIERRE LLAP BloqueGeneral SReturn LLCIERRE 
            {
              MainFun RESULT =null;
		ArrayList<Statement> bloque = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Return ret = (Return)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=new MainFun(new BloqueIns(bloque), ret); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Main",39, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // BloqueGeneral ::= BloqueGeneral SAsign 
            {
              ArrayList<Statement> RESULT =null;
		ArrayList<Statement> genBlock = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Statement aDeexp = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 genBlock.add(aDeexp); RESULT=genBlock; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("BloqueGeneral",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // BloqueGeneral ::= BloqueGeneral SDec 
            {
              ArrayList<Statement> RESULT =null;
		ArrayList<Statement> genBlock = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Statement aDeexp = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 genBlock.add(aDeexp); RESULT=genBlock; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("BloqueGeneral",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // BloqueGeneral ::= BloqueGeneral SDecArray 
            {
              ArrayList<Statement> RESULT =null;
		ArrayList<Statement> genBlock = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Statement aDeexp = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 genBlock.add(aDeexp); RESULT=genBlock; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("BloqueGeneral",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // BloqueGeneral ::= BloqueGeneral SIf 
            {
              ArrayList<Statement> RESULT =null;
		ArrayList<Statement> genBlock = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Statement aDeexp = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 genBlock.add(aDeexp); RESULT=genBlock; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("BloqueGeneral",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // BloqueGeneral ::= BloqueGeneral SFor 
            {
              ArrayList<Statement> RESULT =null;
		ArrayList<Statement> genBlock = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Statement aDeexp = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 genBlock.add(aDeexp); RESULT=genBlock; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("BloqueGeneral",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // BloqueGeneral ::= BloqueGeneral SWhile 
            {
              ArrayList<Statement> RESULT =null;
		ArrayList<Statement> genBlock = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Statement aDeexp = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 genBlock.add(aDeexp); RESULT=genBlock; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("BloqueGeneral",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // BloqueGeneral ::= BloqueGeneral SSwitch 
            {
              ArrayList<Statement> RESULT =null;
		ArrayList<Statement> genBlock = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Statement aDeexp = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 genBlock.add(aDeexp); RESULT=genBlock; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("BloqueGeneral",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // BloqueGeneral ::= BloqueGeneral SBreak 
            {
              ArrayList<Statement> RESULT =null;
		ArrayList<Statement> genBlock = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Statement aDeexp = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 genBlock.add(aDeexp); RESULT=genBlock; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("BloqueGeneral",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // BloqueGeneral ::= BloqueGeneral SCallFun 
            {
              ArrayList<Statement> RESULT =null;
		ArrayList<Statement> genBlock = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Statement aDeexp = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 genBlock.add(aDeexp); RESULT=genBlock; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("BloqueGeneral",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // BloqueGeneral ::= 
            {
              ArrayList<Statement> RESULT =null;
		 RESULT=new ArrayList<Statement>(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("BloqueGeneral",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SStruct ::= STRUCT IDEN LLAP AtribStruct LLCIERRE 
            {
              Definicion RESULT =null;
		TokenValue name = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		ArrayList<ASTNode> atributos = (ArrayList<ASTNode>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=new Struct(name.lexema, new Bloque(atributos)); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SStruct",14, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // AtribStruct ::= AtribStruct SDec 
            {
              ArrayList<ASTNode> RESULT =null;
		ArrayList<ASTNode> bloqueatr = (ArrayList<ASTNode>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Statement dec = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 bloqueatr.add(dec); RESULT=bloqueatr; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("AtribStruct",2, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // AtribStruct ::= AtribStruct SDecFuncion 
            {
              ArrayList<ASTNode> RESULT =null;
		ArrayList<ASTNode> bloqueatr = (ArrayList<ASTNode>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Definicion dec = (Definicion)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 bloqueatr.add(dec); RESULT=bloqueatr; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("AtribStruct",2, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // AtribStruct ::= 
            {
              ArrayList<ASTNode> RESULT =null;
		 RESULT=new ArrayList<ASTNode>(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("AtribStruct",2, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SBreak ::= BREAK PTOCOMA 
            {
              Statement RESULT =null;
		 RESULT=new Break(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SBreak",11, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SIf ::= IF PAP SExp4 PCIERRE LLAP BloqueGeneral LLCIERRE SElsif 
            {
              Statement RESULT =null;
		E cond1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-5)).value;
		ArrayList<Statement> St = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		ArrayList<Elsif> arrayelsifs = (ArrayList<Elsif>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new IfElse(cond1, new BloqueIns(St), arrayelsifs); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SIf",8, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SIf ::= IF PAP SExp4 PCIERRE LLAP BloqueGeneral LLCIERRE SElsif ELSE LLAP BloqueGeneral LLCIERRE 
            {
              Statement RESULT =null;
		E cond2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-9)).value;
		ArrayList<Statement> St1 = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-6)).value;
		ArrayList<Elsif> arrayelsifs = (ArrayList<Elsif>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		ArrayList<Statement> St2 = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=new IfElse(cond2, new BloqueIns(St1), arrayelsifs, new BloqueIns(St2)); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SIf",8, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SElsif ::= SElsif ELSIF PAP SExp4 PCIERRE LLAP BloqueGeneral LLCIERRE 
            {
              ArrayList<Elsif> RESULT =null;
		ArrayList<Elsif> arrayelsifs = (ArrayList<Elsif>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-7)).value;
		E cond3 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		ArrayList<Statement> St3 = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 arrayelsifs.add(new Elsif(cond3, new BloqueIns(St3))); RESULT=arrayelsifs; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SElsif",33, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SElsif ::= 
            {
              ArrayList<Elsif> RESULT =null;
		 RESULT=new ArrayList<Elsif>(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SElsif",33, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SDec ::= Tipos IDEN PTOCOMA 
            {
              Statement RESULT =null;
		Tipo tipoAsig = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		TokenValue ident = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=new Dec(tipoAsig, ident.lexema); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SDec",6, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SDec ::= Tipos IDEN IGUAL SExp4 PTOCOMA 
            {
              Statement RESULT =null;
		Tipo tipoAsig = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		TokenValue ident = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		E expterm = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=new Dec(tipoAsig, ident.lexema, expterm); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SDec",6, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SAsign ::= IdenOps1 IGUAL SExp4 PTOCOMA 
            {
              Statement RESULT =null;
		E designador = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		E expterm = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=new Asign(designador, expterm); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SAsign",5, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SFor ::= FOR PAP SExp4 PTOCOMA SExp4 PCIERRE LLAP BloqueGeneral LLCIERRE 
            {
              Statement RESULT =null;
		E inicio = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-6)).value;
		E fin = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		ArrayList<Statement> statement = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=new For(inicio, fin, new BloqueIns(statement)); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SFor",12, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SFor ::= FOR PAP SExp4 PTOCOMA SExp4 PTOCOMA SExp4 PCIERRE LLAP BloqueGeneral LLCIERRE 
            {
              Statement RESULT =null;
		E inicio = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-8)).value;
		E fin = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-6)).value;
		E paso = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		ArrayList<Statement> statement = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=new For(inicio, fin, paso, new BloqueIns(statement)); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SFor",12, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SWhile ::= WHILE PAP SExp4 PCIERRE LLAP BloqueGeneral LLCIERRE 
            {
              Statement RESULT =null;
		E cond = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		ArrayList<Statement> instrucciones = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=new While(cond, new BloqueIns(instrucciones)); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SWhile",9, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SSwitch ::= SWITCH PAP SExp4 PCIERRE LLAP Cases LLCIERRE 
            {
              Statement RESULT =null;
		E exp = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		ArrayList<Case> cases = (ArrayList<Case>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=new Switch(exp, cases); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SSwitch",10, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SSwitch ::= SWITCH PAP SExp4 PCIERRE LLAP Cases Default LLCIERRE 
            {
              Statement RESULT =null;
		E exp = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-5)).value;
		ArrayList<Case> cases = (ArrayList<Case>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		DefaultCase defCase = (DefaultCase)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=new Switch(exp, cases, defCase); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SSwitch",10, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Cases ::= 
            {
              ArrayList<Case> RESULT =null;
		 RESULT=new ArrayList<Case>(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Cases",3, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Cases ::= Cases CASE ENT DOSPTOS BloqueGeneral 
            {
              ArrayList<Case> RESULT =null;
		ArrayList<Case> cases = (ArrayList<Case>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		TokenValue ent = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		ArrayList<Statement> bloqGen = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 cases.add(new Case(new Ent(ent.lexema), bloqGen)); RESULT=cases; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Cases",3, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Default ::= DEFAULT DOSPTOS BloqueGeneral 
            {
              DefaultCase RESULT =null;
		ArrayList<Statement> bloqGen = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new DefaultCase(bloqGen); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Default",18, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SDecFuncionInline ::= Tipos IDEN PAP SParams PCIERRE PTOCOMA 
            {
              Definicion RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-5)).value;
		TokenValue name = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		ArrayList<Parametro> params = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		 RESULT=new DecFuncion(tipo, name.lexema, params, null, null); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SDecFuncionInline",16, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SDecFuncionInline ::= TipoVoid IDEN PAP SParams PCIERRE PTOCOMA 
            {
              Definicion RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-5)).value;
		TokenValue name = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		ArrayList<Parametro> params = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		 RESULT=new DecFuncion(tipo, name.lexema, params, null, null); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SDecFuncionInline",16, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SDecFuncion ::= Tipos IDEN PAP SParams PCIERRE LLAP BloqueGeneral SReturn LLCIERRE 
            {
              Definicion RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-8)).value;
		TokenValue name = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-7)).value;
		ArrayList<Parametro> params = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-5)).value;
		ArrayList<Statement> block = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Return ret = (Return)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=new DecFuncion(tipo, name.lexema, params, new BloqueIns(block), ret); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SDecFuncion",15, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SDecFuncion ::= TipoVoid IDEN PAP SParams PCIERRE LLAP BloqueGeneral LLCIERRE 
            {
              Definicion RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-7)).value;
		TokenValue name = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-6)).value;
		ArrayList<Parametro> params = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		ArrayList<Statement> block = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=new DecFuncion(tipo, name.lexema, params, new BloqueIns(block), null); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SDecFuncion",15, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SDecArray ::= Tipos IDEN Dims PTOCOMA 
            {
              Statement RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		TokenValue iden = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		ArrayList<E> dims = (ArrayList<E>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=new DecArray(tipo, iden.lexema, dims); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SDecArray",7, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Dims ::= Dims CAP SExp4 CCIERRE 
            {
              ArrayList<E> RESULT =null;
		ArrayList<E> dims = (ArrayList<E>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		E tam = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 dims.add(tam); RESULT=dims; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Dims",17, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Dims ::= CAP SExp4 CCIERRE 
            {
              ArrayList<E> RESULT =null;
		E tam = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=new ArrayList<E>(Arrays.asList(tam)); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Dims",17, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SReturn ::= RETURN SExp4 PTOCOMA 
            {
              Return RESULT =null;
		E expresion = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=new Return(expresion); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SReturn",4, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SCallFun ::= PRINT PAP SExp4 PCIERRE PTOCOMA 
            {
              Statement RESULT =null;
		E expresion = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		 RESULT=new Print(expresion, false); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SCallFun",13, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SCallFun ::= PRINTLN PAP SExp4 PCIERRE PTOCOMA 
            {
              Statement RESULT =null;
		E expresion = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		 RESULT=new Print(expresion, true); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SCallFun",13, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SCallFun ::= INPUT PAP IDEN PCIERRE PTOCOMA 
            {
              Statement RESULT =null;
		TokenValue expresion = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		 RESULT=new Input(new Ident(expresion.lexema)); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SCallFun",13, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SCallFun ::= MEMSPACE PAP SExp4 PCIERRE PTOCOMA 
            {
              Statement RESULT =null;
		E arg1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		 RESULT=new Memspace(arg1); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SCallFun",13, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SCallFun ::= FREE PAP IDEN PCIERRE PTOCOMA 
            {
              Statement RESULT =null;
		TokenValue arg1 = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		 RESULT=new Free(new Ident(arg1.lexema)); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SCallFun",13, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SCallFun ::= CallFun PTOCOMA 
            {
              Statement RESULT =null;
		E llamada = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=llamada; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SCallFun",13, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CallFun ::= IDEN PAP SParExp PCIERRE 
            {
              E RESULT =null;
		TokenValue ident = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		ArrayList<E> parexp = (ArrayList<E>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=new LlamadaFuncion(ident.lexema, parexp); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("CallFun",25, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SParExp ::= SParExp1 
            {
              ArrayList<E> RESULT =null;
		ArrayList<E> sparexp1 = (ArrayList<E>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=sparexp1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SParExp",36, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SParExp ::= 
            {
              ArrayList<E> RESULT =null;
		 RESULT=new ArrayList<E>(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SParExp",36, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SParExp1 ::= SParExp1 COMA SExp4 
            {
              ArrayList<E> RESULT =null;
		ArrayList<E> parlist = (ArrayList<E>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E expr = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 parlist.add(expr); RESULT=parlist; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SParExp1",37, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SParExp1 ::= SExp4 
            {
              ArrayList<E> RESULT =null;
		E expr = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new ArrayList<E>(Arrays.asList(expr)); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SParExp1",37, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SParams ::= SParamsNoVacio 
            {
              ArrayList<Parametro> RESULT =null;
		ArrayList<Parametro> params = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=params; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SParams",34, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SParams ::= 
            {
              ArrayList<Parametro> RESULT =null;
		 RESULT=new ArrayList<Parametro>(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SParams",34, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SParamsNoVacio ::= SParamsNoVacio COMA Tipos OPREF IDEN 
            {
              ArrayList<Parametro> RESULT =null;
		ArrayList<Parametro> params = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		TokenValue name = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 params.add(new Parametro(tipo, true, name.lexema)); RESULT=params; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SParamsNoVacio",35, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SParamsNoVacio ::= SParamsNoVacio COMA Tipos IDEN 
            {
              ArrayList<Parametro> RESULT =null;
		ArrayList<Parametro> params = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		TokenValue name = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 params.add(new Parametro(tipo, false, name.lexema)); RESULT=params; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SParamsNoVacio",35, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // SParamsNoVacio ::= Tipos OPREF IDEN 
            {
              ArrayList<Parametro> RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		TokenValue name = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new ArrayList<Parametro>(Arrays.asList(new Parametro(tipo, true, name.lexema))); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SParamsNoVacio",35, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SParamsNoVacio ::= Tipos IDEN 
            {
              ArrayList<Parametro> RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		TokenValue name = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new ArrayList<Parametro>(Arrays.asList(new Parametro(tipo, false, name.lexema))); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SParamsNoVacio",35, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // SExp4 ::= SExp3 IGDOBLE SExp3 
            {
              E RESULT =null;
		E expterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E expterm2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new EBin(expterm1, expterm2,KindE.ID); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp4",19, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // SExp4 ::= SExp3 DISTINTO SExp3 
            {
              E RESULT =null;
		E expterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E expterm2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new EBin(expterm1, expterm2,KindE.DISTINTO); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp4",19, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // SExp4 ::= SExp3 
            {
              E RESULT =null;
		E expterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=expterm1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp4",19, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // SExp3 ::= SExp2 MENOR SExp2 
            {
              E RESULT =null;
		E expterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E expterm2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new EBin(expterm1, expterm2,KindE.MENOR); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp3",20, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // SExp3 ::= SExp2 MAYOR SExp2 
            {
              E RESULT =null;
		E expterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E expterm2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new EBin(expterm1, expterm2,KindE.MAYOR); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp3",20, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // SExp3 ::= SExp2 MENIGUAL SExp2 
            {
              E RESULT =null;
		E expterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E expterm2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new EBin(expterm1, expterm2,KindE.MENIGUAL); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp3",20, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // SExp3 ::= SExp2 MAYIGUAL SExp2 
            {
              E RESULT =null;
		E expterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E expterm2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new EBin(expterm1, expterm2,KindE.MAYIGUAL); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp3",20, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // SExp3 ::= SExp2 
            {
              E RESULT =null;
		E expterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=expterm1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp3",20, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SExp2 ::= SExp2 OR SExp1 
            {
              E RESULT =null;
		E expterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E expterm2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new EBin(expterm1, expterm2, KindE.OR); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp2",21, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // SExp2 ::= SExp2 MAS SExp1 
            {
              E RESULT =null;
		E floatexp1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E expterm = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(floatexp1,expterm,KindE.SUMA); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp2",21, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // SExp2 ::= SExp2 MENOS SExp1 
            {
              E RESULT =null;
		E floatexp1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E expterm = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(floatexp1,expterm,KindE.RESTA); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp2",21, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // SExp2 ::= SExp1 
            {
              E RESULT =null;
		E expterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=expterm1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp2",21, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // SExp1 ::= SExp1 AND SExp0 
            {
              E RESULT =null;
		E expterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E expterm2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new EBin(expterm1, expterm2, KindE.AND); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp1",22, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // SExp1 ::= SExp1 POR SExp0 
            {
              E RESULT =null;
		E expterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E expfact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(expterm1,expfact, KindE.MUL); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp1",22, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // SExp1 ::= SExp1 DIV SExp0 
            {
              E RESULT =null;
		E expterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E expfact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(expterm1,expfact, KindE.DIV); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp1",22, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // SExp1 ::= SExp1 MOD SExp0 
            {
              E RESULT =null;
		E aDeterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E aDefact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(aDeterm1,aDefact, KindE.MOD); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp1",22, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // SExp1 ::= SExp0 
            {
              E RESULT =null;
		E expterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=expterm1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp1",22, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // SExp0 ::= Exp POT SExp0 
            {
              E RESULT =null;
		E expfact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E expterm2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(expfact,expterm2, KindE.POT); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp0",23, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // SExp0 ::= NOT SExp0 
            {
              E RESULT =null;
		E boolVal = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new EUnar(boolVal, KindE.NOT); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp0",23, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // SExp0 ::= Exp 
            {
              E RESULT =null;
		E expterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=expterm1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp0",23, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Exp ::= ENT 
            {
              E RESULT =null;
		TokenValue numEnt = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new Ent(numEnt.lexema); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp",24, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Exp ::= MENOS ENT 
            {
              E RESULT =null;
		TokenValue numEnt = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new Ent("-" + numEnt.lexema); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp",24, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Exp ::= REAL 
            {
              E RESULT =null;
		TokenValue numReal = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new Real(numReal.lexema); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp",24, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Exp ::= MENOS REAL 
            {
              E RESULT =null;
		TokenValue numReal = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new Real("-" + numReal.lexema); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp",24, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Exp ::= TRUE 
            {
              E RESULT =null;
		Object trueterm = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new True(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp",24, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Exp ::= FALSE 
            {
              E RESULT =null;
		Object falseterm = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new False(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp",24, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Exp ::= IdenOps1 
            {
              E RESULT =null;
		E idenops = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=idenops; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp",24, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Exp ::= CallFun 
            {
              E RESULT =null;
		E callfun = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=callfun; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp",24, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // IdenOps1 ::= POR IdenOps1 
            {
              E RESULT =null;
		E idenOps = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		RESULT = new EUnar(idenOps, KindE.ASTERISCO); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("IdenOps1",28, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // IdenOps1 ::= IdenOps0 
            {
              E RESULT =null;
		E idenOps = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = idenOps; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("IdenOps1",28, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // IdenOps0 ::= IdenOps0 PUNTO IdenOps 
            {
              E RESULT =null;
		E idenOps0 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E idenOps = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new EBin(idenOps0, idenOps, KindE.PUNTO); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("IdenOps0",27, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // IdenOps0 ::= IdenOps0 FLECHA IdenOps 
            {
              E RESULT =null;
		E idenOps0 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E idenOps = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new EBin(idenOps0, idenOps, KindE.FLECHA); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("IdenOps0",27, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // IdenOps0 ::= IdenOps0 CAP SExp4 CCIERRE 
            {
              E RESULT =null;
		E idenOps0 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		E exp = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = new EBin(idenOps0, exp, KindE.CORCHETES); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("IdenOps0",27, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // IdenOps0 ::= IdenOps 
            {
              E RESULT =null;
		E idenOps = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = idenOps; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("IdenOps0",27, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // IdenOps ::= PAP SExp4 PCIERRE 
            {
              E RESULT =null;
		E idenOps = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = idenOps; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("IdenOps",26, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // IdenOps ::= IDEN 
            {
              E RESULT =null;
		TokenValue iden = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT =  new Ident(iden.lexema); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("IdenOps",26, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // TipoVoid ::= TipoVoid POR 
            {
              Tipo RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=new Puntero(tipo); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("TipoVoid",32, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // TipoVoid ::= VOID 
            {
              Tipo RESULT =null;
		 RESULT= new Tipo(TipoEnum.VOID); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("TipoVoid",32, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Tipos ::= TipoBas 
            {
              Tipo RESULT =null;
		Tipo tipobas = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=tipobas; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Tipos",31, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Tipos ::= TipoStruct 
            {
              Tipo RESULT =null;
		Tipo tipostruct = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=tipostruct; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Tipos",31, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // TipoBas ::= TipoBas POR 
            {
              Tipo RESULT =null;
		Tipo tipobas = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=new Puntero(tipobas); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("TipoBas",29, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // TipoBas ::= BOOL 
            {
              Tipo RESULT =null;
		 RESULT=new Tipo(TipoEnum.BOOL); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("TipoBas",29, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // TipoBas ::= INT 
            {
              Tipo RESULT =null;
		 RESULT=new Tipo(TipoEnum.INT); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("TipoBas",29, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // TipoBas ::= FLOAT 
            {
              Tipo RESULT =null;
		 RESULT=new Tipo(TipoEnum.FLOAT); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("TipoBas",29, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // TipoStruct ::= TipoStruct POR 
            {
              Tipo RESULT =null;
		Tipo ident = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=new Puntero(ident); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("TipoStruct",30, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // TipoStruct ::= IDEN 
            {
              Tipo RESULT =null;
		TokenValue ident = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new TipoStruct(ident.lexema); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("TipoStruct",30, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ConstructorASTExp$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ConstructorASTExp$do_action(
    int                        CUP$ConstructorASTExp$act_num,
    java_cup.runtime.lr_parser CUP$ConstructorASTExp$parser,
    java.util.Stack            CUP$ConstructorASTExp$stack,
    int                        CUP$ConstructorASTExp$top)
    throws java.lang.Exception
    {
              return CUP$ConstructorASTExp$do_action_part00000000(
                               CUP$ConstructorASTExp$act_num,
                               CUP$ConstructorASTExp$parser,
                               CUP$ConstructorASTExp$stack,
                               CUP$ConstructorASTExp$top);
    }
}

