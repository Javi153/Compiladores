 package asint;

import java_cup.runtime.*;
import alex.AnalizadorLexicoTiny;
import alex.UnidadLexica;
import errors.GestionErroresTiny;

scan with {: return getScanner().next_token(); :};
parser code {:
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }
:};
init with {:
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);
:};


terminal     DONDE, EVALUA, IDEN, ENT, REAL, MAS,
             MENOS, POR, DIV, IGUAL, COMA, PAP, PCIERRE,
             WHILE, FOR, VOID;

non terminal  S, Ds, LDs, D, E0, E1, E2, OP0, OP1;

S	::= GLOBVAR | STRUCT | FUNDER | MAIN | S ;
MAIN	::= INT MAIN PAP ARGS PCIERRE LLAP M LLCIERRE | VOID MAIN PAP ARGS PCIERRE LLAP M 			LLCIERRE ;
M   	::= INST | M ;
INST	::= DEC | ASIG | IFST | SWITCHST | WHILEST | FORST | PTOCOMA | BLOCK ;
IFST	::= IF PAP COND PCIERRE BLOCK ELIF | IF PAP COND PCIERRE BLOCK ELIF ELSE BLOCK
ELIF	::= ELSIF PAP COND PCIERRE BLOCK ELIF | ;
BLOCK	::= INST | LLAP BLCONTENT LLCIERRE ;
BLCONTENT ::= INST BLCONTENT | ;
WHILEST	::= WHILE PAP COND PCIERRE BLOCK ;
FORST	::= FOR PAP INT IDEN IGUAL EXP PTOCOMA EXP PCIERRE BLOCK | FOR PAP IDEN IGUAL EXP PTOCOMA EXP PCIERRE BLOCK | FOR PAP INT IDEN IGUAL EXP PTOCOMA EXP PTOCOMA EXP PCIERRE BLOCK | FOR PAP IDEN IGUAL EXP PTOCOMA EXP PTOCOMA EXP PCIERRE BLOCK ;
SWITCHST ::= SWITCH PAP IDEN PCIERRE LLAP CASELST LLCIERRE ;
CASELST	::= CASE EXP DOSPTOS BLOCK CASELST | CASE EXP DOSPTOS BLOCK BREAK DOSPTOS CASELST | DEFAULT DOSPTOS BLOCK | DEFAULT DOSPTOS BLOCK BREAK | ;
ASIG	::= IDEN IGUAL EXP PTOCOMA ;
DEC	::= IDEN IDEN PTOCOMA | IDEN IDEN IGUAL EXP PTOCOMA ;
Ds  	::= DONDE LDs | ;
LDs 	::= LDs COMA D | D ;
D   	::= IDEN IGUAL E0 ;
E0  	::= E0 OP0 E1  | E1 ;
E1  	::= E1 OP1 E2  | E2 ;
E2  	::= ENT  | REAL  | IDEN  | PAP E0 PCIERRE ;
OP0 	::= MAS  | MENOS ;
OP1 	::= POR | DIV ;



