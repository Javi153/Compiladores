package asint;

import java_cup.runtime.*;
import sajax_lex.AnalizadorLexicoSajax;
import sajax_lex.UnidadLexica;
import errors.GestionErroresTiny;

scan with {: return getScanner().next_token(); :};
parser code {:
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }
:};
init with {:
   errores = new GestionErroresTiny();
   AnalizadorLexicoSajax sajax = (AnalizadorLexicoSajax)getScanner();
   sajax.fijaGestionErrores(errores);
:};


terminal     IDEN, OR, AND, NOT,
             MAS, MENOS, POR, DIV, POT, MOD,
             IGDOBLE, DISTINTO, MENOR, MAYOR, MENIGUAL, MAYIGUAL,
             IGUAL, COMA, PAP, PCIERRE, WHILE, FOR, VOID, RETURN,
             STRUCT, LLAP, LLCIERRE, PTOCOMA, IF, ELSIF, ELSE,
	     SWITCH, CASE, DEFAULT, BREAK, DOSPTOS, INT, FLOAT, 
	     BOOL, PRINT, PRINTLN, INPUT, MAIN, MEMSPACE, FREE, BB;

non terminal  S, E0, E1, E2, E3, E4, E5, OP0, OP1, OP2, OP3, B0, B1, B2, B3, B4,
              MAINST, M, INST, IFST, ELIF, BLOCK, WHILEST, FORST, SWITCHST, CASELST, ASIG, DEC,
              GLOBVAR, STRUCTST, FUNDER, ATRIBS, METODOS, PARAMS, ARGS, EXP, COND, BLCONTENT;

S ::= IDEN;



