
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Fri Mar 24 19:03:07 CET 2023
//----------------------------------------------------

package constructorast;

import java_cup.runtime.*;
import sajax_lex.AnalizadorLexicoSajax;
import sajax_lex.UnidadLexica;
import sajax_lex.TokenValue;
import errors.GestionErroresTiny;
import ast.*;
import java.util.ArrayList;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Fri Mar 24 19:03:07 CET 2023
  */
public class ConstructorASTExp extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ConstructorASTExp() {super();}

  /** Constructor which sets the default scanner. */
  public ConstructorASTExp(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ConstructorASTExp(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\063\000\002\002\003\000\002\002\004\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\002\003\000\002\002\003\000" +
    "\002\011\005\000\002\012\005\000\002\010\004\000\002" +
    "\006\012\000\002\006\016\000\002\022\012\000\002\022" +
    "\002\000\002\005\007\000\002\005\007\000\002\005\007" +
    "\000\002\004\005\000\002\003\007\000\002\007\011\000" +
    "\002\013\005\000\002\013\005\000\002\013\003\000\002" +
    "\014\005\000\002\014\005\000\002\014\005\000\002\014" +
    "\005\000\002\014\003\000\002\015\005\000\002\015\005" +
    "\000\002\015\005\000\002\015\003\000\002\016\005\000" +
    "\002\016\005\000\002\016\005\000\002\016\005\000\002" +
    "\016\003\000\002\017\005\000\002\017\004\000\002\017" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\020\005\000" +
    "\002\021\003\000\002\021\003\000\002\021\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\161\000\030\027\011\037\015\045\022\047\023\050" +
    "\025\051\010\052\017\053\026\054\024\055\020\056\004" +
    "\001\002\000\004\025\160\001\002\000\006\002\001\035" +
    "\001\001\002\000\006\002\ufffa\035\ufffa\001\002\000\006" +
    "\002\ufffe\035\ufffe\001\002\000\004\070\uffd0\001\002\000" +
    "\004\025\152\001\002\000\004\002\151\001\002\000\006" +
    "\002\uffff\035\uffff\001\002\000\006\002\ufffb\035\ufffb\001" +
    "\002\000\004\025\126\001\002\000\004\070\121\001\002" +
    "\000\004\070\uffcf\001\002\000\004\025\115\001\002\000" +
    "\006\002\ufffd\035\ufffd\001\002\000\004\036\114\001\002" +
    "\000\020\006\045\025\032\064\033\065\036\066\031\067" +
    "\041\070\034\001\002\000\004\025\106\001\002\000\020" +
    "\006\045\025\032\064\033\065\036\066\031\067\041\070" +
    "\034\001\002\000\004\070\uffd1\001\002\000\006\002\ufffc" +
    "\035\ufffc\001\002\000\006\002\ufff9\035\ufff9\001\002\000" +
    "\042\004\uffd7\005\uffd7\007\uffd7\010\uffd7\011\uffd7\012\uffd7" +
    "\013\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7\021" +
    "\uffd7\022\uffd7\026\uffd7\036\uffd7\001\002\000\020\006\045" +
    "\025\032\064\033\065\036\066\031\067\041\070\034\001" +
    "\002\000\042\004\uffd5\005\uffd5\007\uffd5\010\uffd5\011\uffd5" +
    "\012\uffd5\013\uffd5\014\uffd5\015\uffd5\016\uffd5\017\uffd5\020" +
    "\uffd5\021\uffd5\022\uffd5\026\uffd5\036\uffd5\001\002\000\042" +
    "\004\uffd3\005\uffd3\007\uffd3\010\uffd3\011\uffd3\012\uffd3\013" +
    "\uffd3\014\uffd3\015\uffd3\016\uffd3\017\uffd3\020\uffd3\021\uffd3" +
    "\022\uffd3\026\uffd3\036\uffd3\001\002\000\042\004\uffd8\005" +
    "\uffd8\007\uffd8\010\uffd8\011\uffd8\012\uffd8\013\102\014\uffd8" +
    "\015\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8\026" +
    "\uffd8\036\uffd8\001\002\000\042\004\uffd4\005\uffd4\007\uffd4" +
    "\010\uffd4\011\uffd4\012\uffd4\013\uffd4\014\uffd4\015\uffd4\016" +
    "\uffd4\017\uffd4\020\uffd4\021\uffd4\022\uffd4\026\uffd4\036\uffd4" +
    "\001\002\000\004\036\101\001\002\000\012\015\075\016" +
    "\076\026\uffe9\036\uffe9\001\002\000\042\004\uffd6\005\uffd6" +
    "\007\uffd6\010\uffd6\011\uffd6\012\uffd6\013\uffd6\014\uffd6\015" +
    "\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6\022\uffd6\026\uffd6" +
    "\036\uffd6\001\002\000\030\004\065\007\057\010\061\015" +
    "\uffe4\016\uffe4\017\063\020\064\021\062\022\060\026\uffe4" +
    "\036\uffe4\001\002\000\040\004\uffe0\005\050\007\uffe0\010" +
    "\uffe0\011\052\012\051\014\047\015\uffe0\016\uffe0\017\uffe0" +
    "\020\uffe0\021\uffe0\022\uffe0\026\uffe0\036\uffe0\001\002\000" +
    "\040\004\uffdb\005\uffdb\007\uffdb\010\uffdb\011\uffdb\012\uffdb" +
    "\014\uffdb\015\uffdb\016\uffdb\017\uffdb\020\uffdb\021\uffdb\022" +
    "\uffdb\026\uffdb\036\uffdb\001\002\000\020\006\045\025\032" +
    "\064\033\065\036\066\031\067\041\070\034\001\002\000" +
    "\040\004\uffd9\005\uffd9\007\uffd9\010\uffd9\011\uffd9\012\uffd9" +
    "\014\uffd9\015\uffd9\016\uffd9\017\uffd9\020\uffd9\021\uffd9\022" +
    "\uffd9\026\uffd9\036\uffd9\001\002\000\020\006\045\025\032" +
    "\064\033\065\036\066\031\067\041\070\034\001\002\000" +
    "\020\006\045\025\032\064\033\065\036\066\031\067\041" +
    "\070\034\001\002\000\020\006\045\025\032\064\033\065" +
    "\036\066\031\067\041\070\034\001\002\000\020\006\045" +
    "\025\032\064\033\065\036\066\031\067\041\070\034\001" +
    "\002\000\040\004\uffde\005\uffde\007\uffde\010\uffde\011\uffde" +
    "\012\uffde\014\uffde\015\uffde\016\uffde\017\uffde\020\uffde\021" +
    "\uffde\022\uffde\026\uffde\036\uffde\001\002\000\040\004\uffdd" +
    "\005\uffdd\007\uffdd\010\uffdd\011\uffdd\012\uffdd\014\uffdd\015" +
    "\uffdd\016\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd\026\uffdd" +
    "\036\uffdd\001\002\000\040\004\uffdf\005\uffdf\007\uffdf\010" +
    "\uffdf\011\uffdf\012\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf" +
    "\020\uffdf\021\uffdf\022\uffdf\026\uffdf\036\uffdf\001\002\000" +
    "\040\004\uffdc\005\uffdc\007\uffdc\010\uffdc\011\uffdc\012\uffdc" +
    "\014\uffdc\015\uffdc\016\uffdc\017\uffdc\020\uffdc\021\uffdc\022" +
    "\uffdc\026\uffdc\036\uffdc\001\002\000\020\006\045\025\032" +
    "\064\033\065\036\066\031\067\041\070\034\001\002\000" +
    "\020\006\045\025\032\064\033\065\036\066\031\067\041" +
    "\070\034\001\002\000\020\006\045\025\032\064\033\065" +
    "\036\066\031\067\041\070\034\001\002\000\020\006\045" +
    "\025\032\064\033\065\036\066\031\067\041\070\034\001" +
    "\002\000\020\006\045\025\032\064\033\065\036\066\031" +
    "\067\041\070\034\001\002\000\020\006\045\025\032\064" +
    "\033\065\036\066\031\067\041\070\034\001\002\000\020" +
    "\006\045\025\032\064\033\065\036\066\031\067\041\070" +
    "\034\001\002\000\040\004\uffe3\005\050\007\uffe3\010\uffe3" +
    "\011\052\012\051\014\047\015\uffe3\016\uffe3\017\uffe3\020" +
    "\uffe3\021\uffe3\022\uffe3\026\uffe3\036\uffe3\001\002\000\020" +
    "\004\065\007\057\010\061\015\uffe7\016\uffe7\026\uffe7\036" +
    "\uffe7\001\002\000\020\004\065\007\057\010\061\015\uffe8" +
    "\016\uffe8\026\uffe8\036\uffe8\001\002\000\020\004\065\007" +
    "\057\010\061\015\uffe6\016\uffe6\026\uffe6\036\uffe6\001\002" +
    "\000\040\004\uffe1\005\050\007\uffe1\010\uffe1\011\052\012" +
    "\051\014\047\015\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1" +
    "\022\uffe1\026\uffe1\036\uffe1\001\002\000\020\004\065\007" +
    "\057\010\061\015\uffe5\016\uffe5\026\uffe5\036\uffe5\001\002" +
    "\000\040\004\uffe2\005\050\007\uffe2\010\uffe2\011\052\012" +
    "\051\014\047\015\uffe2\016\uffe2\017\uffe2\020\uffe2\021\uffe2" +
    "\022\uffe2\026\uffe2\036\uffe2\001\002\000\020\006\045\025" +
    "\032\064\033\065\036\066\031\067\041\070\034\001\002" +
    "\000\020\006\045\025\032\064\033\065\036\066\031\067" +
    "\041\070\034\001\002\000\006\026\uffea\036\uffea\001\002" +
    "\000\006\026\uffeb\036\uffeb\001\002\000\006\002\ufff7\035" +
    "\ufff7\001\002\000\020\006\045\025\032\064\033\065\036" +
    "\066\031\067\041\070\034\001\002\000\040\004\uffda\005" +
    "\uffda\007\uffda\010\uffda\011\uffda\012\uffda\014\uffda\015\uffda" +
    "\016\uffda\017\uffda\020\uffda\021\uffda\022\uffda\026\uffda\036" +
    "\uffda\001\002\000\004\026\105\001\002\000\042\004\uffd2" +
    "\005\uffd2\007\uffd2\010\uffd2\011\uffd2\012\uffd2\013\uffd2\014" +
    "\uffd2\015\uffd2\016\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2" +
    "\026\uffd2\036\uffd2\001\002\000\020\006\045\025\032\064" +
    "\033\065\036\066\031\067\041\070\034\001\002\000\004" +
    "\026\110\001\002\000\004\036\111\001\002\000\006\002" +
    "\ufff1\035\ufff1\001\002\000\004\036\113\001\002\000\006" +
    "\002\ufff8\035\ufff8\001\002\000\006\002\ufff6\035\ufff6\001" +
    "\002\000\020\006\045\025\032\064\033\065\036\066\031" +
    "\067\041\070\034\001\002\000\004\026\117\001\002\000" +
    "\004\036\120\001\002\000\006\002\ufff0\035\ufff0\001\002" +
    "\000\006\023\123\036\122\001\002\000\006\002\uffee\035" +
    "\uffee\001\002\000\020\006\045\025\032\064\033\065\036" +
    "\066\031\067\041\070\034\001\002\000\004\036\125\001" +
    "\002\000\006\002\uffed\035\uffed\001\002\000\020\006\045" +
    "\025\032\064\033\065\036\066\031\067\041\070\034\001" +
    "\002\000\004\026\130\001\002\000\004\034\131\001\002" +
    "\000\030\027\011\037\015\045\022\047\023\050\025\051" +
    "\010\052\017\053\026\054\024\055\020\056\004\001\002" +
    "\000\004\035\133\001\002\000\012\002\ufff2\035\ufff2\040" +
    "\134\041\ufff2\001\002\000\004\025\142\001\002\000\010" +
    "\002\ufff5\035\ufff5\041\136\001\002\000\004\034\137\001" +
    "\002\000\030\027\011\037\015\045\022\047\023\050\025" +
    "\051\010\052\017\053\026\054\024\055\020\056\004\001" +
    "\002\000\004\035\141\001\002\000\006\002\ufff4\035\ufff4" +
    "\001\002\000\020\006\045\025\032\064\033\065\036\066" +
    "\031\067\041\070\034\001\002\000\004\026\144\001\002" +
    "\000\004\034\145\001\002\000\030\027\011\037\015\045" +
    "\022\047\023\050\025\051\010\052\017\053\026\054\024" +
    "\055\020\056\004\001\002\000\004\035\147\001\002\000" +
    "\012\002\ufff2\035\ufff2\040\134\041\ufff2\001\002\000\010" +
    "\002\ufff3\035\ufff3\041\ufff3\001\002\000\004\002\000\001" +
    "\002\000\020\006\045\025\032\064\033\065\036\066\031" +
    "\067\041\070\034\001\002\000\004\026\154\001\002\000" +
    "\004\034\155\001\002\000\030\027\011\037\015\045\022" +
    "\047\023\050\025\051\010\052\017\053\026\054\024\055" +
    "\020\056\004\001\002\000\004\035\157\001\002\000\006" +
    "\002\uffec\035\uffec\001\002\000\020\006\045\025\032\064" +
    "\033\065\036\066\031\067\041\070\034\001\002\000\004" +
    "\026\162\001\002\000\004\036\163\001\002\000\006\002" +
    "\uffef\035\uffef\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\161\000\026\002\011\003\004\004\012\005\006\006" +
    "\020\007\026\010\013\011\005\012\027\021\015\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\013\111\014" +
    "\037\015\041\016\042\017\043\020\034\001\001\000\002" +
    "\001\001\000\016\013\036\014\037\015\041\016\042\017" +
    "\043\020\034\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\013\103\014" +
    "\037\015\041\016\042\017\043\020\034\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\017\045\020\034\001\001\000\002\001\001\000\006" +
    "\017\055\020\034\001\001\000\006\017\054\020\034\001" +
    "\001\000\006\017\053\020\034\001\001\000\006\017\052" +
    "\020\034\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\016\073\017\043" +
    "\020\034\001\001\000\012\015\072\016\042\017\043\020" +
    "\034\001\001\000\010\016\071\017\043\020\034\001\001" +
    "\000\012\015\070\016\042\017\043\020\034\001\001\000" +
    "\012\015\067\016\042\017\043\020\034\001\001\000\012" +
    "\015\066\016\042\017\043\020\034\001\001\000\010\016" +
    "\065\017\043\020\034\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\014\077" +
    "\015\041\016\042\017\043\020\034\001\001\000\014\014" +
    "\076\015\041\016\042\017\043\020\034\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\017" +
    "\102\020\034\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\013\106\014\037\015\041\016" +
    "\042\017\043\020\034\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\013\115\014\037\015\041" +
    "\016\042\017\043\020\034\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\013\123\014\037\015\041\016\042\017" +
    "\043\020\034\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\013\126\014\037\015\041\016\042\017\043\020" +
    "\034\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\002\131\003\004\004\012\005\006\006\020\007\026\010" +
    "\013\011\005\012\027\021\015\001\001\000\002\001\001" +
    "\000\004\022\134\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\002\137\003\004\004\012" +
    "\005\006\006\020\007\026\010\013\011\005\012\027\021" +
    "\015\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\013\142\014\037\015\041\016\042\017\043\020\034\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\002\145" +
    "\003\004\004\012\005\006\006\020\007\026\010\013\011" +
    "\005\012\027\021\015\001\001\000\002\001\001\000\004" +
    "\022\147\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\013\152\014\037\015\041\016\042\017\043\020\034" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\002" +
    "\155\003\004\004\012\005\006\006\020\007\026\010\013" +
    "\011\005\012\027\021\015\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\013\160\014\037\015\041\016\042" +
    "\017\043\020\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ConstructorASTExp$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ConstructorASTExp$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ConstructorASTExp$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny();
   AnalizadorLexicoSajax sajax = (AnalizadorLexicoSajax)getScanner();
   sajax.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ConstructorASTExp$actions {
  private final ConstructorASTExp parser;

  /** Constructor */
  CUP$ConstructorASTExp$actions(ConstructorASTExp parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ConstructorASTExp$do_action_part00000000(
    int                        CUP$ConstructorASTExp$act_num,
    java_cup.runtime.lr_parser CUP$ConstructorASTExp$parser,
    java.util.Stack            CUP$ConstructorASTExp$stack,
    int                        CUP$ConstructorASTExp$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ConstructorASTExp$result;

      /* select the action based on the action number */
      switch (CUP$ConstructorASTExp$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= SAsign 
            {
              Statement RESULT =null;
		Statement aDeexp = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=aDeexp; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("S",0, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		Statement start_val = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		RESULT = start_val;
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$ConstructorASTExp$parser.done_parsing();
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= SDec 
            {
              Statement RESULT =null;
		Statement aDeexp = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=aDeexp; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("S",0, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // S ::= SIO 
            {
              Statement RESULT =null;
		Statement aDeexp = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=aDeexp; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("S",0, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // S ::= SIf 
            {
              Statement RESULT =null;
		Statement aDeexp = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=aDeexp; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("S",0, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // S ::= SWhile 
            {
              Statement RESULT =null;
		Statement aDeexp = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=aDeexp; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("S",0, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // S ::= SBreak 
            {
              Statement RESULT =null;
		Statement aDeexp = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=aDeexp; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("S",0, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // S ::= SMemspace 
            {
              Statement RESULT =null;
		Statement aDeexp = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=aDeexp; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("S",0, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // S ::= SFree 
            {
              Statement RESULT =null;
		Statement aDeexp = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=aDeexp; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("S",0, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SMemspace ::= MEMSPACE SExp4 PTOCOMA 
            {
              Statement RESULT =null;
		E arg1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=new Memspace(arg1); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SMemspace",7, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SFree ::= FREE SExp4 PTOCOMA 
            {
              Statement RESULT =null;
		E arg1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=new Free(arg1); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SFree",8, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SBreak ::= BREAK PTOCOMA 
            {
              Statement RESULT =null;
		 RESULT=new Break(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SBreak",6, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SIf ::= IF PAP SExp4 PCIERRE LLAP S LLCIERRE SElsif 
            {
              Statement RESULT =null;
		E cond1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-5)).value;
		Statement St = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		ArrayList<Elsif> arrayelsifs = (ArrayList<Elsif>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new IfElse(cond1, St, arrayelsifs); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SIf",4, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SIf ::= IF PAP SExp4 PCIERRE LLAP S LLCIERRE SElsif ELSE LLAP S LLCIERRE 
            {
              Statement RESULT =null;
		E cond2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-9)).value;
		Statement St1 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-6)).value;
		ArrayList<Elsif> arrayelsifs = (ArrayList<Elsif>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		Statement St2 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=new IfElse(cond2, St1, arrayelsifs, St2); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SIf",4, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SElsif ::= ELSIF PAP SExp4 PCIERRE LLAP S LLCIERRE SElsif 
            {
              ArrayList<Elsif> RESULT =null;
		E cond3 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-5)).value;
		Statement St3 = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		ArrayList<Elsif> arrayelsifs = (ArrayList<Elsif>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 arrayelsifs.add(new Elsif(cond3, St3)); RESULT=arrayelsifs; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SElsif",16, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SElsif ::= 
            {
              ArrayList<Elsif> RESULT =null;
		 RESULT=new ArrayList<Elsif>(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SElsif",16, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SIO ::= PRINT PAP SExp4 PCIERRE PTOCOMA 
            {
              Statement RESULT =null;
		E expresion = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		 RESULT=new Print(expresion, false); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SIO",3, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SIO ::= PRINTLN PAP SExp4 PCIERRE PTOCOMA 
            {
              Statement RESULT =null;
		E expresion = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		 RESULT=new Print(expresion, true); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SIO",3, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SIO ::= INPUT PAP SExp4 PCIERRE PTOCOMA 
            {
              Statement RESULT =null;
		E expresion = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		 RESULT=new Input(expresion); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SIO",3, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SDec ::= Tipo IDEN PTOCOMA 
            {
              Statement RESULT =null;
		TipoEnum tipoAsig = (TipoEnum)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		TokenValue ident = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=new Dec(tipoAsig, ident.lexema); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SDec",2, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SAsign ::= Tipo IDEN IGUAL SExp4 PTOCOMA 
            {
              Statement RESULT =null;
		TipoEnum tipoAsig = (TipoEnum)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		TokenValue ident = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		E expterm = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=new Asign(tipoAsig, ident.lexema, expterm); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SAsign",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SWhile ::= WHILE PAP SExp4 PCIERRE LLAP S LLCIERRE 
            {
              Statement RESULT =null;
		E cond = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		Statement instrucciones = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=new While(cond, instrucciones); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SWhile",5, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SExp4 ::= SExp3 IGDOBLE SExp3 
            {
              E RESULT =null;
		E expterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E expterm2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new EBin(expterm1, expterm2,KindE.ID); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp4",9, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SExp4 ::= SExp3 DISTINTO SExp3 
            {
              E RESULT =null;
		E expterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E expterm2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new EBin(expterm1, expterm2,KindE.DISTINTO); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp4",9, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SExp4 ::= SExp3 
            {
              E RESULT =null;
		E expterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=expterm1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp4",9, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SExp3 ::= SExp2 MENOR SExp2 
            {
              E RESULT =null;
		E expterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E expterm2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new EBin(expterm1, expterm2,KindE.MENOR); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp3",10, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SExp3 ::= SExp2 MAYOR SExp2 
            {
              E RESULT =null;
		E expterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E expterm2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new EBin(expterm1, expterm2,KindE.MAYOR); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp3",10, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SExp3 ::= SExp2 MENIGUAL SExp2 
            {
              E RESULT =null;
		E expterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E expterm2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new EBin(expterm1, expterm2,KindE.MENIGUAL); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp3",10, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SExp3 ::= SExp2 MAYIGUAL SExp2 
            {
              E RESULT =null;
		E expterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E expterm2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new EBin(expterm1, expterm2,KindE.MAYIGUAL); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp3",10, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SExp3 ::= SExp2 
            {
              E RESULT =null;
		E expterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=expterm1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp3",10, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SExp2 ::= SExp2 OR SExp1 
            {
              E RESULT =null;
		E expterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E expterm2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new EBin(expterm1, expterm2, KindE.OR); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp2",11, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SExp2 ::= SExp2 MAS SExp1 
            {
              E RESULT =null;
		E floatexp1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E expterm = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(floatexp1,expterm,KindE.SUMA); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp2",11, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SExp2 ::= SExp2 MENOS SExp1 
            {
              E RESULT =null;
		E floatexp1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E expterm = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(floatexp1,expterm,KindE.RESTA); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp2",11, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SExp2 ::= SExp1 
            {
              E RESULT =null;
		E expterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=expterm1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp2",11, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SExp1 ::= SExp1 AND SExp0 
            {
              E RESULT =null;
		E expterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E expterm2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new EBin(expterm1, expterm2, KindE.AND); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp1",12, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SExp1 ::= SExp1 POR SExp0 
            {
              E RESULT =null;
		E expterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E expfact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(expterm1,expfact, KindE.MUL); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp1",12, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SExp1 ::= SExp1 DIV SExp0 
            {
              E RESULT =null;
		E expterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E expfact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(expterm1,expfact, KindE.DIV); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp1",12, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SExp1 ::= SExp1 MOD SExp0 
            {
              E RESULT =null;
		E aDeterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E aDefact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(aDeterm1,aDefact, KindE.MOD); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp1",12, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SExp1 ::= SExp0 
            {
              E RESULT =null;
		E expterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=expterm1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp1",12, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SExp0 ::= Exp POT SExp0 
            {
              E RESULT =null;
		E expfact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E expterm2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(expfact,expterm2, KindE.POT); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp0",13, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SExp0 ::= NOT SExp0 
            {
              E RESULT =null;
		E boolVal = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new Not(boolVal); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp0",13, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SExp0 ::= Exp 
            {
              E RESULT =null;
		E expterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=expterm1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp0",13, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Exp ::= ENT 
            {
              E RESULT =null;
		TokenValue numEnt = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new Ent(numEnt.lexema); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp",14, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Exp ::= REAL 
            {
              E RESULT =null;
		TokenValue numReal = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new Real(numReal.lexema); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp",14, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Exp ::= TRUE 
            {
              E RESULT =null;
		Object trueterm = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new True(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp",14, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Exp ::= FALSE 
            {
              E RESULT =null;
		Object falseterm = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new False(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp",14, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Exp ::= IDEN 
            {
              E RESULT =null;
		TokenValue ident = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new Ident(ident.lexema); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp",14, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Exp ::= PAP SExp4 PCIERRE 
            {
              E RESULT =null;
		E expterm = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=expterm; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp",14, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Tipo ::= BOOL 
            {
              TipoEnum RESULT =null;
		 RESULT=TipoEnum.BOOL; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Tipo",15, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Tipo ::= INT 
            {
              TipoEnum RESULT =null;
		 RESULT=TipoEnum.INT; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Tipo",15, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Tipo ::= FLOAT 
            {
              TipoEnum RESULT =null;
		 RESULT=TipoEnum.FLOAT; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Tipo",15, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ConstructorASTExp$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ConstructorASTExp$do_action(
    int                        CUP$ConstructorASTExp$act_num,
    java_cup.runtime.lr_parser CUP$ConstructorASTExp$parser,
    java.util.Stack            CUP$ConstructorASTExp$stack,
    int                        CUP$ConstructorASTExp$top)
    throws java.lang.Exception
    {
              return CUP$ConstructorASTExp$do_action_part00000000(
                               CUP$ConstructorASTExp$act_num,
                               CUP$ConstructorASTExp$parser,
                               CUP$ConstructorASTExp$stack,
                               CUP$ConstructorASTExp$top);
    }
}

