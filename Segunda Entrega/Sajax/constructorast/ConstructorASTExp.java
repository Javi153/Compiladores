
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Mon Apr 03 10:51:58 CEST 2023
//----------------------------------------------------

package constructorast;

import java_cup.runtime.*;
import sajax_lex.AnalizadorLexicoSajax;
import sajax_lex.UnidadLexica;
import sajax_lex.TokenValue;
import errors.GestionErroresTiny;
import ast.*;
import java.util.ArrayList;
import java.util.Arrays;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Mon Apr 03 10:51:58 CEST 2023
  */
public class ConstructorASTExp extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ConstructorASTExp() {super();}

  /** Constructor which sets the default scanner. */
  public ConstructorASTExp(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ConstructorASTExp(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\132\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\004" +
    "\000\002\003\004\000\002\003\004\000\002\003\004\000" +
    "\002\003\004\000\002\003\004\000\002\003\004\000\002" +
    "\003\002\000\002\015\007\000\002\004\004\000\002\004" +
    "\004\000\002\004\004\000\002\004\002\000\002\012\004" +
    "\000\002\010\012\000\002\010\016\000\002\034\012\000" +
    "\002\034\002\000\002\007\005\000\002\006\007\000\002" +
    "\014\013\000\002\014\015\000\002\011\011\000\002\017" +
    "\010\000\002\017\010\000\002\016\013\000\002\016\012" +
    "\000\002\005\005\000\002\013\007\000\002\013\007\000" +
    "\002\013\007\000\002\013\007\000\002\013\007\000\002" +
    "\013\004\000\002\026\006\000\002\037\003\000\002\037" +
    "\002\000\002\040\005\000\002\040\003\000\002\035\003" +
    "\000\002\035\002\000\002\036\006\000\002\036\004\000" +
    "\002\020\005\000\002\020\005\000\002\020\003\000\002" +
    "\021\005\000\002\021\005\000\002\021\005\000\002\021" +
    "\005\000\002\021\003\000\002\022\005\000\002\022\005" +
    "\000\002\022\005\000\002\022\003\000\002\023\005\000" +
    "\002\023\005\000\002\023\005\000\002\023\005\000\002" +
    "\023\003\000\002\024\005\000\002\024\004\000\002\024" +
    "\003\000\002\025\003\000\002\025\004\000\002\025\003" +
    "\000\002\025\004\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\025\003\000\002\025\005\000\002" +
    "\025\003\000\002\027\004\000\002\027\005\000\002\033" +
    "\004\000\002\033\003\000\002\032\003\000\002\032\003" +
    "\000\002\030\004\000\002\030\003\000\002\030\003\000" +
    "\002\030\003\000\002\031\004\000\002\031\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\315\000\042\002\ufff5\027\ufff5\030\ufff5\031\ufff5\033" +
    "\ufff5\037\ufff5\045\ufff5\046\ufff5\047\ufff5\050\ufff5\051\ufff5" +
    "\052\ufff5\053\ufff5\054\ufff5\055\ufff5\067\ufff5\001\002\000" +
    "\046\002\001\027\013\030\040\031\042\032\001\033\011" +
    "\035\001\037\022\045\030\046\032\047\037\050\012\051" +
    "\025\052\036\053\033\054\027\055\007\067\020\001\002" +
    "\000\004\002\006\001\002\000\004\002\000\001\002\000" +
    "\004\025\314\001\002\000\046\002\uffff\027\uffff\030\uffff" +
    "\031\uffff\032\uffff\033\uffff\035\uffff\037\uffff\045\uffff\046" +
    "\uffff\047\uffff\050\uffff\051\uffff\052\uffff\053\uffff\054\uffff" +
    "\055\uffff\067\uffff\001\002\000\004\067\273\001\002\000" +
    "\006\011\uffab\067\uffab\001\002\000\004\025\265\001\002" +
    "\000\046\002\ufff9\027\ufff9\030\ufff9\031\ufff9\032\ufff9\033" +
    "\ufff9\035\ufff9\037\ufff9\045\ufff9\046\ufff9\047\ufff9\050\ufff9" +
    "\051\ufff9\052\ufff9\053\ufff9\054\ufff9\055\ufff9\067\ufff9\001" +
    "\002\000\046\002\ufff6\027\ufff6\030\ufff6\031\ufff6\032\ufff6" +
    "\033\ufff6\035\ufff6\037\ufff6\045\ufff6\046\ufff6\047\ufff6\050" +
    "\ufff6\051\ufff6\052\ufff6\053\ufff6\054\ufff6\055\ufff6\067\ufff6" +
    "\001\002\000\006\011\254\067\255\001\002\000\046\002" +
    "\ufffe\027\ufffe\030\ufffe\031\ufffe\032\ufffe\033\ufffe\035\ufffe" +
    "\037\ufffe\045\ufffe\046\ufffe\047\ufffe\050\ufffe\051\ufffe\052" +
    "\ufffe\053\ufffe\054\ufffe\055\ufffe\067\ufffe\001\002\000\010" +
    "\011\uffa8\025\142\067\uffa8\001\002\000\046\002\ufffa\027" +
    "\ufffa\030\ufffa\031\ufffa\032\ufffa\033\ufffa\035\ufffa\037\ufffa" +
    "\045\ufffa\046\ufffa\047\ufffa\050\ufffa\051\ufffa\052\ufffa\053" +
    "\ufffa\054\ufffa\055\ufffa\067\ufffa\001\002\000\004\025\232" +
    "\001\002\000\004\036\231\001\002\000\046\002\ufffc\027" +
    "\ufffc\030\ufffc\031\ufffc\032\ufffc\033\ufffc\035\ufffc\037\ufffc" +
    "\045\ufffc\046\ufffc\047\ufffc\050\ufffc\051\ufffc\052\ufffc\053" +
    "\ufffc\054\ufffc\055\ufffc\067\ufffc\001\002\000\006\011\uffaa" +
    "\067\uffaa\001\002\000\046\002\ufffd\027\ufffd\030\ufffd\031" +
    "\ufffd\032\ufffd\033\ufffd\035\ufffd\037\ufffd\045\ufffd\046\ufffd" +
    "\047\ufffd\050\ufffd\051\ufffd\052\ufffd\053\ufffd\054\ufffd\055" +
    "\ufffd\067\ufffd\001\002\000\004\025\225\001\002\000\004" +
    "\036\224\001\002\000\006\011\223\067\uffaf\001\002\000" +
    "\004\025\217\001\002\000\004\025\213\001\002\000\006" +
    "\011\212\067\uffae\001\002\000\004\067\163\001\002\000" +
    "\006\011\uffac\067\uffac\001\002\000\004\025\157\001\002" +
    "\000\004\025\045\001\002\000\046\002\ufff7\027\ufff7\030" +
    "\ufff7\031\ufff7\032\ufff7\033\ufff7\035\ufff7\037\ufff7\045\ufff7" +
    "\046\ufff7\047\ufff7\050\ufff7\051\ufff7\052\ufff7\053\ufff7\054" +
    "\ufff7\055\ufff7\067\ufff7\001\002\000\006\011\uffb0\067\uffb0" +
    "\001\002\000\046\002\ufffb\027\ufffb\030\ufffb\031\ufffb\032" +
    "\ufffb\033\ufffb\035\ufffb\037\ufffb\045\ufffb\046\ufffb\047\ufffb" +
    "\050\ufffb\051\ufffb\052\ufffb\053\ufffb\054\ufffb\055\ufffb\067" +
    "\ufffb\001\002\000\046\002\ufff8\027\ufff8\030\ufff8\031\ufff8" +
    "\032\ufff8\033\ufff8\035\ufff8\037\ufff8\045\ufff8\046\ufff8\047" +
    "\ufff8\050\ufff8\051\ufff8\052\ufff8\053\ufff8\054\ufff8\055\ufff8" +
    "\067\ufff8\001\002\000\024\006\065\010\046\011\052\025" +
    "\050\063\053\064\056\065\047\066\061\067\051\001\002" +
    "\000\006\065\155\066\156\001\002\000\044\004\uffbd\005" +
    "\uffbd\007\uffbd\010\uffbd\011\uffbd\012\uffbd\013\uffbd\014\uffbd" +
    "\015\uffbd\016\uffbd\017\uffbd\020\uffbd\021\uffbd\022\uffbd\024" +
    "\uffbd\026\uffbd\036\uffbd\001\002\000\024\006\065\010\046" +
    "\011\052\025\050\063\053\064\056\065\047\066\061\067" +
    "\051\001\002\000\050\004\uffb7\005\uffb7\007\uffb7\010\uffb7" +
    "\011\uffb7\012\uffb7\013\uffb7\014\uffb7\015\uffb7\016\uffb7\017" +
    "\uffb7\020\uffb7\021\uffb7\022\uffb7\024\uffb7\025\142\026\uffb7" +
    "\036\uffb7\062\141\001\002\000\004\067\140\001\002\000" +
    "\044\004\uffb9\005\uffb9\007\uffb9\010\uffb9\011\uffb9\012\uffb9" +
    "\013\uffb9\014\uffb9\015\uffb9\016\uffb9\017\uffb9\020\uffb9\021" +
    "\uffb9\022\uffb9\024\uffb9\026\uffb9\036\uffb9\001\002\000\044" +
    "\004\uffb4\005\uffb4\007\uffb4\010\uffb4\011\uffb4\012\uffb4\013" +
    "\uffb4\014\uffb4\015\uffb4\016\uffb4\017\uffb4\020\uffb4\021\uffb4" +
    "\022\uffb4\024\uffb4\026\uffb4\036\uffb4\001\002\000\044\004" +
    "\uffbe\005\uffbe\007\uffbe\010\uffbe\011\uffbe\012\uffbe\013\136" +
    "\014\uffbe\015\uffbe\016\uffbe\017\uffbe\020\uffbe\021\uffbe\022" +
    "\uffbe\024\uffbe\026\uffbe\036\uffbe\001\002\000\044\004\uffb8" +
    "\005\uffb8\007\uffb8\010\uffb8\011\uffb8\012\uffb8\013\uffb8\014" +
    "\uffb8\015\uffb8\016\uffb8\017\uffb8\020\uffb8\021\uffb8\022\uffb8" +
    "\024\uffb8\026\uffb8\036\uffb8\001\002\000\004\036\122\001" +
    "\002\000\014\015\116\016\117\024\uffcf\026\uffcf\036\uffcf" +
    "\001\002\000\044\004\uffbb\005\uffbb\007\uffbb\010\uffbb\011" +
    "\uffbb\012\uffbb\013\uffbb\014\uffbb\015\uffbb\016\uffbb\017\uffbb" +
    "\020\uffbb\021\uffbb\022\uffbb\024\uffbb\026\uffbb\036\uffbb\001" +
    "\002\000\032\004\106\007\100\010\102\015\uffca\016\uffca" +
    "\017\104\020\105\021\103\022\101\024\uffca\026\uffca\036" +
    "\uffca\001\002\000\042\004\uffc6\005\071\007\uffc6\010\uffc6" +
    "\011\073\012\072\014\070\015\uffc6\016\uffc6\017\uffc6\020" +
    "\uffc6\021\uffc6\022\uffc6\024\uffc6\026\uffc6\036\uffc6\001\002" +
    "\000\042\004\uffc1\005\uffc1\007\uffc1\010\uffc1\011\uffc1\012" +
    "\uffc1\014\uffc1\015\uffc1\016\uffc1\017\uffc1\020\uffc1\021\uffc1" +
    "\022\uffc1\024\uffc1\026\uffc1\036\uffc1\001\002\000\024\006" +
    "\065\010\046\011\052\025\050\063\053\064\056\065\047" +
    "\066\061\067\051\001\002\000\044\004\uffb6\005\uffb6\007" +
    "\uffb6\010\uffb6\011\uffb6\012\uffb6\013\uffb6\014\uffb6\015\uffb6" +
    "\016\uffb6\017\uffb6\020\uffb6\021\uffb6\022\uffb6\024\uffb6\026" +
    "\uffb6\036\uffb6\001\002\000\042\004\uffbf\005\uffbf\007\uffbf" +
    "\010\uffbf\011\uffbf\012\uffbf\014\uffbf\015\uffbf\016\uffbf\017" +
    "\uffbf\020\uffbf\021\uffbf\022\uffbf\024\uffbf\026\uffbf\036\uffbf" +
    "\001\002\000\024\006\065\010\046\011\052\025\050\063" +
    "\053\064\056\065\047\066\061\067\051\001\002\000\024" +
    "\006\065\010\046\011\052\025\050\063\053\064\056\065" +
    "\047\066\061\067\051\001\002\000\024\006\065\010\046" +
    "\011\052\025\050\063\053\064\056\065\047\066\061\067" +
    "\051\001\002\000\024\006\065\010\046\011\052\025\050" +
    "\063\053\064\056\065\047\066\061\067\051\001\002\000" +
    "\042\004\uffc4\005\uffc4\007\uffc4\010\uffc4\011\uffc4\012\uffc4" +
    "\014\uffc4\015\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4\022" +
    "\uffc4\024\uffc4\026\uffc4\036\uffc4\001\002\000\042\004\uffc3" +
    "\005\uffc3\007\uffc3\010\uffc3\011\uffc3\012\uffc3\014\uffc3\015" +
    "\uffc3\016\uffc3\017\uffc3\020\uffc3\021\uffc3\022\uffc3\024\uffc3" +
    "\026\uffc3\036\uffc3\001\002\000\042\004\uffc5\005\uffc5\007" +
    "\uffc5\010\uffc5\011\uffc5\012\uffc5\014\uffc5\015\uffc5\016\uffc5" +
    "\017\uffc5\020\uffc5\021\uffc5\022\uffc5\024\uffc5\026\uffc5\036" +
    "\uffc5\001\002\000\042\004\uffc2\005\uffc2\007\uffc2\010\uffc2" +
    "\011\uffc2\012\uffc2\014\uffc2\015\uffc2\016\uffc2\017\uffc2\020" +
    "\uffc2\021\uffc2\022\uffc2\024\uffc2\026\uffc2\036\uffc2\001\002" +
    "\000\024\006\065\010\046\011\052\025\050\063\053\064" +
    "\056\065\047\066\061\067\051\001\002\000\024\006\065" +
    "\010\046\011\052\025\050\063\053\064\056\065\047\066" +
    "\061\067\051\001\002\000\024\006\065\010\046\011\052" +
    "\025\050\063\053\064\056\065\047\066\061\067\051\001" +
    "\002\000\024\006\065\010\046\011\052\025\050\063\053" +
    "\064\056\065\047\066\061\067\051\001\002\000\024\006" +
    "\065\010\046\011\052\025\050\063\053\064\056\065\047" +
    "\066\061\067\051\001\002\000\024\006\065\010\046\011" +
    "\052\025\050\063\053\064\056\065\047\066\061\067\051" +
    "\001\002\000\024\006\065\010\046\011\052\025\050\063" +
    "\053\064\056\065\047\066\061\067\051\001\002\000\042" +
    "\004\uffc9\005\071\007\uffc9\010\uffc9\011\073\012\072\014" +
    "\070\015\uffc9\016\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9" +
    "\024\uffc9\026\uffc9\036\uffc9\001\002\000\022\004\106\007" +
    "\100\010\102\015\uffcd\016\uffcd\024\uffcd\026\uffcd\036\uffcd" +
    "\001\002\000\022\004\106\007\100\010\102\015\uffce\016" +
    "\uffce\024\uffce\026\uffce\036\uffce\001\002\000\022\004\106" +
    "\007\100\010\102\015\uffcc\016\uffcc\024\uffcc\026\uffcc\036" +
    "\uffcc\001\002\000\042\004\uffc7\005\071\007\uffc7\010\uffc7" +
    "\011\073\012\072\014\070\015\uffc7\016\uffc7\017\uffc7\020" +
    "\uffc7\021\uffc7\022\uffc7\024\uffc7\026\uffc7\036\uffc7\001\002" +
    "\000\022\004\106\007\100\010\102\015\uffcb\016\uffcb\024" +
    "\uffcb\026\uffcb\036\uffcb\001\002\000\042\004\uffc8\005\071" +
    "\007\uffc8\010\uffc8\011\073\012\072\014\070\015\uffc8\016" +
    "\uffc8\017\uffc8\020\uffc8\021\uffc8\022\uffc8\024\uffc8\026\uffc8" +
    "\036\uffc8\001\002\000\024\006\065\010\046\011\052\025" +
    "\050\063\053\064\056\065\047\066\061\067\051\001\002" +
    "\000\024\006\065\010\046\011\052\025\050\063\053\064" +
    "\056\065\047\066\061\067\051\001\002\000\010\024\uffd0" +
    "\026\uffd0\036\uffd0\001\002\000\010\024\uffd1\026\uffd1\036" +
    "\uffd1\001\002\000\024\006\065\010\046\011\052\025\050" +
    "\063\053\064\056\065\047\066\061\067\051\001\002\000" +
    "\006\026\124\036\125\001\002\000\004\034\133\001\002" +
    "\000\024\006\065\010\046\011\052\025\050\063\053\064" +
    "\056\065\047\066\061\067\051\001\002\000\004\026\127" +
    "\001\002\000\004\034\130\001\002\000\042\027\ufff5\030" +
    "\ufff5\031\ufff5\033\ufff5\035\ufff5\037\ufff5\045\ufff5\046\ufff5" +
    "\047\ufff5\050\ufff5\051\ufff5\052\ufff5\053\ufff5\054\ufff5\055" +
    "\ufff5\067\ufff5\001\002\000\004\035\132\001\002\000\046" +
    "\002\uffe7\027\uffe7\030\uffe7\031\uffe7\032\uffe7\033\uffe7\035" +
    "\uffe7\037\uffe7\045\uffe7\046\uffe7\047\uffe7\050\uffe7\051\uffe7" +
    "\052\uffe7\053\uffe7\054\uffe7\055\uffe7\067\uffe7\001\002\000" +
    "\042\027\ufff5\030\ufff5\031\ufff5\033\ufff5\035\ufff5\037\ufff5" +
    "\045\ufff5\046\ufff5\047\ufff5\050\ufff5\051\ufff5\052\ufff5\053" +
    "\ufff5\054\ufff5\055\ufff5\067\ufff5\001\002\000\004\035\135" +
    "\001\002\000\046\002\uffe8\027\uffe8\030\uffe8\031\uffe8\032" +
    "\uffe8\033\uffe8\035\uffe8\037\uffe8\045\uffe8\046\uffe8\047\uffe8" +
    "\050\uffe8\051\uffe8\052\uffe8\053\uffe8\054\uffe8\055\uffe8\067" +
    "\uffe8\001\002\000\024\006\065\010\046\011\052\025\050" +
    "\063\053\064\056\065\047\066\061\067\051\001\002\000" +
    "\042\004\uffc0\005\uffc0\007\uffc0\010\uffc0\011\uffc0\012\uffc0" +
    "\014\uffc0\015\uffc0\016\uffc0\017\uffc0\020\uffc0\021\uffc0\022" +
    "\uffc0\024\uffc0\026\uffc0\036\uffc0\001\002\000\044\004\uffb3" +
    "\005\uffb3\007\uffb3\010\uffb3\011\uffb3\012\uffb3\013\uffb3\014" +
    "\uffb3\015\uffb3\016\uffb3\017\uffb3\020\uffb3\021\uffb3\022\uffb3" +
    "\024\uffb3\026\uffb3\036\uffb3\001\002\000\006\011\052\067" +
    "\152\001\002\000\026\006\065\010\046\011\052\025\050" +
    "\026\uffd8\063\053\064\056\065\047\066\061\067\051\001" +
    "\002\000\006\024\147\026\uffd9\001\002\000\004\026\146" +
    "\001\002\000\006\024\uffd6\026\uffd6\001\002\000\044\004" +
    "\uffda\005\uffda\007\uffda\010\uffda\011\uffda\012\uffda\013\uffda" +
    "\014\uffda\015\uffda\016\uffda\017\uffda\020\uffda\021\uffda\022" +
    "\uffda\024\uffda\026\uffda\036\uffda\001\002\000\024\006\065" +
    "\010\046\011\052\025\050\063\053\064\056\065\047\066" +
    "\061\067\051\001\002\000\006\024\uffd7\026\uffd7\001\002" +
    "\000\044\004\uffb2\005\uffb2\007\uffb2\010\uffb2\011\uffb2\012" +
    "\uffb2\013\uffb2\014\uffb2\015\uffb2\016\uffb2\017\uffb2\020\uffb2" +
    "\021\uffb2\022\uffb2\024\uffb2\026\uffb2\036\uffb2\001\002\000" +
    "\004\062\141\001\002\000\004\026\154\001\002\000\044" +
    "\004\uffb5\005\uffb5\007\uffb5\010\uffb5\011\uffb5\012\uffb5\013" +
    "\uffb5\014\uffb5\015\uffb5\016\uffb5\017\uffb5\020\uffb5\021\uffb5" +
    "\022\uffb5\024\uffb5\026\uffb5\036\uffb5\001\002\000\044\004" +
    "\uffbc\005\uffbc\007\uffbc\010\uffbc\011\uffbc\012\uffbc\013\uffbc" +
    "\014\uffbc\015\uffbc\016\uffbc\017\uffbc\020\uffbc\021\uffbc\022" +
    "\uffbc\024\uffbc\026\uffbc\036\uffbc\001\002\000\044\004\uffba" +
    "\005\uffba\007\uffba\010\uffba\011\uffba\012\uffba\013\uffba\014" +
    "\uffba\015\uffba\016\uffba\017\uffba\020\uffba\021\uffba\022\uffba" +
    "\024\uffba\026\uffba\036\uffba\001\002\000\004\067\160\001" +
    "\002\000\004\026\161\001\002\000\004\036\162\001\002" +
    "\000\046\002\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc\033" +
    "\uffdc\035\uffdc\037\uffdc\045\uffdc\046\uffdc\047\uffdc\050\uffdc" +
    "\051\uffdc\052\uffdc\053\uffdc\054\uffdc\055\uffdc\067\uffdc\001" +
    "\002\000\010\023\166\025\165\036\164\001\002\000\046" +
    "\002\uffea\027\uffea\030\uffea\031\uffea\032\uffea\033\uffea\035" +
    "\uffea\037\uffea\045\uffea\046\uffea\047\uffea\050\uffea\051\uffea" +
    "\052\uffea\053\uffea\054\uffea\055\uffea\067\uffea\001\002\000" +
    "\014\026\uffd4\050\012\051\025\052\036\067\172\001\002" +
    "\000\024\006\065\010\046\011\052\025\050\063\053\064" +
    "\056\065\047\066\061\067\051\001\002\000\004\036\170" +
    "\001\002\000\046\002\uffe9\027\uffe9\030\uffe9\031\uffe9\032" +
    "\uffe9\033\uffe9\035\uffe9\037\uffe9\045\uffe9\046\uffe9\047\uffe9" +
    "\050\uffe9\051\uffe9\052\uffe9\053\uffe9\054\uffe9\055\uffe9\067" +
    "\uffe9\001\002\000\004\067\211\001\002\000\006\011\uffa8" +
    "\067\uffa8\001\002\000\006\024\206\026\uffd5\001\002\000" +
    "\004\026\175\001\002\000\006\034\176\036\177\001\002" +
    "\000\042\027\ufff5\030\ufff5\031\ufff5\032\ufff5\033\ufff5\037" +
    "\ufff5\045\ufff5\046\ufff5\047\ufff5\050\ufff5\051\ufff5\052\ufff5" +
    "\053\ufff5\054\ufff5\055\ufff5\067\ufff5\001\002\000\046\002" +
    "\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5\035\uffe5" +
    "\037\uffe5\045\uffe5\046\uffe5\047\uffe5\050\uffe5\051\uffe5\052" +
    "\uffe5\053\uffe5\054\uffe5\055\uffe5\067\uffe5\001\002\000\004" +
    "\032\201\001\002\000\024\006\065\010\046\011\052\025" +
    "\050\063\053\064\056\065\047\066\061\067\051\001\002" +
    "\000\004\035\203\001\002\000\046\002\uffe3\027\uffe3\030" +
    "\uffe3\031\uffe3\032\uffe3\033\uffe3\035\uffe3\037\uffe3\045\uffe3" +
    "\046\uffe3\047\uffe3\050\uffe3\051\uffe3\052\uffe3\053\uffe3\054" +
    "\uffe3\055\uffe3\067\uffe3\001\002\000\004\036\205\001\002" +
    "\000\004\035\uffe1\001\002\000\012\050\012\051\025\052" +
    "\036\067\172\001\002\000\004\067\210\001\002\000\006" +
    "\024\uffd3\026\uffd3\001\002\000\006\024\uffd2\026\uffd2\001" +
    "\002\000\006\011\uffa9\067\uffa9\001\002\000\024\006\065" +
    "\010\046\011\052\025\050\063\053\064\056\065\047\066" +
    "\061\067\051\001\002\000\004\026\215\001\002\000\004" +
    "\036\216\001\002\000\046\002\uffe0\027\uffe0\030\uffe0\031" +
    "\uffe0\032\uffe0\033\uffe0\035\uffe0\037\uffe0\045\uffe0\046\uffe0" +
    "\047\uffe0\050\uffe0\051\uffe0\052\uffe0\053\uffe0\054\uffe0\055" +
    "\uffe0\067\uffe0\001\002\000\024\006\065\010\046\011\052" +
    "\025\050\063\053\064\056\065\047\066\061\067\051\001" +
    "\002\000\004\026\221\001\002\000\004\036\222\001\002" +
    "\000\046\002\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd\033" +
    "\uffdd\035\uffdd\037\uffdd\045\uffdd\046\uffdd\047\uffdd\050\uffdd" +
    "\051\uffdd\052\uffdd\053\uffdd\054\uffdd\055\uffdd\067\uffdd\001" +
    "\002\000\006\011\uffad\067\uffad\001\002\000\046\002\uffef" +
    "\027\uffef\030\uffef\031\uffef\032\uffef\033\uffef\035\uffef\037" +
    "\uffef\045\uffef\046\uffef\047\uffef\050\uffef\051\uffef\052\uffef" +
    "\053\uffef\054\uffef\055\uffef\067\uffef\001\002\000\024\006" +
    "\065\010\046\011\052\025\050\063\053\064\056\065\047" +
    "\066\061\067\051\001\002\000\004\026\227\001\002\000" +
    "\004\036\230\001\002\000\046\002\uffdf\027\uffdf\030\uffdf" +
    "\031\uffdf\032\uffdf\033\uffdf\035\uffdf\037\uffdf\045\uffdf\046" +
    "\uffdf\047\uffdf\050\uffdf\051\uffdf\052\uffdf\053\uffdf\054\uffdf" +
    "\055\uffdf\067\uffdf\001\002\000\046\002\uffdb\027\uffdb\030" +
    "\uffdb\031\uffdb\032\uffdb\033\uffdb\035\uffdb\037\uffdb\045\uffdb" +
    "\046\uffdb\047\uffdb\050\uffdb\051\uffdb\052\uffdb\053\uffdb\054" +
    "\uffdb\055\uffdb\067\uffdb\001\002\000\024\006\065\010\046" +
    "\011\052\025\050\063\053\064\056\065\047\066\061\067" +
    "\051\001\002\000\004\026\234\001\002\000\004\034\235" +
    "\001\002\000\042\027\ufff5\030\ufff5\031\ufff5\033\ufff5\035" +
    "\ufff5\037\ufff5\045\ufff5\046\ufff5\047\ufff5\050\ufff5\051\ufff5" +
    "\052\ufff5\053\ufff5\054\ufff5\055\ufff5\067\ufff5\001\002\000" +
    "\004\035\237\001\002\000\052\002\uffeb\027\uffeb\030\uffeb" +
    "\031\uffeb\032\uffeb\033\uffeb\035\uffeb\037\uffeb\040\uffeb\041" +
    "\uffeb\045\uffeb\046\uffeb\047\uffeb\050\uffeb\051\uffeb\052\uffeb" +
    "\053\uffeb\054\uffeb\055\uffeb\067\uffeb\001\002\000\052\002" +
    "\uffee\027\uffee\030\uffee\031\uffee\032\uffee\033\uffee\035\uffee" +
    "\037\uffee\040\242\041\241\045\uffee\046\uffee\047\uffee\050" +
    "\uffee\051\uffee\052\uffee\053\uffee\054\uffee\055\uffee\067\uffee" +
    "\001\002\000\004\034\251\001\002\000\004\025\243\001" +
    "\002\000\024\006\065\010\046\011\052\025\050\063\053" +
    "\064\056\065\047\066\061\067\051\001\002\000\004\026" +
    "\245\001\002\000\004\034\246\001\002\000\042\027\ufff5" +
    "\030\ufff5\031\ufff5\033\ufff5\035\ufff5\037\ufff5\045\ufff5\046" +
    "\ufff5\047\ufff5\050\ufff5\051\ufff5\052\ufff5\053\ufff5\054\ufff5" +
    "\055\ufff5\067\ufff5\001\002\000\004\035\250\001\002\000" +
    "\052\002\uffec\027\uffec\030\uffec\031\uffec\032\uffec\033\uffec" +
    "\035\uffec\037\uffec\040\uffec\041\uffec\045\uffec\046\uffec\047" +
    "\uffec\050\uffec\051\uffec\052\uffec\053\uffec\054\uffec\055\uffec" +
    "\067\uffec\001\002\000\042\027\ufff5\030\ufff5\031\ufff5\033" +
    "\ufff5\035\ufff5\037\ufff5\045\ufff5\046\ufff5\047\ufff5\050\ufff5" +
    "\051\ufff5\052\ufff5\053\ufff5\054\ufff5\055\ufff5\067\ufff5\001" +
    "\002\000\004\035\253\001\002\000\046\002\uffed\027\uffed" +
    "\030\uffed\031\uffed\032\uffed\033\uffed\035\uffed\037\uffed\045" +
    "\uffed\046\uffed\047\uffed\050\uffed\051\uffed\052\uffed\053\uffed" +
    "\054\uffed\055\uffed\067\uffed\001\002\000\006\011\uffb1\067" +
    "\uffb1\001\002\000\004\025\256\001\002\000\014\026\uffd4" +
    "\050\012\051\025\052\036\067\172\001\002\000\004\026" +
    "\260\001\002\000\006\034\261\036\262\001\002\000\042" +
    "\027\ufff5\030\ufff5\031\ufff5\033\ufff5\035\ufff5\037\ufff5\045" +
    "\ufff5\046\ufff5\047\ufff5\050\ufff5\051\ufff5\052\ufff5\053\ufff5" +
    "\054\ufff5\055\ufff5\067\ufff5\001\002\000\046\002\uffe4\027" +
    "\uffe4\030\uffe4\031\uffe4\032\uffe4\033\uffe4\035\uffe4\037\uffe4" +
    "\045\uffe4\046\uffe4\047\uffe4\050\uffe4\051\uffe4\052\uffe4\053" +
    "\uffe4\054\uffe4\055\uffe4\067\uffe4\001\002\000\004\035\264" +
    "\001\002\000\046\002\uffe2\027\uffe2\030\uffe2\031\uffe2\032" +
    "\uffe2\033\uffe2\035\uffe2\037\uffe2\045\uffe2\046\uffe2\047\uffe2" +
    "\050\uffe2\051\uffe2\052\uffe2\053\uffe2\054\uffe2\055\uffe2\067" +
    "\uffe2\001\002\000\024\006\065\010\046\011\052\025\050" +
    "\063\053\064\056\065\047\066\061\067\051\001\002\000" +
    "\004\026\267\001\002\000\004\034\270\001\002\000\042" +
    "\027\ufff5\030\ufff5\031\ufff5\033\ufff5\035\ufff5\037\ufff5\045" +
    "\ufff5\046\ufff5\047\ufff5\050\ufff5\051\ufff5\052\ufff5\053\ufff5" +
    "\054\ufff5\055\ufff5\067\ufff5\001\002\000\004\035\272\001" +
    "\002\000\046\002\uffe6\027\uffe6\030\uffe6\031\uffe6\032\uffe6" +
    "\033\uffe6\035\uffe6\037\uffe6\045\uffe6\046\uffe6\047\uffe6\050" +
    "\uffe6\051\uffe6\052\uffe6\053\uffe6\054\uffe6\055\uffe6\067\uffe6" +
    "\001\002\000\004\034\274\001\002\000\016\031\ufff0\035" +
    "\ufff0\050\ufff0\051\ufff0\052\ufff0\067\ufff0\001\002\000\016" +
    "\031\042\035\301\050\012\051\025\052\036\067\172\001" +
    "\002\000\004\067\310\001\002\000\016\031\ufff3\035\ufff3" +
    "\050\ufff3\051\ufff3\052\ufff3\067\ufff3\001\002\000\016\031" +
    "\ufff1\035\ufff1\050\ufff1\051\ufff1\052\ufff1\067\ufff1\001\002" +
    "\000\046\002\ufff4\027\ufff4\030\ufff4\031\ufff4\032\ufff4\033" +
    "\ufff4\035\ufff4\037\ufff4\045\ufff4\046\ufff4\047\ufff4\050\ufff4" +
    "\051\ufff4\052\ufff4\053\ufff4\054\ufff4\055\ufff4\067\ufff4\001" +
    "\002\000\006\011\254\067\304\001\002\000\016\031\ufff2" +
    "\035\ufff2\050\ufff2\051\ufff2\052\ufff2\067\ufff2\001\002\000" +
    "\004\025\305\001\002\000\014\026\uffd4\050\012\051\025" +
    "\052\036\067\172\001\002\000\004\026\307\001\002\000" +
    "\004\034\261\001\002\000\010\023\166\025\311\036\164" +
    "\001\002\000\014\026\uffd4\050\012\051\025\052\036\067" +
    "\172\001\002\000\004\026\313\001\002\000\004\034\176" +
    "\001\002\000\004\067\315\001\002\000\004\026\316\001" +
    "\002\000\004\036\317\001\002\000\046\002\uffde\027\uffde" +
    "\030\uffde\031\uffde\032\uffde\033\uffde\035\uffde\037\uffde\045" +
    "\uffde\046\uffde\047\uffde\050\uffde\051\uffde\052\uffde\053\uffde" +
    "\054\uffde\055\uffde\067\uffde\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\315\000\006\002\004\003\003\001\001\000\040\006" +
    "\007\007\016\010\025\011\042\012\020\013\040\014\023" +
    "\015\014\016\043\017\013\026\022\030\030\031\033\032" +
    "\034\033\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\020\056\021\057\022\061\023\062" +
    "\024\063\025\054\026\053\027\065\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\020\152\021\057\022\061" +
    "\023\062\024\063\025\054\026\053\027\065\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\024\066\025" +
    "\054\026\053\027\065\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\024\076\025\054\026\053\027\065\001" +
    "\001\000\012\024\075\025\054\026\053\027\065\001\001" +
    "\000\012\024\074\025\054\026\053\027\065\001\001\000" +
    "\012\024\073\025\054\026\053\027\065\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\023\114\024\063\025\054\026\053\027\065" +
    "\001\001\000\016\022\113\023\062\024\063\025\054\026" +
    "\053\027\065\001\001\000\014\023\112\024\063\025\054" +
    "\026\053\027\065\001\001\000\016\022\111\023\062\024" +
    "\063\025\054\026\053\027\065\001\001\000\016\022\110" +
    "\023\062\024\063\025\054\026\053\027\065\001\001\000" +
    "\016\022\107\023\062\024\063\025\054\026\053\027\065" +
    "\001\001\000\014\023\106\024\063\025\054\026\053\027" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\021\120\022\061\023\062" +
    "\024\063\025\054\026\053\027\065\001\001\000\020\021" +
    "\117\022\061\023\062\024\063\025\054\026\053\027\065" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\020" +
    "\122\021\057\022\061\023\062\024\063\025\054\026\053" +
    "\027\065\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\020\125\021\057\022\061\023\062\024\063\025\054" +
    "\026\053\027\065\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\002\130\003\003\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\002\133\003\003\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\024\136\025\054" +
    "\026\053\027\065\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\027\150\001\001\000\026\020\144\021\057" +
    "\022\061\023\062\024\063\025\054\026\053\027\065\037" +
    "\143\040\142\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\020\147\021" +
    "\057\022\061\023\062\024\063\025\054\026\053\027\065" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\030\030\031\033\032\170\035\173\036" +
    "\172\001\001\000\022\020\166\021\057\022\061\023\062" +
    "\024\063\025\054\026\053\027\065\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\002\177\003\003\001\001\000\002\001\001\000\004" +
    "\005\201\001\001\000\022\020\203\021\057\022\061\023" +
    "\062\024\063\025\054\026\053\027\065\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\030\030\031\033\032\206\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\020\213\021\057\022\061\023\062\024\063" +
    "\025\054\026\053\027\065\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\020\217\021\057" +
    "\022\061\023\062\024\063\025\054\026\053\027\065\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\020\225\021" +
    "\057\022\061\023\062\024\063\025\054\026\053\027\065" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\020\232\021\057\022\061" +
    "\023\062\024\063\025\054\026\053\027\065\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\002\235\003\003" +
    "\001\001\000\002\001\001\000\004\034\237\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\020\243\021\057\022\061\023\062\024\063\025\054\026" +
    "\053\027\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\002\246\003\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\002\251\003\003\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\030\030\031\033\032\170\035\256\036\172" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\002" +
    "\262\003\003\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\020\265\021\057\022\061\023" +
    "\062\024\063\025\054\026\053\027\065\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\002\270\003\003\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\004\274\001\001\000\020\006\276\007\302\016" +
    "\277\030\030\031\033\032\275\033\301\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\030\030\031\033\032\170\035\305\036\172\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\030\030\031\033\032\170\035\311\036\172\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ConstructorASTExp$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ConstructorASTExp$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ConstructorASTExp$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny();
   AnalizadorLexicoSajax sajax = (AnalizadorLexicoSajax)getScanner();
   sajax.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ConstructorASTExp$actions {
  private final ConstructorASTExp parser;

  /** Constructor */
  CUP$ConstructorASTExp$actions(ConstructorASTExp parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ConstructorASTExp$do_action_part00000000(
    int                        CUP$ConstructorASTExp$act_num,
    java_cup.runtime.lr_parser CUP$ConstructorASTExp$parser,
    java.util.Stack            CUP$ConstructorASTExp$stack,
    int                        CUP$ConstructorASTExp$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ConstructorASTExp$result;

      /* select the action based on the action number */
      switch (CUP$ConstructorASTExp$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= BloqueGeneral 
            {
              Bloque RESULT =null;
		ArrayList<Statement> block = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new Bloque(block); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("S",0, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		Bloque start_val = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		RESULT = start_val;
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$ConstructorASTExp$parser.done_parsing();
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // BloqueGeneral ::= BloqueGeneral SAsign 
            {
              ArrayList<Statement> RESULT =null;
		ArrayList<Statement> genBlock = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Statement aDeexp = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 genBlock.add(aDeexp); RESULT=genBlock; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("BloqueGeneral",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // BloqueGeneral ::= BloqueGeneral SDec 
            {
              ArrayList<Statement> RESULT =null;
		ArrayList<Statement> genBlock = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Statement aDeexp = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 genBlock.add(aDeexp); RESULT=genBlock; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("BloqueGeneral",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // BloqueGeneral ::= BloqueGeneral SIf 
            {
              ArrayList<Statement> RESULT =null;
		ArrayList<Statement> genBlock = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Statement aDeexp = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 genBlock.add(aDeexp); RESULT=genBlock; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("BloqueGeneral",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // BloqueGeneral ::= BloqueGeneral SFor 
            {
              ArrayList<Statement> RESULT =null;
		ArrayList<Statement> genBlock = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Statement aDeexp = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 genBlock.add(aDeexp); RESULT=genBlock; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("BloqueGeneral",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // BloqueGeneral ::= BloqueGeneral SWhile 
            {
              ArrayList<Statement> RESULT =null;
		ArrayList<Statement> genBlock = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Statement aDeexp = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 genBlock.add(aDeexp); RESULT=genBlock; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("BloqueGeneral",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // BloqueGeneral ::= BloqueGeneral SBreak 
            {
              ArrayList<Statement> RESULT =null;
		ArrayList<Statement> genBlock = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Statement aDeexp = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 genBlock.add(aDeexp); RESULT=genBlock; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("BloqueGeneral",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // BloqueGeneral ::= BloqueGeneral SDecFuncionInline 
            {
              ArrayList<Statement> RESULT =null;
		ArrayList<Statement> genBlock = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		DecFuncion aDeexp = (DecFuncion)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 genBlock.add(aDeexp); RESULT=genBlock; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("BloqueGeneral",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // BloqueGeneral ::= BloqueGeneral SDecFuncion 
            {
              ArrayList<Statement> RESULT =null;
		ArrayList<Statement> genBlock = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		DecFuncion aDeexp = (DecFuncion)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 genBlock.add(aDeexp); RESULT=genBlock; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("BloqueGeneral",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // BloqueGeneral ::= BloqueGeneral SCallFun 
            {
              ArrayList<Statement> RESULT =null;
		ArrayList<Statement> genBlock = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Statement aDeexp = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 genBlock.add(aDeexp); RESULT=genBlock; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("BloqueGeneral",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // BloqueGeneral ::= BloqueGeneral SStruct 
            {
              ArrayList<Statement> RESULT =null;
		ArrayList<Statement> genBlock = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Statement aDeexp = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 genBlock.add(aDeexp); RESULT=genBlock; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("BloqueGeneral",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // BloqueGeneral ::= 
            {
              ArrayList<Statement> RESULT =null;
		 RESULT=new ArrayList<Statement>(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("BloqueGeneral",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SStruct ::= STRUCT IDEN LLAP AtribStruct LLCIERRE 
            {
              Statement RESULT =null;
		TokenValue name = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		ArrayList<Statement> atributos = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=new Struct(name.lexema, new Bloque(atributos)); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SStruct",11, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // AtribStruct ::= AtribStruct SAsign 
            {
              ArrayList<Statement> RESULT =null;
		ArrayList<Statement> bloqueatr = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Statement asign = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 bloqueatr.add(asign); RESULT=bloqueatr; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("AtribStruct",2, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // AtribStruct ::= AtribStruct SDec 
            {
              ArrayList<Statement> RESULT =null;
		ArrayList<Statement> bloqueatr = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Statement dec = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 bloqueatr.add(dec); RESULT=bloqueatr; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("AtribStruct",2, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // AtribStruct ::= AtribStruct SDecFuncion 
            {
              ArrayList<Statement> RESULT =null;
		ArrayList<Statement> bloqueatr = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		DecFuncion dec = (DecFuncion)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 bloqueatr.add(dec); RESULT=bloqueatr; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("AtribStruct",2, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // AtribStruct ::= 
            {
              ArrayList<Statement> RESULT =null;
		 RESULT=new ArrayList<Statement>(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("AtribStruct",2, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SBreak ::= BREAK PTOCOMA 
            {
              Statement RESULT =null;
		 RESULT=new Break(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SBreak",8, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SIf ::= IF PAP SExp4 PCIERRE LLAP S LLCIERRE SElsif 
            {
              Statement RESULT =null;
		E cond1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-5)).value;
		Bloque St = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		ArrayList<Elsif> arrayelsifs = (ArrayList<Elsif>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new IfElse(cond1, St, arrayelsifs); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SIf",6, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SIf ::= IF PAP SExp4 PCIERRE LLAP S LLCIERRE SElsif ELSE LLAP S LLCIERRE 
            {
              Statement RESULT =null;
		E cond2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-9)).value;
		Bloque St1 = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-6)).value;
		ArrayList<Elsif> arrayelsifs = (ArrayList<Elsif>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		Bloque St2 = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=new IfElse(cond2, St1, arrayelsifs, St2); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SIf",6, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SElsif ::= SElsif ELSIF PAP SExp4 PCIERRE LLAP S LLCIERRE 
            {
              ArrayList<Elsif> RESULT =null;
		ArrayList<Elsif> arrayelsifs = (ArrayList<Elsif>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-7)).value;
		E cond3 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		Bloque St3 = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 arrayelsifs.add(new Elsif(cond3, St3)); RESULT=arrayelsifs; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SElsif",26, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SElsif ::= 
            {
              ArrayList<Elsif> RESULT =null;
		 RESULT=new ArrayList<Elsif>(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SElsif",26, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SDec ::= Tipos IDEN PTOCOMA 
            {
              Statement RESULT =null;
		Tipo tipoAsig = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		TokenValue ident = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=new Dec(tipoAsig, ident.lexema); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SDec",5, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SAsign ::= Tipos IDEN IGUAL SExp4 PTOCOMA 
            {
              Statement RESULT =null;
		Tipo tipoAsig = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		TokenValue ident = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		E expterm = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=new Asign(tipoAsig, ident.lexema, expterm); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SAsign",4, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SFor ::= FOR PAP SExp4 PTOCOMA SExp4 PCIERRE LLAP S LLCIERRE 
            {
              Statement RESULT =null;
		E inicio = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-6)).value;
		E fin = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		Bloque statement = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=new For(inicio, fin, statement); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SFor",10, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SFor ::= FOR PAP SExp4 PTOCOMA SExp4 PTOCOMA SExp4 PCIERRE LLAP S LLCIERRE 
            {
              Statement RESULT =null;
		E inicio = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-8)).value;
		E fin = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-6)).value;
		E paso = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		Bloque statement = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=new For(inicio, fin, paso, statement); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SFor",10, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SWhile ::= WHILE PAP SExp4 PCIERRE LLAP S LLCIERRE 
            {
              Statement RESULT =null;
		E cond = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		Bloque instrucciones = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=new While(cond, instrucciones); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SWhile",7, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SDecFuncionInline ::= Tipos IDEN PAP SParams PCIERRE PTOCOMA 
            {
              DecFuncion RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-5)).value;
		TokenValue name = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		ArrayList<Parametro> params = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		 RESULT=new DecFuncion(tipo, name.lexema, params, null, null); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SDecFuncionInline",13, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SDecFuncionInline ::= TipoVoid IDEN PAP SParams PCIERRE PTOCOMA 
            {
              DecFuncion RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-5)).value;
		TokenValue name = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		ArrayList<Parametro> params = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		 RESULT=new DecFuncion(tipo, name.lexema, params, null, null); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SDecFuncionInline",13, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SDecFuncion ::= Tipos IDEN PAP SParams PCIERRE LLAP S SReturn LLCIERRE 
            {
              DecFuncion RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-8)).value;
		TokenValue name = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-7)).value;
		ArrayList<Parametro> params = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-5)).value;
		Bloque block = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Return ret = (Return)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=new DecFuncion(tipo, name.lexema, params, block, ret); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SDecFuncion",12, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SDecFuncion ::= TipoVoid IDEN PAP SParams PCIERRE LLAP S LLCIERRE 
            {
              DecFuncion RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-7)).value;
		TokenValue name = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-6)).value;
		ArrayList<Parametro> params = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		Bloque block = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=new DecFuncion(tipo, name.lexema, params, block, null); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SDecFuncion",12, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SReturn ::= RETURN SExp4 PTOCOMA 
            {
              Return RESULT =null;
		E expresion = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=new Return(expresion); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SReturn",3, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SCallFun ::= PRINT PAP SExp4 PCIERRE PTOCOMA 
            {
              Statement RESULT =null;
		E expresion = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		 RESULT=new Print(expresion, false); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SCallFun",9, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SCallFun ::= PRINTLN PAP SExp4 PCIERRE PTOCOMA 
            {
              Statement RESULT =null;
		E expresion = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		 RESULT=new Print(expresion, true); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SCallFun",9, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SCallFun ::= INPUT PAP IDEN PCIERRE PTOCOMA 
            {
              Statement RESULT =null;
		TokenValue expresion = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		 RESULT=new Input(new Ident(expresion.lexema)); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SCallFun",9, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SCallFun ::= MEMSPACE PAP SExp4 PCIERRE PTOCOMA 
            {
              Statement RESULT =null;
		E arg1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		 RESULT=new Memspace(arg1); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SCallFun",9, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SCallFun ::= FREE PAP IDEN PCIERRE PTOCOMA 
            {
              Statement RESULT =null;
		TokenValue arg1 = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		 RESULT=new Free(new Ident(arg1.lexema)); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SCallFun",9, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SCallFun ::= CallFun PTOCOMA 
            {
              Statement RESULT =null;
		E llamada = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=llamada; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SCallFun",9, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CallFun ::= IDEN PAP SParExp PCIERRE 
            {
              E RESULT =null;
		TokenValue ident = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		ArrayList<E> parexp = (ArrayList<E>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=new LlamadaFuncion(ident.lexema, parexp); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("CallFun",20, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SParExp ::= SParExp1 
            {
              ArrayList<E> RESULT =null;
		ArrayList<E> sparexp1 = (ArrayList<E>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=sparexp1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SParExp",29, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SParExp ::= 
            {
              ArrayList<E> RESULT =null;
		 RESULT=new ArrayList<E>(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SParExp",29, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SParExp1 ::= SParExp1 COMA SExp4 
            {
              ArrayList<E> RESULT =null;
		ArrayList<E> parlist = (ArrayList<E>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E expr = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 parlist.add(expr); RESULT=parlist; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SParExp1",30, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SParExp1 ::= SExp4 
            {
              ArrayList<E> RESULT =null;
		E expr = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new ArrayList<E>(Arrays.asList(expr)); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SParExp1",30, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SParams ::= SParamsNoVacio 
            {
              ArrayList<Parametro> RESULT =null;
		ArrayList<Parametro> params = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=params; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SParams",27, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SParams ::= 
            {
              ArrayList<Parametro> RESULT =null;
		 RESULT=new ArrayList<Parametro>(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SParams",27, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SParamsNoVacio ::= SParamsNoVacio COMA Tipos IDEN 
            {
              ArrayList<Parametro> RESULT =null;
		ArrayList<Parametro> params = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		TokenValue name = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 params.add(new Parametro(tipo, name.lexema)); RESULT=params; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SParamsNoVacio",28, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SParamsNoVacio ::= Tipos IDEN 
            {
              ArrayList<Parametro> RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		TokenValue name = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new ArrayList<Parametro>(Arrays.asList(new Parametro(tipo, name.lexema))); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SParamsNoVacio",28, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SExp4 ::= SExp3 IGDOBLE SExp3 
            {
              E RESULT =null;
		E expterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E expterm2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new EBin(expterm1, expterm2,KindE.ID); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp4",14, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SExp4 ::= SExp3 DISTINTO SExp3 
            {
              E RESULT =null;
		E expterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E expterm2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new EBin(expterm1, expterm2,KindE.DISTINTO); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp4",14, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SExp4 ::= SExp3 
            {
              E RESULT =null;
		E expterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=expterm1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp4",14, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SExp3 ::= SExp2 MENOR SExp2 
            {
              E RESULT =null;
		E expterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E expterm2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new EBin(expterm1, expterm2,KindE.MENOR); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp3",15, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SExp3 ::= SExp2 MAYOR SExp2 
            {
              E RESULT =null;
		E expterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E expterm2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new EBin(expterm1, expterm2,KindE.MAYOR); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp3",15, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SExp3 ::= SExp2 MENIGUAL SExp2 
            {
              E RESULT =null;
		E expterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E expterm2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new EBin(expterm1, expterm2,KindE.MENIGUAL); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp3",15, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SExp3 ::= SExp2 MAYIGUAL SExp2 
            {
              E RESULT =null;
		E expterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E expterm2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new EBin(expterm1, expterm2,KindE.MAYIGUAL); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp3",15, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SExp3 ::= SExp2 
            {
              E RESULT =null;
		E expterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=expterm1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp3",15, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SExp2 ::= SExp2 OR SExp1 
            {
              E RESULT =null;
		E expterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E expterm2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new EBin(expterm1, expterm2, KindE.OR); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp2",16, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SExp2 ::= SExp2 MAS SExp1 
            {
              E RESULT =null;
		E floatexp1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E expterm = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(floatexp1,expterm,KindE.SUMA); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp2",16, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SExp2 ::= SExp2 MENOS SExp1 
            {
              E RESULT =null;
		E floatexp1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E expterm = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(floatexp1,expterm,KindE.RESTA); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp2",16, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SExp2 ::= SExp1 
            {
              E RESULT =null;
		E expterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=expterm1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp2",16, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SExp1 ::= SExp1 AND SExp0 
            {
              E RESULT =null;
		E expterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E expterm2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new EBin(expterm1, expterm2, KindE.AND); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp1",17, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SExp1 ::= SExp1 POR SExp0 
            {
              E RESULT =null;
		E expterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E expfact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(expterm1,expfact, KindE.MUL); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp1",17, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // SExp1 ::= SExp1 DIV SExp0 
            {
              E RESULT =null;
		E expterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E expfact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(expterm1,expfact, KindE.DIV); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp1",17, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SExp1 ::= SExp1 MOD SExp0 
            {
              E RESULT =null;
		E aDeterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E aDefact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(aDeterm1,aDefact, KindE.MOD); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp1",17, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // SExp1 ::= SExp0 
            {
              E RESULT =null;
		E expterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=expterm1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp1",17, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // SExp0 ::= Exp POT SExp0 
            {
              E RESULT =null;
		E expfact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E expterm2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(expfact,expterm2, KindE.POT); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp0",18, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // SExp0 ::= NOT SExp0 
            {
              E RESULT =null;
		E boolVal = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new Not(boolVal); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp0",18, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // SExp0 ::= Exp 
            {
              E RESULT =null;
		E expterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=expterm1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp0",18, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Exp ::= ENT 
            {
              E RESULT =null;
		TokenValue numEnt = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new Ent(numEnt.lexema); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp",19, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Exp ::= MENOS ENT 
            {
              E RESULT =null;
		TokenValue numEnt = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new Ent("-" + numEnt.lexema); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp",19, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Exp ::= REAL 
            {
              E RESULT =null;
		TokenValue numReal = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new Real(numReal.lexema); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp",19, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Exp ::= MENOS REAL 
            {
              E RESULT =null;
		TokenValue numReal = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new Real("-" + numReal.lexema); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp",19, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Exp ::= TRUE 
            {
              E RESULT =null;
		Object trueterm = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new True(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp",19, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Exp ::= FALSE 
            {
              E RESULT =null;
		Object falseterm = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new False(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp",19, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Exp ::= IDEN 
            {
              E RESULT =null;
		TokenValue ident = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new Ident(ident.lexema); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp",19, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Exp ::= IdenOps 
            {
              E RESULT =null;
		E idenops = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=idenops; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp",19, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Exp ::= PAP SExp4 PCIERRE 
            {
              E RESULT =null;
		E expterm = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=expterm; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp",19, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Exp ::= CallFun 
            {
              E RESULT =null;
		E callfun = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=callfun; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp",19, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // IdenOps ::= POR IDEN 
            {
              E RESULT =null;
		TokenValue iden = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("IdenOps",21, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // IdenOps ::= IDEN FLECHA IdenOps 
            {
              E RESULT =null;
		TokenValue iden = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E idenops = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("IdenOps",21, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // TipoVoid ::= TipoVoid POR 
            {
              Tipo RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=new Puntero(tipo); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("TipoVoid",25, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // TipoVoid ::= VOID 
            {
              Tipo RESULT =null;
		 RESULT= new Tipo(TipoEnum.VOID); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("TipoVoid",25, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Tipos ::= TipoBas 
            {
              Tipo RESULT =null;
		Tipo tipobas = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=tipobas; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Tipos",24, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Tipos ::= TipoStruct 
            {
              Tipo RESULT =null;
		Tipo tipostruct = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=tipostruct; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Tipos",24, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // TipoBas ::= TipoBas POR 
            {
              Tipo RESULT =null;
		Tipo tipobas = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=new Puntero(tipobas); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("TipoBas",22, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // TipoBas ::= BOOL 
            {
              Tipo RESULT =null;
		 RESULT=new Tipo(TipoEnum.BOOL); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("TipoBas",22, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // TipoBas ::= INT 
            {
              Tipo RESULT =null;
		 RESULT=new Tipo(TipoEnum.INT); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("TipoBas",22, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // TipoBas ::= FLOAT 
            {
              Tipo RESULT =null;
		 RESULT=new Tipo(TipoEnum.FLOAT); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("TipoBas",22, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // TipoStruct ::= TipoStruct POR 
            {
              Tipo RESULT =null;
		Tipo ident = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=new Puntero(ident); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("TipoStruct",23, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // TipoStruct ::= IDEN 
            {
              Tipo RESULT =null;
		TokenValue ident = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new TipoStruct(ident.lexema); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("TipoStruct",23, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ConstructorASTExp$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ConstructorASTExp$do_action(
    int                        CUP$ConstructorASTExp$act_num,
    java_cup.runtime.lr_parser CUP$ConstructorASTExp$parser,
    java.util.Stack            CUP$ConstructorASTExp$stack,
    int                        CUP$ConstructorASTExp$top)
    throws java.lang.Exception
    {
              return CUP$ConstructorASTExp$do_action_part00000000(
                               CUP$ConstructorASTExp$act_num,
                               CUP$ConstructorASTExp$parser,
                               CUP$ConstructorASTExp$stack,
                               CUP$ConstructorASTExp$top);
    }
}

