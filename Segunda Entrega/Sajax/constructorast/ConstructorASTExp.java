
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Fri Apr 14 18:03:54 CEST 2023
//----------------------------------------------------

package constructorast;

import java_cup.runtime.*;
import sajax_lex.AnalizadorLexicoSajax;
import sajax_lex.UnidadLexica;
import sajax_lex.TokenValue;
import errors.GestionErroresTiny;
import ast.*;
import java.util.ArrayList;
import java.util.Arrays;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Fri Apr 14 18:03:54 CEST 2023
  */
public class ConstructorASTExp extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ConstructorASTExp() {super();}

  /** Constructor which sets the default scanner. */
  public ConstructorASTExp(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ConstructorASTExp(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\147\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\004" +
    "\000\002\003\004\000\002\003\004\000\002\003\004\000" +
    "\002\003\004\000\002\003\004\000\002\003\004\000\002" +
    "\003\004\000\002\003\002\000\002\017\007\000\002\004" +
    "\004\000\002\004\004\000\002\004\004\000\002\004\002" +
    "\000\002\014\004\000\002\011\012\000\002\011\016\000" +
    "\002\041\012\000\002\041\002\000\002\010\005\000\002" +
    "\007\007\000\002\007\006\000\002\016\013\000\002\016" +
    "\015\000\002\012\011\000\002\013\011\000\002\013\012" +
    "\000\002\005\002\000\002\005\007\000\002\020\005\000" +
    "\002\022\010\000\002\022\010\000\002\021\013\000\002" +
    "\021\012\000\002\006\005\000\002\015\007\000\002\015" +
    "\007\000\002\015\007\000\002\015\007\000\002\015\007" +
    "\000\002\015\004\000\002\031\006\000\002\044\003\000" +
    "\002\044\002\000\002\045\005\000\002\045\003\000\002" +
    "\042\003\000\002\042\002\000\002\043\007\000\002\043" +
    "\006\000\002\043\005\000\002\043\004\000\002\023\005" +
    "\000\002\023\005\000\002\023\003\000\002\024\005\000" +
    "\002\024\005\000\002\024\005\000\002\024\005\000\002" +
    "\024\003\000\002\025\005\000\002\025\005\000\002\025" +
    "\005\000\002\025\003\000\002\026\005\000\002\026\005" +
    "\000\002\026\005\000\002\026\005\000\002\026\003\000" +
    "\002\027\005\000\002\027\004\000\002\027\003\000\002" +
    "\030\003\000\002\030\004\000\002\030\003\000\002\030" +
    "\004\000\002\030\003\000\002\030\003\000\002\030\005" +
    "\000\002\030\003\000\002\030\003\000\002\034\004\000" +
    "\002\034\003\000\002\033\005\000\002\033\005\000\002" +
    "\033\006\000\002\033\003\000\002\032\003\000\002\040" +
    "\004\000\002\040\003\000\002\037\003\000\002\037\003" +
    "\000\002\035\004\000\002\035\003\000\002\035\003\000" +
    "\002\035\003\000\002\036\004\000\002\036\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\356\000\046\002\ufff4\011\ufff4\027\ufff4\030\ufff4\031" +
    "\ufff4\033\ufff4\037\ufff4\042\ufff4\045\ufff4\046\ufff4\047\ufff4" +
    "\050\ufff4\051\ufff4\052\ufff4\053\ufff4\054\ufff4\055\ufff4\071" +
    "\ufff4\001\002\000\052\002\001\011\012\027\043\030\020" +
    "\031\035\032\001\033\046\035\001\037\030\042\036\045" +
    "\034\046\050\047\052\050\016\051\044\052\023\053\051" +
    "\054\017\055\014\071\042\001\002\000\004\002\006\001" +
    "\002\000\004\002\000\001\002\000\010\011\360\066\uffa1" +
    "\071\uffa1\001\002\000\056\002\ufff5\011\ufff5\027\ufff5\030" +
    "\ufff5\031\ufff5\032\ufff5\033\ufff5\035\ufff5\037\ufff5\042\ufff5" +
    "\043\ufff5\044\ufff5\045\ufff5\046\ufff5\047\ufff5\050\ufff5\051" +
    "\ufff5\052\ufff5\053\ufff5\054\ufff5\055\ufff5\071\ufff5\001\002" +
    "\000\056\002\ufff6\011\ufff6\027\ufff6\030\ufff6\031\ufff6\032" +
    "\ufff6\033\ufff6\035\ufff6\037\ufff6\042\ufff6\043\ufff6\044\ufff6" +
    "\045\ufff6\046\ufff6\047\ufff6\050\ufff6\051\ufff6\052\ufff6\053" +
    "\ufff6\054\ufff6\055\ufff6\071\ufff6\001\002\000\006\011\012" +
    "\071\324\001\002\000\056\002\ufff9\011\ufff9\027\ufff9\030" +
    "\ufff9\031\ufff9\032\ufff9\033\ufff9\035\ufff9\037\ufff9\042\ufff9" +
    "\043\ufff9\044\ufff9\045\ufff9\046\ufff9\047\ufff9\050\ufff9\051" +
    "\ufff9\052\ufff9\053\ufff9\054\ufff9\055\ufff9\071\ufff9\001\002" +
    "\000\004\025\353\001\002\000\056\002\ufffe\011\ufffe\027" +
    "\ufffe\030\ufffe\031\ufffe\032\ufffe\033\ufffe\035\ufffe\037\ufffe" +
    "\042\ufffe\043\ufffe\044\ufffe\045\ufffe\046\ufffe\047\ufffe\050" +
    "\ufffe\051\ufffe\052\ufffe\053\ufffe\054\ufffe\055\ufffe\071\ufffe" +
    "\001\002\000\010\011\uff9e\066\uff9e\071\uff9e\001\002\000" +
    "\004\025\347\001\002\000\004\025\331\001\002\000\056" +
    "\002\ufffb\011\ufffb\027\ufffb\030\ufffb\031\ufffb\032\ufffb\033" +
    "\ufffb\035\ufffb\037\ufffb\042\ufffb\043\ufffb\044\ufffb\045\ufffb" +
    "\046\ufffb\047\ufffb\050\ufffb\051\ufffb\052\ufffb\053\ufffb\054" +
    "\ufffb\055\ufffb\071\ufffb\001\002\000\056\002\uffff\011\uffff" +
    "\027\uffff\030\uffff\031\uffff\032\uffff\033\uffff\035\uffff\037" +
    "\uffff\042\uffff\043\uffff\044\uffff\045\uffff\046\uffff\047\uffff" +
    "\050\uffff\051\uffff\052\uffff\053\uffff\054\uffff\055\uffff\071" +
    "\uffff\001\002\000\010\011\uff9f\066\uff9f\071\uff9f\001\002" +
    "\000\004\023\326\001\002\000\056\004\uffaa\005\uffaa\007" +
    "\uffaa\010\uffaa\011\uffaa\012\uffaa\013\uffaa\014\uffaa\015\uffaa" +
    "\016\uffaa\017\uffaa\020\uffaa\021\uffaa\022\uffaa\023\uffaa\024" +
    "\uffaa\026\uffaa\036\uffaa\057\320\060\uffaa\061\316\062\317" +
    "\001\002\000\056\004\uffa6\005\uffa6\007\uffa6\010\uffa6\011" +
    "\uffa6\012\uffa6\013\uffa6\014\uffa6\015\uffa6\016\uffa6\017\uffa6" +
    "\020\uffa6\021\uffa6\022\uffa6\023\uffa6\024\uffa6\026\uffa6\036" +
    "\uffa6\057\uffa6\060\uffa6\061\uffa6\062\uffa6\001\002\000\006" +
    "\011\171\071\311\001\002\000\004\025\267\001\002\000" +
    "\056\002\ufffd\011\ufffd\027\ufffd\030\ufffd\031\ufffd\032\ufffd" +
    "\033\ufffd\035\ufffd\037\ufffd\042\ufffd\043\ufffd\044\ufffd\045" +
    "\ufffd\046\ufffd\047\ufffd\050\ufffd\051\ufffd\052\ufffd\053\ufffd" +
    "\054\ufffd\055\ufffd\071\ufffd\001\002\000\056\002\ufffc\011" +
    "\ufffc\027\ufffc\030\ufffc\031\ufffc\032\ufffc\033\ufffc\035\ufffc" +
    "\037\ufffc\042\ufffc\043\ufffc\044\ufffc\045\ufffc\046\ufffc\047" +
    "\ufffc\050\ufffc\051\ufffc\052\ufffc\053\ufffc\054\ufffc\055\ufffc" +
    "\071\ufffc\001\002\000\004\036\266\001\002\000\004\036" +
    "\265\001\002\000\006\011\uffa3\071\uffa3\001\002\000\004" +
    "\025\246\001\002\000\056\002\ufff7\011\ufff7\027\ufff7\030" +
    "\ufff7\031\ufff7\032\ufff7\033\ufff7\035\ufff7\037\ufff7\042\ufff7" +
    "\043\ufff7\044\ufff7\045\ufff7\046\ufff7\047\ufff7\050\ufff7\051" +
    "\ufff7\052\ufff7\053\ufff7\054\ufff7\055\ufff7\071\ufff7\001\002" +
    "\000\004\071\241\001\002\000\056\002\ufffa\011\ufffa\027" +
    "\ufffa\030\ufffa\031\ufffa\032\ufffa\033\ufffa\035\ufffa\037\ufffa" +
    "\042\ufffa\043\ufffa\044\ufffa\045\ufffa\046\ufffa\047\ufffa\050" +
    "\ufffa\051\ufffa\052\ufffa\053\ufffa\054\ufffa\055\ufffa\071\ufffa" +
    "\001\002\000\020\011\uff9b\023\uffa5\025\140\057\uffa5\061" +
    "\uffa5\062\uffa5\071\uff9b\001\002\000\004\025\233\001\002" +
    "\000\010\011\uff9d\066\uff9d\071\uff9d\001\002\000\010\011" +
    "\232\066\uffa2\071\uffa2\001\002\000\004\071\156\001\002" +
    "\000\056\002\ufff8\011\ufff8\027\ufff8\030\ufff8\031\ufff8\032" +
    "\ufff8\033\ufff8\035\ufff8\037\ufff8\042\ufff8\043\ufff8\044\ufff8" +
    "\045\ufff8\046\ufff8\047\ufff8\050\ufff8\051\ufff8\052\ufff8\053" +
    "\ufff8\054\ufff8\055\ufff8\071\ufff8\001\002\000\004\025\152" +
    "\001\002\000\004\025\057\001\002\000\004\025\053\001" +
    "\002\000\004\071\054\001\002\000\004\026\055\001\002" +
    "\000\004\036\056\001\002\000\056\002\uffd5\011\uffd5\027" +
    "\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\035\uffd5\037\uffd5" +
    "\042\uffd5\043\uffd5\044\uffd5\045\uffd5\046\uffd5\047\uffd5\050" +
    "\uffd5\051\uffd5\052\uffd5\053\uffd5\054\uffd5\055\uffd5\071\uffd5" +
    "\001\002\000\024\006\061\010\060\011\012\025\067\064" +
    "\063\065\070\067\075\070\072\071\062\001\002\000\006" +
    "\067\151\070\150\001\002\000\024\006\061\010\060\011" +
    "\012\025\067\064\063\065\070\067\075\070\072\071\062" +
    "\001\002\000\056\004\uffa5\005\uffa5\007\uffa5\010\uffa5\011" +
    "\uffa5\012\uffa5\013\uffa5\014\uffa5\015\uffa5\016\uffa5\017\uffa5" +
    "\020\uffa5\021\uffa5\022\uffa5\024\uffa5\025\140\026\uffa5\036" +
    "\uffa5\057\uffa5\060\uffa5\061\uffa5\062\uffa5\001\002\000\046" +
    "\004\uffb0\005\uffb0\007\uffb0\010\uffb0\011\uffb0\012\uffb0\013" +
    "\uffb0\014\uffb0\015\uffb0\016\uffb0\017\uffb0\020\uffb0\021\uffb0" +
    "\022\uffb0\024\uffb0\026\uffb0\036\uffb0\060\uffb0\001\002\000" +
    "\046\004\uffac\005\uffac\007\uffac\010\uffac\011\uffac\012\uffac" +
    "\013\uffac\014\uffac\015\uffac\016\uffac\017\uffac\020\uffac\021" +
    "\uffac\022\uffac\024\uffac\026\uffac\036\uffac\060\uffac\001\002" +
    "\000\046\004\uffad\005\uffad\007\uffad\010\uffad\011\uffad\012" +
    "\uffad\013\uffad\014\uffad\015\uffad\016\uffad\017\uffad\020\uffad" +
    "\021\uffad\022\uffad\024\uffad\026\uffad\036\uffad\060\uffad\001" +
    "\002\000\044\004\uffb5\005\uffb5\007\uffb5\010\uffb5\011\uffb5" +
    "\012\uffb5\013\136\014\uffb5\015\uffb5\016\uffb5\017\uffb5\020" +
    "\uffb5\021\uffb5\022\uffb5\024\uffb5\026\uffb5\036\uffb5\001\002" +
    "\000\024\006\061\010\060\011\012\025\067\064\063\065" +
    "\070\067\075\070\072\071\062\001\002\000\046\004\uffaf" +
    "\005\uffaf\007\uffaf\010\uffaf\011\uffaf\012\uffaf\013\uffaf\014" +
    "\uffaf\015\uffaf\016\uffaf\017\uffaf\020\uffaf\021\uffaf\022\uffaf" +
    "\024\uffaf\026\uffaf\036\uffaf\060\uffaf\001\002\000\004\026" +
    "\132\001\002\000\046\004\uffb2\005\uffb2\007\uffb2\010\uffb2" +
    "\011\uffb2\012\uffb2\013\uffb2\014\uffb2\015\uffb2\016\uffb2\017" +
    "\uffb2\020\uffb2\021\uffb2\022\uffb2\024\uffb2\026\uffb2\036\uffb2" +
    "\060\uffb2\001\002\000\014\015\126\016\127\024\uffc6\026" +
    "\uffc6\036\uffc6\001\002\000\032\004\116\007\110\010\112" +
    "\015\uffc1\016\uffc1\017\114\020\115\021\113\022\111\024" +
    "\uffc1\026\uffc1\036\uffc1\001\002\000\046\004\uffb4\005\uffb4" +
    "\007\uffb4\010\uffb4\011\uffb4\012\uffb4\013\uffb4\014\uffb4\015" +
    "\uffb4\016\uffb4\017\uffb4\020\uffb4\021\uffb4\022\uffb4\024\uffb4" +
    "\026\uffb4\036\uffb4\060\uffb4\001\002\000\042\004\uffbd\005" +
    "\101\007\uffbd\010\uffbd\011\103\012\102\014\100\015\uffbd" +
    "\016\uffbd\017\uffbd\020\uffbd\021\uffbd\022\uffbd\024\uffbd\026" +
    "\uffbd\036\uffbd\001\002\000\042\004\uffb8\005\uffb8\007\uffb8" +
    "\010\uffb8\011\uffb8\012\uffb8\014\uffb8\015\uffb8\016\uffb8\017" +
    "\uffb8\020\uffb8\021\uffb8\022\uffb8\024\uffb8\026\uffb8\036\uffb8" +
    "\001\002\000\024\006\061\010\060\011\012\025\067\064" +
    "\063\065\070\067\075\070\072\071\062\001\002\000\024" +
    "\006\061\010\060\011\012\025\067\064\063\065\070\067" +
    "\075\070\072\071\062\001\002\000\024\006\061\010\060" +
    "\011\012\025\067\064\063\065\070\067\075\070\072\071" +
    "\062\001\002\000\024\006\061\010\060\011\012\025\067" +
    "\064\063\065\070\067\075\070\072\071\062\001\002\000" +
    "\042\004\uffbb\005\uffbb\007\uffbb\010\uffbb\011\uffbb\012\uffbb" +
    "\014\uffbb\015\uffbb\016\uffbb\017\uffbb\020\uffbb\021\uffbb\022" +
    "\uffbb\024\uffbb\026\uffbb\036\uffbb\001\002\000\042\004\uffba" +
    "\005\uffba\007\uffba\010\uffba\011\uffba\012\uffba\014\uffba\015" +
    "\uffba\016\uffba\017\uffba\020\uffba\021\uffba\022\uffba\024\uffba" +
    "\026\uffba\036\uffba\001\002\000\042\004\uffbc\005\uffbc\007" +
    "\uffbc\010\uffbc\011\uffbc\012\uffbc\014\uffbc\015\uffbc\016\uffbc" +
    "\017\uffbc\020\uffbc\021\uffbc\022\uffbc\024\uffbc\026\uffbc\036" +
    "\uffbc\001\002\000\042\004\uffb9\005\uffb9\007\uffb9\010\uffb9" +
    "\011\uffb9\012\uffb9\014\uffb9\015\uffb9\016\uffb9\017\uffb9\020" +
    "\uffb9\021\uffb9\022\uffb9\024\uffb9\026\uffb9\036\uffb9\001\002" +
    "\000\024\006\061\010\060\011\012\025\067\064\063\065" +
    "\070\067\075\070\072\071\062\001\002\000\024\006\061" +
    "\010\060\011\012\025\067\064\063\065\070\067\075\070" +
    "\072\071\062\001\002\000\024\006\061\010\060\011\012" +
    "\025\067\064\063\065\070\067\075\070\072\071\062\001" +
    "\002\000\024\006\061\010\060\011\012\025\067\064\063" +
    "\065\070\067\075\070\072\071\062\001\002\000\024\006" +
    "\061\010\060\011\012\025\067\064\063\065\070\067\075" +
    "\070\072\071\062\001\002\000\024\006\061\010\060\011" +
    "\012\025\067\064\063\065\070\067\075\070\072\071\062" +
    "\001\002\000\024\006\061\010\060\011\012\025\067\064" +
    "\063\065\070\067\075\070\072\071\062\001\002\000\042" +
    "\004\uffc0\005\101\007\uffc0\010\uffc0\011\103\012\102\014" +
    "\100\015\uffc0\016\uffc0\017\uffc0\020\uffc0\021\uffc0\022\uffc0" +
    "\024\uffc0\026\uffc0\036\uffc0\001\002\000\022\004\116\007" +
    "\110\010\112\015\uffc4\016\uffc4\024\uffc4\026\uffc4\036\uffc4" +
    "\001\002\000\022\004\116\007\110\010\112\015\uffc5\016" +
    "\uffc5\024\uffc5\026\uffc5\036\uffc5\001\002\000\022\004\116" +
    "\007\110\010\112\015\uffc3\016\uffc3\024\uffc3\026\uffc3\036" +
    "\uffc3\001\002\000\042\004\uffbe\005\101\007\uffbe\010\uffbe" +
    "\011\103\012\102\014\100\015\uffbe\016\uffbe\017\uffbe\020" +
    "\uffbe\021\uffbe\022\uffbe\024\uffbe\026\uffbe\036\uffbe\001\002" +
    "\000\022\004\116\007\110\010\112\015\uffc2\016\uffc2\024" +
    "\uffc2\026\uffc2\036\uffc2\001\002\000\042\004\uffbf\005\101" +
    "\007\uffbf\010\uffbf\011\103\012\102\014\100\015\uffbf\016" +
    "\uffbf\017\uffbf\020\uffbf\021\uffbf\022\uffbf\024\uffbf\026\uffbf" +
    "\036\uffbf\001\002\000\024\006\061\010\060\011\012\025" +
    "\067\064\063\065\070\067\075\070\072\071\062\001\002" +
    "\000\024\006\061\010\060\011\012\025\067\064\063\065" +
    "\070\067\075\070\072\071\062\001\002\000\010\024\uffc7" +
    "\026\uffc7\036\uffc7\001\002\000\010\024\uffc8\026\uffc8\036" +
    "\uffc8\001\002\000\004\036\133\001\002\000\056\002\uffd9" +
    "\011\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9\035" +
    "\uffd9\037\uffd9\042\uffd9\043\uffd9\044\uffd9\045\uffd9\046\uffd9" +
    "\047\uffd9\050\uffd9\051\uffd9\052\uffd9\053\uffd9\054\uffd9\055" +
    "\uffd9\071\uffd9\001\002\000\004\026\135\001\002\000\046" +
    "\004\uffae\005\uffae\007\uffae\010\uffae\011\uffae\012\uffae\013" +
    "\uffae\014\uffae\015\uffae\016\uffae\017\uffae\020\uffae\021\uffae" +
    "\022\uffae\024\uffae\026\uffae\036\uffae\060\uffae\001\002\000" +
    "\024\006\061\010\060\011\012\025\067\064\063\065\070" +
    "\067\075\070\072\071\062\001\002\000\042\004\uffb7\005" +
    "\uffb7\007\uffb7\010\uffb7\011\uffb7\012\uffb7\014\uffb7\015\uffb7" +
    "\016\uffb7\017\uffb7\020\uffb7\021\uffb7\022\uffb7\024\uffb7\026" +
    "\uffb7\036\uffb7\001\002\000\026\006\061\010\060\011\012" +
    "\025\067\026\uffd1\064\063\065\070\067\075\070\072\071" +
    "\062\001\002\000\006\024\145\026\uffd2\001\002\000\004" +
    "\026\144\001\002\000\006\024\uffcf\026\uffcf\001\002\000" +
    "\046\004\uffd3\005\uffd3\007\uffd3\010\uffd3\011\uffd3\012\uffd3" +
    "\013\uffd3\014\uffd3\015\uffd3\016\uffd3\017\uffd3\020\uffd3\021" +
    "\uffd3\022\uffd3\024\uffd3\026\uffd3\036\uffd3\060\uffd3\001\002" +
    "\000\024\006\061\010\060\011\012\025\067\064\063\065" +
    "\070\067\075\070\072\071\062\001\002\000\006\024\uffd0" +
    "\026\uffd0\001\002\000\042\004\uffb6\005\uffb6\007\uffb6\010" +
    "\uffb6\011\uffb6\012\uffb6\014\uffb6\015\uffb6\016\uffb6\017\uffb6" +
    "\020\uffb6\021\uffb6\022\uffb6\024\uffb6\026\uffb6\036\uffb6\001" +
    "\002\000\046\004\uffb1\005\uffb1\007\uffb1\010\uffb1\011\uffb1" +
    "\012\uffb1\013\uffb1\014\uffb1\015\uffb1\016\uffb1\017\uffb1\020" +
    "\uffb1\021\uffb1\022\uffb1\024\uffb1\026\uffb1\036\uffb1\060\uffb1" +
    "\001\002\000\046\004\uffb3\005\uffb3\007\uffb3\010\uffb3\011" +
    "\uffb3\012\uffb3\013\uffb3\014\uffb3\015\uffb3\016\uffb3\017\uffb3" +
    "\020\uffb3\021\uffb3\022\uffb3\024\uffb3\026\uffb3\036\uffb3\060" +
    "\uffb3\001\002\000\024\006\061\010\060\011\012\025\067" +
    "\064\063\065\070\067\075\070\072\071\062\001\002\000" +
    "\004\026\154\001\002\000\004\036\155\001\002\000\056" +
    "\002\uffd6\011\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033" +
    "\uffd6\035\uffd6\037\uffd6\042\uffd6\043\uffd6\044\uffd6\045\uffd6" +
    "\046\uffd6\047\uffd6\050\uffd6\051\uffd6\052\uffd6\053\uffd6\054" +
    "\uffd6\055\uffd6\071\uffd6\001\002\000\004\034\157\001\002" +
    "\000\020\011\uffef\031\uffef\035\uffef\050\uffef\051\uffef\052" +
    "\uffef\071\uffef\001\002\000\020\011\012\031\035\035\164" +
    "\050\016\051\044\052\023\071\165\001\002\000\004\071" +
    "\213\001\002\000\020\011\ufff2\031\ufff2\035\ufff2\050\ufff2" +
    "\051\ufff2\052\ufff2\071\ufff2\001\002\000\020\011\ufff0\031" +
    "\ufff0\035\ufff0\050\ufff0\051\ufff0\052\ufff0\071\ufff0\001\002" +
    "\000\056\002\ufff3\011\ufff3\027\ufff3\030\ufff3\031\ufff3\032" +
    "\ufff3\033\ufff3\035\ufff3\037\ufff3\042\ufff3\043\ufff3\044\ufff3" +
    "\045\ufff3\046\ufff3\047\ufff3\050\ufff3\051\ufff3\052\ufff3\053" +
    "\ufff3\054\ufff3\055\ufff3\071\ufff3\001\002\000\016\011\uff9b" +
    "\023\uffa5\057\uffa5\061\uffa5\062\uffa5\071\uff9b\001\002\000" +
    "\006\011\171\071\170\001\002\000\020\011\ufff1\031\ufff1" +
    "\035\ufff1\050\ufff1\051\ufff1\052\ufff1\071\ufff1\001\002\000" +
    "\004\025\172\001\002\000\006\011\uffa4\071\uffa4\001\002" +
    "\000\014\026\uffcd\050\016\051\044\052\023\071\174\001" +
    "\002\000\006\066\210\071\211\001\002\000\010\011\uff9b" +
    "\066\uff9b\071\uff9b\001\002\000\006\024\203\026\uffce\001" +
    "\002\000\004\026\177\001\002\000\004\034\200\001\002" +
    "\000\046\011\ufff4\027\ufff4\030\ufff4\031\ufff4\033\ufff4\035" +
    "\ufff4\037\ufff4\042\ufff4\045\ufff4\046\ufff4\047\ufff4\050\ufff4" +
    "\051\ufff4\052\ufff4\053\ufff4\054\ufff4\055\ufff4\071\ufff4\001" +
    "\002\000\004\035\202\001\002\000\056\002\uffdb\011\uffdb" +
    "\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\035\uffdb\037" +
    "\uffdb\042\uffdb\043\uffdb\044\uffdb\045\uffdb\046\uffdb\047\uffdb" +
    "\050\uffdb\051\uffdb\052\uffdb\053\uffdb\054\uffdb\055\uffdb\071" +
    "\uffdb\001\002\000\012\050\016\051\044\052\023\071\174" +
    "\001\002\000\006\066\205\071\206\001\002\000\004\071" +
    "\207\001\002\000\006\024\uffcb\026\uffcb\001\002\000\006" +
    "\024\uffcc\026\uffcc\001\002\000\004\071\212\001\002\000" +
    "\006\024\uffc9\026\uffc9\001\002\000\006\024\uffca\026\uffca" +
    "\001\002\000\010\023\215\025\216\036\214\001\002\000" +
    "\056\002\uffe9\011\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9" +
    "\033\uffe9\035\uffe9\037\uffe9\042\uffe9\043\uffe9\044\uffe9\045" +
    "\uffe9\046\uffe9\047\uffe9\050\uffe9\051\uffe9\052\uffe9\053\uffe9" +
    "\054\uffe9\055\uffe9\071\uffe9\001\002\000\024\006\061\010" +
    "\060\011\012\025\067\064\063\065\070\067\075\070\072" +
    "\071\062\001\002\000\014\026\uffcd\050\016\051\044\052" +
    "\023\071\174\001\002\000\004\026\220\001\002\000\004" +
    "\034\221\001\002\000\046\011\ufff4\027\ufff4\030\ufff4\031" +
    "\ufff4\032\ufff4\033\ufff4\037\ufff4\042\ufff4\045\ufff4\046\ufff4" +
    "\047\ufff4\050\ufff4\051\ufff4\052\ufff4\053\ufff4\054\ufff4\055" +
    "\ufff4\071\ufff4\001\002\000\004\032\223\001\002\000\024" +
    "\006\061\010\060\011\012\025\067\064\063\065\070\067" +
    "\075\070\072\071\062\001\002\000\004\035\225\001\002" +
    "\000\056\002\uffdc\011\uffdc\027\uffdc\030\uffdc\031\uffdc\032" +
    "\uffdc\033\uffdc\035\uffdc\037\uffdc\042\uffdc\043\uffdc\044\uffdc" +
    "\045\uffdc\046\uffdc\047\uffdc\050\uffdc\051\uffdc\052\uffdc\053" +
    "\uffdc\054\uffdc\055\uffdc\071\uffdc\001\002\000\004\036\227" +
    "\001\002\000\004\035\uffda\001\002\000\004\036\231\001" +
    "\002\000\056\002\uffe8\011\uffe8\027\uffe8\030\uffe8\031\uffe8" +
    "\032\uffe8\033\uffe8\035\uffe8\037\uffe8\042\uffe8\043\uffe8\044" +
    "\uffe8\045\uffe8\046\uffe8\047\uffe8\050\uffe8\051\uffe8\052\uffe8" +
    "\053\uffe8\054\uffe8\055\uffe8\071\uffe8\001\002\000\010\011" +
    "\uffa0\066\uffa0\071\uffa0\001\002\000\024\006\061\010\060" +
    "\011\012\025\067\064\063\065\070\067\075\070\072\071" +
    "\062\001\002\000\004\026\235\001\002\000\004\034\236" +
    "\001\002\000\046\011\ufff4\027\ufff4\030\ufff4\031\ufff4\033" +
    "\ufff4\035\ufff4\037\ufff4\042\ufff4\045\ufff4\046\ufff4\047\ufff4" +
    "\050\ufff4\051\ufff4\052\ufff4\053\ufff4\054\ufff4\055\ufff4\071" +
    "\ufff4\001\002\000\004\035\240\001\002\000\056\002\uffe4" +
    "\011\uffe4\027\uffe4\030\uffe4\031\uffe4\032\uffe4\033\uffe4\035" +
    "\uffe4\037\uffe4\042\uffe4\043\uffe4\044\uffe4\045\uffe4\046\uffe4" +
    "\047\uffe4\050\uffe4\051\uffe4\052\uffe4\053\uffe4\054\uffe4\055" +
    "\uffe4\071\uffe4\001\002\000\010\023\215\025\242\036\214" +
    "\001\002\000\014\026\uffcd\050\016\051\044\052\023\071" +
    "\174\001\002\000\004\026\244\001\002\000\006\034\221" +
    "\036\245\001\002\000\056\002\uffde\011\uffde\027\uffde\030" +
    "\uffde\031\uffde\032\uffde\033\uffde\035\uffde\037\uffde\042\uffde" +
    "\043\uffde\044\uffde\045\uffde\046\uffde\047\uffde\050\uffde\051" +
    "\uffde\052\uffde\053\uffde\054\uffde\055\uffde\071\uffde\001\002" +
    "\000\024\006\061\010\060\011\012\025\067\064\063\065" +
    "\070\067\075\070\072\071\062\001\002\000\004\026\250" +
    "\001\002\000\004\034\251\001\002\000\010\035\uffe1\043" +
    "\uffe1\044\uffe1\001\002\000\010\035\255\043\256\044\253" +
    "\001\002\000\004\063\263\001\002\000\004\035\262\001" +
    "\002\000\056\002\uffe3\011\uffe3\027\uffe3\030\uffe3\031\uffe3" +
    "\032\uffe3\033\uffe3\035\uffe3\037\uffe3\042\uffe3\043\uffe3\044" +
    "\uffe3\045\uffe3\046\uffe3\047\uffe3\050\uffe3\051\uffe3\052\uffe3" +
    "\053\uffe3\054\uffe3\055\uffe3\071\uffe3\001\002\000\004\067" +
    "\257\001\002\000\004\063\260\001\002\000\052\011\ufff4" +
    "\027\ufff4\030\ufff4\031\ufff4\033\ufff4\035\ufff4\037\ufff4\042" +
    "\ufff4\043\ufff4\044\ufff4\045\ufff4\046\ufff4\047\ufff4\050\ufff4" +
    "\051\ufff4\052\ufff4\053\ufff4\054\ufff4\055\ufff4\071\ufff4\001" +
    "\002\000\052\011\012\027\043\030\020\031\035\033\046" +
    "\035\uffe0\037\030\042\036\043\uffe0\044\uffe0\045\034\046" +
    "\050\047\052\050\016\051\044\052\023\053\051\054\017" +
    "\055\014\071\042\001\002\000\056\002\uffe2\011\uffe2\027" +
    "\uffe2\030\uffe2\031\uffe2\032\uffe2\033\uffe2\035\uffe2\037\uffe2" +
    "\042\uffe2\043\uffe2\044\uffe2\045\uffe2\046\uffe2\047\uffe2\050" +
    "\uffe2\051\uffe2\052\uffe2\053\uffe2\054\uffe2\055\uffe2\071\uffe2" +
    "\001\002\000\046\011\ufff4\027\ufff4\030\ufff4\031\ufff4\033" +
    "\ufff4\035\ufff4\037\ufff4\042\ufff4\045\ufff4\046\ufff4\047\ufff4" +
    "\050\ufff4\051\ufff4\052\ufff4\053\ufff4\054\ufff4\055\ufff4\071" +
    "\ufff4\001\002\000\046\011\012\027\043\030\020\031\035" +
    "\033\046\035\uffdf\037\030\042\036\045\034\046\050\047" +
    "\052\050\016\051\044\052\023\053\051\054\017\055\014" +
    "\071\042\001\002\000\056\002\uffee\011\uffee\027\uffee\030" +
    "\uffee\031\uffee\032\uffee\033\uffee\035\uffee\037\uffee\042\uffee" +
    "\043\uffee\044\uffee\045\uffee\046\uffee\047\uffee\050\uffee\051" +
    "\uffee\052\uffee\053\uffee\054\uffee\055\uffee\071\uffee\001\002" +
    "\000\056\002\uffd4\011\uffd4\027\uffd4\030\uffd4\031\uffd4\032" +
    "\uffd4\033\uffd4\035\uffd4\037\uffd4\042\uffd4\043\uffd4\044\uffd4" +
    "\045\uffd4\046\uffd4\047\uffd4\050\uffd4\051\uffd4\052\uffd4\053" +
    "\uffd4\054\uffd4\055\uffd4\071\uffd4\001\002\000\024\006\061" +
    "\010\060\011\012\025\067\064\063\065\070\067\075\070" +
    "\072\071\062\001\002\000\004\026\271\001\002\000\004" +
    "\034\272\001\002\000\046\011\ufff4\027\ufff4\030\ufff4\031" +
    "\ufff4\033\ufff4\035\ufff4\037\ufff4\042\ufff4\045\ufff4\046\ufff4" +
    "\047\ufff4\050\ufff4\051\ufff4\052\ufff4\053\ufff4\054\ufff4\055" +
    "\ufff4\071\ufff4\001\002\000\004\035\274\001\002\000\062" +
    "\002\uffea\011\uffea\027\uffea\030\uffea\031\uffea\032\uffea\033" +
    "\uffea\035\uffea\037\uffea\040\uffea\041\uffea\042\uffea\043\uffea" +
    "\044\uffea\045\uffea\046\uffea\047\uffea\050\uffea\051\uffea\052" +
    "\uffea\053\uffea\054\uffea\055\uffea\071\uffea\001\002\000\062" +
    "\002\uffed\011\uffed\027\uffed\030\uffed\031\uffed\032\uffed\033" +
    "\uffed\035\uffed\037\uffed\040\277\041\276\042\uffed\043\uffed" +
    "\044\uffed\045\uffed\046\uffed\047\uffed\050\uffed\051\uffed\052" +
    "\uffed\053\uffed\054\uffed\055\uffed\071\uffed\001\002\000\004" +
    "\034\306\001\002\000\004\025\300\001\002\000\024\006" +
    "\061\010\060\011\012\025\067\064\063\065\070\067\075" +
    "\070\072\071\062\001\002\000\004\026\302\001\002\000" +
    "\004\034\303\001\002\000\046\011\ufff4\027\ufff4\030\ufff4" +
    "\031\ufff4\033\ufff4\035\ufff4\037\ufff4\042\ufff4\045\ufff4\046" +
    "\ufff4\047\ufff4\050\ufff4\051\ufff4\052\ufff4\053\ufff4\054\ufff4" +
    "\055\ufff4\071\ufff4\001\002\000\004\035\305\001\002\000" +
    "\062\002\uffeb\011\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb" +
    "\033\uffeb\035\uffeb\037\uffeb\040\uffeb\041\uffeb\042\uffeb\043" +
    "\uffeb\044\uffeb\045\uffeb\046\uffeb\047\uffeb\050\uffeb\051\uffeb" +
    "\052\uffeb\053\uffeb\054\uffeb\055\uffeb\071\uffeb\001\002\000" +
    "\046\011\ufff4\027\ufff4\030\ufff4\031\ufff4\033\ufff4\035\ufff4" +
    "\037\ufff4\042\ufff4\045\ufff4\046\ufff4\047\ufff4\050\ufff4\051" +
    "\ufff4\052\ufff4\053\ufff4\054\ufff4\055\ufff4\071\ufff4\001\002" +
    "\000\004\035\310\001\002\000\056\002\uffec\011\uffec\027" +
    "\uffec\030\uffec\031\uffec\032\uffec\033\uffec\035\uffec\037\uffec" +
    "\042\uffec\043\uffec\044\uffec\045\uffec\046\uffec\047\uffec\050" +
    "\uffec\051\uffec\052\uffec\053\uffec\054\uffec\055\uffec\071\uffec" +
    "\001\002\000\004\025\312\001\002\000\014\026\uffcd\050" +
    "\016\051\044\052\023\071\174\001\002\000\004\026\314" +
    "\001\002\000\006\034\200\036\315\001\002\000\056\002" +
    "\uffdd\011\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd" +
    "\035\uffdd\037\uffdd\042\uffdd\043\uffdd\044\uffdd\045\uffdd\046" +
    "\uffdd\047\uffdd\050\uffdd\051\uffdd\052\uffdd\053\uffdd\054\uffdd" +
    "\055\uffdd\071\uffdd\001\002\000\004\071\324\001\002\000" +
    "\004\071\324\001\002\000\022\010\060\011\012\025\067" +
    "\064\063\065\070\067\075\070\072\071\062\001\002\000" +
    "\004\060\322\001\002\000\056\004\uffa7\005\uffa7\007\uffa7" +
    "\010\uffa7\011\uffa7\012\uffa7\013\uffa7\014\uffa7\015\uffa7\016" +
    "\uffa7\017\uffa7\020\uffa7\021\uffa7\022\uffa7\023\uffa7\024\uffa7" +
    "\026\uffa7\036\uffa7\057\uffa7\060\uffa7\061\uffa7\062\uffa7\001" +
    "\002\000\056\004\uffa9\005\uffa9\007\uffa9\010\uffa9\011\uffa9" +
    "\012\uffa9\013\uffa9\014\uffa9\015\uffa9\016\uffa9\017\uffa9\020" +
    "\uffa9\021\uffa9\022\uffa9\023\uffa9\024\uffa9\026\uffa9\036\uffa9" +
    "\057\uffa9\060\uffa9\061\uffa9\062\uffa9\001\002\000\056\004" +
    "\uffa5\005\uffa5\007\uffa5\010\uffa5\011\uffa5\012\uffa5\013\uffa5" +
    "\014\uffa5\015\uffa5\016\uffa5\017\uffa5\020\uffa5\021\uffa5\022" +
    "\uffa5\023\uffa5\024\uffa5\026\uffa5\036\uffa5\057\uffa5\060\uffa5" +
    "\061\uffa5\062\uffa5\001\002\000\056\004\uffa8\005\uffa8\007" +
    "\uffa8\010\uffa8\011\uffa8\012\uffa8\013\uffa8\014\uffa8\015\uffa8" +
    "\016\uffa8\017\uffa8\020\uffa8\021\uffa8\022\uffa8\023\uffa8\024" +
    "\uffa8\026\uffa8\036\uffa8\057\uffa8\060\uffa8\061\uffa8\062\uffa8" +
    "\001\002\000\024\006\061\010\060\011\012\025\067\064" +
    "\063\065\070\067\075\070\072\071\062\001\002\000\004" +
    "\036\330\001\002\000\056\002\uffe7\011\uffe7\027\uffe7\030" +
    "\uffe7\031\uffe7\032\uffe7\033\uffe7\035\uffe7\037\uffe7\042\uffe7" +
    "\043\uffe7\044\uffe7\045\uffe7\046\uffe7\047\uffe7\050\uffe7\051" +
    "\uffe7\052\uffe7\053\uffe7\054\uffe7\055\uffe7\071\uffe7\001\002" +
    "\000\024\006\061\010\060\011\012\025\067\064\063\065" +
    "\070\067\075\070\072\071\062\001\002\000\004\036\333" +
    "\001\002\000\024\006\061\010\060\011\012\025\067\064" +
    "\063\065\070\067\075\070\072\071\062\001\002\000\006" +
    "\026\335\036\336\001\002\000\004\034\344\001\002\000" +
    "\024\006\061\010\060\011\012\025\067\064\063\065\070" +
    "\067\075\070\072\071\062\001\002\000\004\026\340\001" +
    "\002\000\004\034\341\001\002\000\046\011\ufff4\027\ufff4" +
    "\030\ufff4\031\ufff4\033\ufff4\035\ufff4\037\ufff4\042\ufff4\045" +
    "\ufff4\046\ufff4\047\ufff4\050\ufff4\051\ufff4\052\ufff4\053\ufff4" +
    "\054\ufff4\055\ufff4\071\ufff4\001\002\000\004\035\343\001" +
    "\002\000\056\002\uffe5\011\uffe5\027\uffe5\030\uffe5\031\uffe5" +
    "\032\uffe5\033\uffe5\035\uffe5\037\uffe5\042\uffe5\043\uffe5\044" +
    "\uffe5\045\uffe5\046\uffe5\047\uffe5\050\uffe5\051\uffe5\052\uffe5" +
    "\053\uffe5\054\uffe5\055\uffe5\071\uffe5\001\002\000\046\011" +
    "\ufff4\027\ufff4\030\ufff4\031\ufff4\033\ufff4\035\ufff4\037\ufff4" +
    "\042\ufff4\045\ufff4\046\ufff4\047\ufff4\050\ufff4\051\ufff4\052" +
    "\ufff4\053\ufff4\054\ufff4\055\ufff4\071\ufff4\001\002\000\004" +
    "\035\346\001\002\000\056\002\uffe6\011\uffe6\027\uffe6\030" +
    "\uffe6\031\uffe6\032\uffe6\033\uffe6\035\uffe6\037\uffe6\042\uffe6" +
    "\043\uffe6\044\uffe6\045\uffe6\046\uffe6\047\uffe6\050\uffe6\051" +
    "\uffe6\052\uffe6\053\uffe6\054\uffe6\055\uffe6\071\uffe6\001\002" +
    "\000\024\006\061\010\060\011\012\025\067\064\063\065" +
    "\070\067\075\070\072\071\062\001\002\000\004\026\351" +
    "\001\002\000\004\036\352\001\002\000\056\002\uffd8\011" +
    "\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8\035\uffd8" +
    "\037\uffd8\042\uffd8\043\uffd8\044\uffd8\045\uffd8\046\uffd8\047" +
    "\uffd8\050\uffd8\051\uffd8\052\uffd8\053\uffd8\054\uffd8\055\uffd8" +
    "\071\uffd8\001\002\000\004\071\354\001\002\000\004\026" +
    "\355\001\002\000\004\036\356\001\002\000\056\002\uffd7" +
    "\011\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7\035" +
    "\uffd7\037\uffd7\042\uffd7\043\uffd7\044\uffd7\045\uffd7\046\uffd7" +
    "\047\uffd7\050\uffd7\051\uffd7\052\uffd7\053\uffd7\054\uffd7\055" +
    "\uffd7\071\uffd7\001\002\000\050\004\uffab\005\uffab\007\uffab" +
    "\010\uffab\011\uffab\012\uffab\013\uffab\014\uffab\015\uffab\016" +
    "\uffab\017\uffab\020\uffab\021\uffab\022\uffab\023\uffab\024\uffab" +
    "\026\uffab\036\uffab\060\uffab\001\002\000\010\011\uff9c\066" +
    "\uff9c\071\uff9c\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\356\000\006\002\004\003\003\001\001\000\050\007" +
    "\021\010\014\011\030\012\020\013\040\014\012\015\010" +
    "\016\031\017\007\021\036\022\046\031\032\032\025\033" +
    "\024\034\023\035\044\036\006\037\037\040\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\032\025\033\024" +
    "\034\356\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\023\070\024\072\025\073" +
    "\026\075\027\076\030\065\031\063\032\025\033\024\034" +
    "\064\001\001\000\002\001\001\000\016\027\146\030\065" +
    "\031\063\032\025\033\024\034\064\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\023\133\024\072\025\073\026" +
    "\075\027\076\030\065\031\063\032\025\033\024\034\064" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\027\106\030" +
    "\065\031\063\032\025\033\024\034\064\001\001\000\016" +
    "\027\105\030\065\031\063\032\025\033\024\034\064\001" +
    "\001\000\016\027\104\030\065\031\063\032\025\033\024" +
    "\034\064\001\001\000\016\027\103\030\065\031\063\032" +
    "\025\033\024\034\064\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\026" +
    "\124\027\076\030\065\031\063\032\025\033\024\034\064" +
    "\001\001\000\022\025\123\026\075\027\076\030\065\031" +
    "\063\032\025\033\024\034\064\001\001\000\020\026\122" +
    "\027\076\030\065\031\063\032\025\033\024\034\064\001" +
    "\001\000\022\025\121\026\075\027\076\030\065\031\063" +
    "\032\025\033\024\034\064\001\001\000\022\025\120\026" +
    "\075\027\076\030\065\031\063\032\025\033\024\034\064" +
    "\001\001\000\022\025\117\026\075\027\076\030\065\031" +
    "\063\032\025\033\024\034\064\001\001\000\020\026\116" +
    "\027\076\030\065\031\063\032\025\033\024\034\064\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\024\130\025\073\026\075\027\076" +
    "\030\065\031\063\032\025\033\024\034\064\001\001\000" +
    "\024\024\127\025\073\026\075\027\076\030\065\031\063" +
    "\032\025\033\024\034\064\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\027\136\030\065\031" +
    "\063\032\025\033\024\034\064\001\001\000\002\001\001" +
    "\000\032\023\142\024\072\025\073\026\075\027\076\030" +
    "\065\031\063\032\025\033\024\034\064\044\141\045\140" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\023\145\024\072\025\073" +
    "\026\075\027\076\030\065\031\063\032\025\033\024\034" +
    "\064\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\023\152\024\072\025" +
    "\073\026\075\027\076\030\065\031\063\032\025\033\024" +
    "\034\064\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\157\001\001" +
    "\000\026\007\161\010\166\021\162\032\025\033\024\034" +
    "\023\035\044\036\006\037\160\040\165\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\035\044\036" +
    "\006\037\172\042\175\043\174\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\002\200\003\003\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\035\044\036\006\037" +
    "\203\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\023\227\024\072\025\073\026\075\027\076\030" +
    "\065\031\063\032\025\033\024\034\064\001\001\000\014" +
    "\035\044\036\006\037\172\042\216\043\174\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\002\221\003\003" +
    "\001\001\000\004\006\223\001\001\000\026\023\225\024" +
    "\072\025\073\026\075\027\076\030\065\031\063\032\025" +
    "\033\024\034\064\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\023\233\024" +
    "\072\025\073\026\075\027\076\030\065\031\063\032\025" +
    "\033\024\034\064\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\002\236\003\003\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\035\044\036" +
    "\006\037\172\042\242\043\174\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\023\246\024" +
    "\072\025\073\026\075\027\076\030\065\031\063\032\025" +
    "\033\024\034\064\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\251\001\001\000\004\020\253\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\260\001\001" +
    "\000\050\007\021\010\014\011\030\012\020\013\040\014" +
    "\012\015\010\016\031\017\007\021\036\022\046\031\032" +
    "\032\025\033\024\034\023\035\044\036\006\037\037\040" +
    "\026\001\001\000\002\001\001\000\004\003\263\001\001" +
    "\000\050\007\021\010\014\011\030\012\020\013\040\014" +
    "\012\015\010\016\031\017\007\021\036\022\046\031\032" +
    "\032\025\033\024\034\023\035\044\036\006\037\037\040" +
    "\026\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\023\267\024\072\025\073\026\075\027\076\030\065\031" +
    "\063\032\025\033\024\034\064\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\002\272\003\003\001\001\000" +
    "\002\001\001\000\004\041\274\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\023\300\024" +
    "\072\025\073\026\075\027\076\030\065\031\063\032\025" +
    "\033\024\034\064\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\002\303\003\003\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\002\306\003\003\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\035\044\036\006\037\172\042\312\043\174\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\032\324\001\001\000\004\032\322\001\001\000\014\030" +
    "\320\031\063\032\025\033\024\034\064\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\023\326\024\072\025\073" +
    "\026\075\027\076\030\065\031\063\032\025\033\024\034" +
    "\064\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\023\331\024\072\025\073\026\075\027\076\030\065\031" +
    "\063\032\025\033\024\034\064\001\001\000\002\001\001" +
    "\000\026\023\333\024\072\025\073\026\075\027\076\030" +
    "\065\031\063\032\025\033\024\034\064\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\023\336\024\072\025" +
    "\073\026\075\027\076\030\065\031\063\032\025\033\024" +
    "\034\064\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\002\341\003\003\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\002\344\003\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\023\347\024\072\025\073" +
    "\026\075\027\076\030\065\031\063\032\025\033\024\034" +
    "\064\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ConstructorASTExp$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ConstructorASTExp$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ConstructorASTExp$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny();
   AnalizadorLexicoSajax sajax = (AnalizadorLexicoSajax)getScanner();
   sajax.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ConstructorASTExp$actions {
  private final ConstructorASTExp parser;

  /** Constructor */
  CUP$ConstructorASTExp$actions(ConstructorASTExp parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ConstructorASTExp$do_action_part00000000(
    int                        CUP$ConstructorASTExp$act_num,
    java_cup.runtime.lr_parser CUP$ConstructorASTExp$parser,
    java.util.Stack            CUP$ConstructorASTExp$stack,
    int                        CUP$ConstructorASTExp$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ConstructorASTExp$result;

      /* select the action based on the action number */
      switch (CUP$ConstructorASTExp$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= BloqueGeneral 
            {
              Bloque RESULT =null;
		ArrayList<Statement> block = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new Bloque(block); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("S",0, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		Bloque start_val = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		RESULT = start_val;
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$ConstructorASTExp$parser.done_parsing();
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // BloqueGeneral ::= BloqueGeneral SAsign 
            {
              ArrayList<Statement> RESULT =null;
		ArrayList<Statement> genBlock = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Statement aDeexp = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 genBlock.add(aDeexp); RESULT=genBlock; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("BloqueGeneral",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // BloqueGeneral ::= BloqueGeneral SDec 
            {
              ArrayList<Statement> RESULT =null;
		ArrayList<Statement> genBlock = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Statement aDeexp = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 genBlock.add(aDeexp); RESULT=genBlock; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("BloqueGeneral",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // BloqueGeneral ::= BloqueGeneral SIf 
            {
              ArrayList<Statement> RESULT =null;
		ArrayList<Statement> genBlock = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Statement aDeexp = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 genBlock.add(aDeexp); RESULT=genBlock; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("BloqueGeneral",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // BloqueGeneral ::= BloqueGeneral SFor 
            {
              ArrayList<Statement> RESULT =null;
		ArrayList<Statement> genBlock = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Statement aDeexp = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 genBlock.add(aDeexp); RESULT=genBlock; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("BloqueGeneral",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // BloqueGeneral ::= BloqueGeneral SWhile 
            {
              ArrayList<Statement> RESULT =null;
		ArrayList<Statement> genBlock = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Statement aDeexp = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 genBlock.add(aDeexp); RESULT=genBlock; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("BloqueGeneral",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // BloqueGeneral ::= BloqueGeneral SSwitch 
            {
              ArrayList<Statement> RESULT =null;
		ArrayList<Statement> genBlock = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Statement aDeexp = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 genBlock.add(aDeexp); RESULT=genBlock; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("BloqueGeneral",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // BloqueGeneral ::= BloqueGeneral SBreak 
            {
              ArrayList<Statement> RESULT =null;
		ArrayList<Statement> genBlock = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Statement aDeexp = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 genBlock.add(aDeexp); RESULT=genBlock; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("BloqueGeneral",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // BloqueGeneral ::= BloqueGeneral SDecFuncionInline 
            {
              ArrayList<Statement> RESULT =null;
		ArrayList<Statement> genBlock = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		DecFuncion aDeexp = (DecFuncion)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 genBlock.add(aDeexp); RESULT=genBlock; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("BloqueGeneral",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // BloqueGeneral ::= BloqueGeneral SDecFuncion 
            {
              ArrayList<Statement> RESULT =null;
		ArrayList<Statement> genBlock = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		DecFuncion aDeexp = (DecFuncion)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 genBlock.add(aDeexp); RESULT=genBlock; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("BloqueGeneral",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // BloqueGeneral ::= BloqueGeneral SCallFun 
            {
              ArrayList<Statement> RESULT =null;
		ArrayList<Statement> genBlock = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Statement aDeexp = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 genBlock.add(aDeexp); RESULT=genBlock; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("BloqueGeneral",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // BloqueGeneral ::= BloqueGeneral SStruct 
            {
              ArrayList<Statement> RESULT =null;
		ArrayList<Statement> genBlock = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Statement aDeexp = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 genBlock.add(aDeexp); RESULT=genBlock; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("BloqueGeneral",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // BloqueGeneral ::= 
            {
              ArrayList<Statement> RESULT =null;
		 RESULT=new ArrayList<Statement>(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("BloqueGeneral",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SStruct ::= STRUCT IDEN LLAP AtribStruct LLCIERRE 
            {
              Statement RESULT =null;
		TokenValue name = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		ArrayList<Statement> atributos = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=new Struct(name.lexema, new Bloque(atributos)); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SStruct",13, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // AtribStruct ::= AtribStruct SAsign 
            {
              ArrayList<Statement> RESULT =null;
		ArrayList<Statement> bloqueatr = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Statement asign = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 bloqueatr.add(asign); RESULT=bloqueatr; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("AtribStruct",2, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // AtribStruct ::= AtribStruct SDec 
            {
              ArrayList<Statement> RESULT =null;
		ArrayList<Statement> bloqueatr = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Statement dec = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 bloqueatr.add(dec); RESULT=bloqueatr; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("AtribStruct",2, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // AtribStruct ::= AtribStruct SDecFuncion 
            {
              ArrayList<Statement> RESULT =null;
		ArrayList<Statement> bloqueatr = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		DecFuncion dec = (DecFuncion)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 bloqueatr.add(dec); RESULT=bloqueatr; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("AtribStruct",2, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // AtribStruct ::= 
            {
              ArrayList<Statement> RESULT =null;
		 RESULT=new ArrayList<Statement>(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("AtribStruct",2, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SBreak ::= BREAK PTOCOMA 
            {
              Statement RESULT =null;
		 RESULT=new Break(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SBreak",10, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SIf ::= IF PAP SExp4 PCIERRE LLAP S LLCIERRE SElsif 
            {
              Statement RESULT =null;
		E cond1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-5)).value;
		Bloque St = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		ArrayList<Elsif> arrayelsifs = (ArrayList<Elsif>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new IfElse(cond1, St, arrayelsifs); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SIf",7, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SIf ::= IF PAP SExp4 PCIERRE LLAP S LLCIERRE SElsif ELSE LLAP S LLCIERRE 
            {
              Statement RESULT =null;
		E cond2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-9)).value;
		Bloque St1 = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-6)).value;
		ArrayList<Elsif> arrayelsifs = (ArrayList<Elsif>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		Bloque St2 = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=new IfElse(cond2, St1, arrayelsifs, St2); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SIf",7, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SElsif ::= SElsif ELSIF PAP SExp4 PCIERRE LLAP S LLCIERRE 
            {
              ArrayList<Elsif> RESULT =null;
		ArrayList<Elsif> arrayelsifs = (ArrayList<Elsif>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-7)).value;
		E cond3 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		Bloque St3 = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 arrayelsifs.add(new Elsif(cond3, St3)); RESULT=arrayelsifs; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SElsif",31, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SElsif ::= 
            {
              ArrayList<Elsif> RESULT =null;
		 RESULT=new ArrayList<Elsif>(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SElsif",31, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SDec ::= Tipos IDEN PTOCOMA 
            {
              Statement RESULT =null;
		Tipo tipoAsig = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		TokenValue ident = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=new Dec(tipoAsig, ident.lexema); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SDec",6, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SAsign ::= Tipos IDEN IGUAL SExp4 PTOCOMA 
            {
              Statement RESULT =null;
		Tipo tipoAsig = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		TokenValue ident = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		E expterm = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=new Asign(tipoAsig, new Ident(ident.lexema), expterm); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SAsign",5, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SAsign ::= IdenOps1 IGUAL SExp4 PTOCOMA 
            {
              Statement RESULT =null;
		E designador = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		E expterm = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=new Asign(designador, expterm); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SAsign",5, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SFor ::= FOR PAP SExp4 PTOCOMA SExp4 PCIERRE LLAP S LLCIERRE 
            {
              Statement RESULT =null;
		E inicio = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-6)).value;
		E fin = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		Bloque statement = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=new For(inicio, fin, statement); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SFor",12, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SFor ::= FOR PAP SExp4 PTOCOMA SExp4 PTOCOMA SExp4 PCIERRE LLAP S LLCIERRE 
            {
              Statement RESULT =null;
		E inicio = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-8)).value;
		E fin = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-6)).value;
		E paso = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		Bloque statement = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=new For(inicio, fin, paso, statement); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SFor",12, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SWhile ::= WHILE PAP SExp4 PCIERRE LLAP S LLCIERRE 
            {
              Statement RESULT =null;
		E cond = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		Bloque instrucciones = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=new While(cond, instrucciones); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SWhile",8, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SSwitch ::= SWITCH PAP SExp4 PCIERRE LLAP Cases LLCIERRE 
            {
              Statement RESULT =null;
		E exp = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		ArrayList<Case> cases = (ArrayList<Case>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=new Switch(exp, cases); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SSwitch",9, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SSwitch ::= SWITCH PAP SExp4 PCIERRE LLAP Cases Default LLCIERRE 
            {
              Statement RESULT =null;
		E exp = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-5)).value;
		ArrayList<Case> cases = (ArrayList<Case>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		DefaultCase defCase = (DefaultCase)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=new Switch(exp, cases, defCase); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SSwitch",9, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Cases ::= 
            {
              ArrayList<Case> RESULT =null;
		 RESULT=new ArrayList<Case>(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Cases",3, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Cases ::= Cases CASE ENT DOSPTOS BloqueGeneral 
            {
              ArrayList<Case> RESULT =null;
		ArrayList<Case> cases = (ArrayList<Case>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		TokenValue ent = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		ArrayList<Statement> bloqGen = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 cases.add(new Case(new Ent(ent.lexema), bloqGen)); RESULT=cases; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Cases",3, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Default ::= DEFAULT DOSPTOS BloqueGeneral 
            {
              DefaultCase RESULT =null;
		ArrayList<Statement> bloqGen = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new DefaultCase(bloqGen); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Default",14, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SDecFuncionInline ::= Tipos IDEN PAP SParams PCIERRE PTOCOMA 
            {
              DecFuncion RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-5)).value;
		TokenValue name = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		ArrayList<Parametro> params = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		 RESULT=new DecFuncion(tipo, name.lexema, params, null, null); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SDecFuncionInline",16, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SDecFuncionInline ::= TipoVoid IDEN PAP SParams PCIERRE PTOCOMA 
            {
              DecFuncion RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-5)).value;
		TokenValue name = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		ArrayList<Parametro> params = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		 RESULT=new DecFuncion(tipo, name.lexema, params, null, null); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SDecFuncionInline",16, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SDecFuncion ::= Tipos IDEN PAP SParams PCIERRE LLAP S SReturn LLCIERRE 
            {
              DecFuncion RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-8)).value;
		TokenValue name = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-7)).value;
		ArrayList<Parametro> params = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-5)).value;
		Bloque block = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Return ret = (Return)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=new DecFuncion(tipo, name.lexema, params, block, ret); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SDecFuncion",15, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SDecFuncion ::= TipoVoid IDEN PAP SParams PCIERRE LLAP S LLCIERRE 
            {
              DecFuncion RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-7)).value;
		TokenValue name = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-6)).value;
		ArrayList<Parametro> params = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		Bloque block = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=new DecFuncion(tipo, name.lexema, params, block, null); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SDecFuncion",15, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SReturn ::= RETURN SExp4 PTOCOMA 
            {
              Return RESULT =null;
		E expresion = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=new Return(expresion); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SReturn",4, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SCallFun ::= PRINT PAP SExp4 PCIERRE PTOCOMA 
            {
              Statement RESULT =null;
		E expresion = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		 RESULT=new Print(expresion, false); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SCallFun",11, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SCallFun ::= PRINTLN PAP SExp4 PCIERRE PTOCOMA 
            {
              Statement RESULT =null;
		E expresion = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		 RESULT=new Print(expresion, true); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SCallFun",11, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SCallFun ::= INPUT PAP IDEN PCIERRE PTOCOMA 
            {
              Statement RESULT =null;
		TokenValue expresion = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		 RESULT=new Input(new Ident(expresion.lexema)); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SCallFun",11, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SCallFun ::= MEMSPACE PAP SExp4 PCIERRE PTOCOMA 
            {
              Statement RESULT =null;
		E arg1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		 RESULT=new Memspace(arg1); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SCallFun",11, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SCallFun ::= FREE PAP IDEN PCIERRE PTOCOMA 
            {
              Statement RESULT =null;
		TokenValue arg1 = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		 RESULT=new Free(new Ident(arg1.lexema)); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SCallFun",11, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SCallFun ::= CallFun PTOCOMA 
            {
              Statement RESULT =null;
		E llamada = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=llamada; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SCallFun",11, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CallFun ::= IDEN PAP SParExp PCIERRE 
            {
              E RESULT =null;
		TokenValue ident = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		ArrayList<E> parexp = (ArrayList<E>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=new LlamadaFuncion(ident.lexema, parexp); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("CallFun",23, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SParExp ::= SParExp1 
            {
              ArrayList<E> RESULT =null;
		ArrayList<E> sparexp1 = (ArrayList<E>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=sparexp1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SParExp",34, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SParExp ::= 
            {
              ArrayList<E> RESULT =null;
		 RESULT=new ArrayList<E>(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SParExp",34, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SParExp1 ::= SParExp1 COMA SExp4 
            {
              ArrayList<E> RESULT =null;
		ArrayList<E> parlist = (ArrayList<E>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E expr = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 parlist.add(expr); RESULT=parlist; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SParExp1",35, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SParExp1 ::= SExp4 
            {
              ArrayList<E> RESULT =null;
		E expr = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new ArrayList<E>(Arrays.asList(expr)); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SParExp1",35, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SParams ::= SParamsNoVacio 
            {
              ArrayList<Parametro> RESULT =null;
		ArrayList<Parametro> params = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=params; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SParams",32, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SParams ::= 
            {
              ArrayList<Parametro> RESULT =null;
		 RESULT=new ArrayList<Parametro>(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SParams",32, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SParamsNoVacio ::= SParamsNoVacio COMA Tipos OPREF IDEN 
            {
              ArrayList<Parametro> RESULT =null;
		ArrayList<Parametro> params = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		TokenValue name = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 params.add(new Parametro(tipo, true, name.lexema)); RESULT=params; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SParamsNoVacio",33, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SParamsNoVacio ::= SParamsNoVacio COMA Tipos IDEN 
            {
              ArrayList<Parametro> RESULT =null;
		ArrayList<Parametro> params = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		TokenValue name = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 params.add(new Parametro(tipo, false, name.lexema)); RESULT=params; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SParamsNoVacio",33, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SParamsNoVacio ::= Tipos OPREF IDEN 
            {
              ArrayList<Parametro> RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		TokenValue name = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new ArrayList<Parametro>(Arrays.asList(new Parametro(tipo, true, name.lexema))); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SParamsNoVacio",33, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SParamsNoVacio ::= Tipos IDEN 
            {
              ArrayList<Parametro> RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		TokenValue name = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new ArrayList<Parametro>(Arrays.asList(new Parametro(tipo, false, name.lexema))); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SParamsNoVacio",33, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SExp4 ::= SExp3 IGDOBLE SExp3 
            {
              E RESULT =null;
		E expterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E expterm2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new EBin(expterm1, expterm2,KindE.ID); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp4",17, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SExp4 ::= SExp3 DISTINTO SExp3 
            {
              E RESULT =null;
		E expterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E expterm2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new EBin(expterm1, expterm2,KindE.DISTINTO); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp4",17, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SExp4 ::= SExp3 
            {
              E RESULT =null;
		E expterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=expterm1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp4",17, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SExp3 ::= SExp2 MENOR SExp2 
            {
              E RESULT =null;
		E expterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E expterm2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new EBin(expterm1, expterm2,KindE.MENOR); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp3",18, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SExp3 ::= SExp2 MAYOR SExp2 
            {
              E RESULT =null;
		E expterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E expterm2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new EBin(expterm1, expterm2,KindE.MAYOR); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp3",18, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // SExp3 ::= SExp2 MENIGUAL SExp2 
            {
              E RESULT =null;
		E expterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E expterm2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new EBin(expterm1, expterm2,KindE.MENIGUAL); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp3",18, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SExp3 ::= SExp2 MAYIGUAL SExp2 
            {
              E RESULT =null;
		E expterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E expterm2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new EBin(expterm1, expterm2,KindE.MAYIGUAL); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp3",18, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // SExp3 ::= SExp2 
            {
              E RESULT =null;
		E expterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=expterm1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp3",18, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // SExp2 ::= SExp2 OR SExp1 
            {
              E RESULT =null;
		E expterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E expterm2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new EBin(expterm1, expterm2, KindE.OR); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp2",19, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // SExp2 ::= SExp2 MAS SExp1 
            {
              E RESULT =null;
		E floatexp1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E expterm = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(floatexp1,expterm,KindE.SUMA); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp2",19, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // SExp2 ::= SExp2 MENOS SExp1 
            {
              E RESULT =null;
		E floatexp1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E expterm = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(floatexp1,expterm,KindE.RESTA); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp2",19, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // SExp2 ::= SExp1 
            {
              E RESULT =null;
		E expterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=expterm1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp2",19, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // SExp1 ::= SExp1 AND SExp0 
            {
              E RESULT =null;
		E expterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E expterm2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new EBin(expterm1, expterm2, KindE.AND); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp1",20, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // SExp1 ::= SExp1 POR SExp0 
            {
              E RESULT =null;
		E expterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E expfact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(expterm1,expfact, KindE.MUL); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp1",20, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // SExp1 ::= SExp1 DIV SExp0 
            {
              E RESULT =null;
		E expterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E expfact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(expterm1,expfact, KindE.DIV); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp1",20, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SExp1 ::= SExp1 MOD SExp0 
            {
              E RESULT =null;
		E aDeterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E aDefact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(aDeterm1,aDefact, KindE.MOD); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp1",20, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // SExp1 ::= SExp0 
            {
              E RESULT =null;
		E expterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=expterm1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp1",20, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // SExp0 ::= Exp POT SExp0 
            {
              E RESULT =null;
		E expfact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E expterm2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(expfact,expterm2, KindE.POT); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp0",21, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // SExp0 ::= NOT SExp0 
            {
              E RESULT =null;
		E boolVal = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new EUnar(boolVal, KindE.NOT); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp0",21, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // SExp0 ::= Exp 
            {
              E RESULT =null;
		E expterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=expterm1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp0",21, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Exp ::= ENT 
            {
              E RESULT =null;
		TokenValue numEnt = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new Ent(numEnt.lexema); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp",22, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Exp ::= MENOS ENT 
            {
              E RESULT =null;
		TokenValue numEnt = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new Ent("-" + numEnt.lexema); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp",22, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Exp ::= REAL 
            {
              E RESULT =null;
		TokenValue numReal = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new Real(numReal.lexema); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp",22, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Exp ::= MENOS REAL 
            {
              E RESULT =null;
		TokenValue numReal = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new Real("-" + numReal.lexema); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp",22, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Exp ::= TRUE 
            {
              E RESULT =null;
		Object trueterm = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new True(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp",22, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Exp ::= FALSE 
            {
              E RESULT =null;
		Object falseterm = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new False(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp",22, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Exp ::= PAP SExp4 PCIERRE 
            {
              E RESULT =null;
		E expterm = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=expterm; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp",22, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Exp ::= IdenOps1 
            {
              E RESULT =null;
		E idenops = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=idenops; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp",22, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Exp ::= CallFun 
            {
              E RESULT =null;
		E callfun = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=callfun; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp",22, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // IdenOps1 ::= POR IdenOps1 
            {
              E RESULT =null;
		E idenOps = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		RESULT = new EUnar(idenOps, KindE.ASTERISCO); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("IdenOps1",26, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // IdenOps1 ::= IdenOps0 
            {
              E RESULT =null;
		E idenOps = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = idenOps; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("IdenOps1",26, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // IdenOps0 ::= IdenOps0 PUNTO IdenOps 
            {
              E RESULT =null;
		E idenOps0 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E idenOps = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new EBin(idenOps0, idenOps, KindE.PUNTO); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("IdenOps0",25, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // IdenOps0 ::= IdenOps0 FLECHA IdenOps 
            {
              E RESULT =null;
		E idenOps0 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E idenOps = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new EBin(idenOps0, idenOps, KindE.FLECHA); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("IdenOps0",25, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // IdenOps0 ::= IdenOps0 CAP Exp CCIERRE 
            {
              E RESULT =null;
		E idenOps0 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		E exp = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = new EBin(idenOps0, exp, KindE.CORCHETES); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("IdenOps0",25, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // IdenOps0 ::= IdenOps 
            {
              E RESULT =null;
		E idenOps = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = idenOps; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("IdenOps0",25, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // IdenOps ::= IDEN 
            {
              E RESULT =null;
		TokenValue iden = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT =  new Ident(iden.lexema); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("IdenOps",24, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // TipoVoid ::= TipoVoid POR 
            {
              Tipo RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=new Puntero(tipo); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("TipoVoid",30, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // TipoVoid ::= VOID 
            {
              Tipo RESULT =null;
		 RESULT= new Tipo(TipoEnum.VOID); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("TipoVoid",30, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Tipos ::= TipoBas 
            {
              Tipo RESULT =null;
		Tipo tipobas = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=tipobas; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Tipos",29, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Tipos ::= TipoStruct 
            {
              Tipo RESULT =null;
		Tipo tipostruct = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=tipostruct; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Tipos",29, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // TipoBas ::= TipoBas POR 
            {
              Tipo RESULT =null;
		Tipo tipobas = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=new Puntero(tipobas); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("TipoBas",27, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // TipoBas ::= BOOL 
            {
              Tipo RESULT =null;
		 RESULT=new Tipo(TipoEnum.BOOL); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("TipoBas",27, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // TipoBas ::= INT 
            {
              Tipo RESULT =null;
		 RESULT=new Tipo(TipoEnum.INT); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("TipoBas",27, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // TipoBas ::= FLOAT 
            {
              Tipo RESULT =null;
		 RESULT=new Tipo(TipoEnum.FLOAT); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("TipoBas",27, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // TipoStruct ::= TipoStruct POR 
            {
              Tipo RESULT =null;
		Tipo ident = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=new Puntero(ident); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("TipoStruct",28, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // TipoStruct ::= IDEN 
            {
              Tipo RESULT =null;
		TokenValue ident = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new TipoStruct(ident.lexema); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("TipoStruct",28, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ConstructorASTExp$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ConstructorASTExp$do_action(
    int                        CUP$ConstructorASTExp$act_num,
    java_cup.runtime.lr_parser CUP$ConstructorASTExp$parser,
    java.util.Stack            CUP$ConstructorASTExp$stack,
    int                        CUP$ConstructorASTExp$top)
    throws java.lang.Exception
    {
              return CUP$ConstructorASTExp$do_action_part00000000(
                               CUP$ConstructorASTExp$act_num,
                               CUP$ConstructorASTExp$parser,
                               CUP$ConstructorASTExp$stack,
                               CUP$ConstructorASTExp$top);
    }
}

