
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Sat Mar 25 19:39:32 CET 2023
//----------------------------------------------------

package constructorast;

import java_cup.runtime.*;
import sajax_lex.AnalizadorLexicoSajax;
import sajax_lex.UnidadLexica;
import sajax_lex.TokenValue;
import errors.GestionErroresTiny;
import ast.*;
import java.util.ArrayList;
import java.util.Arrays;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Sat Mar 25 19:39:32 CET 2023
  */
public class ConstructorASTExp extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ConstructorASTExp() {super();}

  /** Constructor which sets the default scanner. */
  public ConstructorASTExp(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ConstructorASTExp(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\120\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\004" +
    "\000\002\003\004\000\002\003\004\000\002\003\004\000" +
    "\002\003\004\000\002\003\004\000\002\003\002\000\002" +
    "\010\004\000\002\006\012\000\002\006\016\000\002\030" +
    "\012\000\002\030\002\000\002\005\005\000\002\004\007" +
    "\000\002\012\013\000\002\012\015\000\002\007\011\000" +
    "\002\014\010\000\002\013\012\000\002\014\010\000\002" +
    "\013\012\000\002\011\007\000\002\011\007\000\002\011" +
    "\007\000\002\011\007\000\002\011\007\000\002\011\004" +
    "\000\002\023\006\000\002\033\003\000\002\033\002\000" +
    "\002\034\005\000\002\034\003\000\002\031\003\000\002" +
    "\031\002\000\002\032\006\000\002\032\004\000\002\015" +
    "\005\000\002\015\005\000\002\015\003\000\002\016\005" +
    "\000\002\016\005\000\002\016\005\000\002\016\005\000" +
    "\002\016\003\000\002\017\005\000\002\017\005\000\002" +
    "\017\005\000\002\017\003\000\002\020\005\000\002\020" +
    "\005\000\002\020\005\000\002\020\005\000\002\020\003" +
    "\000\002\021\005\000\002\021\004\000\002\021\003\000" +
    "\002\022\003\000\002\022\004\000\002\022\003\000\002" +
    "\022\004\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\022\005\000\002\022\003\000\002\027\004" +
    "\000\002\027\003\000\002\026\003\000\002\026\003\000" +
    "\002\024\004\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\025\004\000\002\025\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\260\000\040\002\ufff6\027\ufff6\030\ufff6\031\ufff6\037" +
    "\ufff6\045\ufff6\047\ufff6\050\ufff6\051\ufff6\052\ufff6\053\ufff6" +
    "\054\ufff6\055\ufff6\056\ufff6\070\ufff6\001\002\000\042\002" +
    "\001\027\013\030\036\031\040\035\001\037\020\045\026" +
    "\047\030\050\034\051\011\052\023\053\035\054\031\055" +
    "\024\056\007\070\016\001\002\000\004\002\006\001\002" +
    "\000\004\002\000\001\002\000\004\025\257\001\002\000" +
    "\042\002\uffff\027\uffff\030\uffff\031\uffff\035\uffff\037\uffff" +
    "\045\uffff\047\uffff\050\uffff\051\uffff\052\uffff\053\uffff\054" +
    "\uffff\055\uffff\056\uffff\070\uffff\001\002\000\006\011\uffb5" +
    "\070\uffb5\001\002\000\042\002\ufff9\027\ufff9\030\ufff9\031" +
    "\ufff9\035\ufff9\037\ufff9\045\ufff9\047\ufff9\050\ufff9\051\ufff9" +
    "\052\ufff9\053\ufff9\054\ufff9\055\ufff9\056\ufff9\070\ufff9\001" +
    "\002\000\004\025\251\001\002\000\006\011\240\070\241" +
    "\001\002\000\042\002\ufffe\027\ufffe\030\ufffe\031\ufffe\035" +
    "\ufffe\037\ufffe\045\ufffe\047\ufffe\050\ufffe\051\ufffe\052\ufffe" +
    "\053\ufffe\054\ufffe\055\ufffe\056\ufffe\070\ufffe\001\002\000" +
    "\010\011\uffb2\025\134\070\uffb2\001\002\000\042\002\ufffa" +
    "\027\ufffa\030\ufffa\031\ufffa\035\ufffa\037\ufffa\045\ufffa\047" +
    "\ufffa\050\ufffa\051\ufffa\052\ufffa\053\ufffa\054\ufffa\055\ufffa" +
    "\056\ufffa\070\ufffa\001\002\000\004\025\216\001\002\000" +
    "\004\036\215\001\002\000\042\002\ufffc\027\ufffc\030\ufffc" +
    "\031\ufffc\035\ufffc\037\ufffc\045\ufffc\047\ufffc\050\ufffc\051" +
    "\ufffc\052\ufffc\053\ufffc\054\ufffc\055\ufffc\056\ufffc\070\ufffc" +
    "\001\002\000\006\011\uffb4\070\uffb4\001\002\000\004\025" +
    "\211\001\002\000\042\002\ufffd\027\ufffd\030\ufffd\031\ufffd" +
    "\035\ufffd\037\ufffd\045\ufffd\047\ufffd\050\ufffd\051\ufffd\052" +
    "\ufffd\053\ufffd\054\ufffd\055\ufffd\056\ufffd\070\ufffd\001\002" +
    "\000\004\036\210\001\002\000\006\011\207\070\uffb9\001" +
    "\002\000\004\025\203\001\002\000\004\025\177\001\002" +
    "\000\006\011\176\070\uffb8\001\002\000\004\070\153\001" +
    "\002\000\004\025\147\001\002\000\006\011\uffb6\070\uffb6" +
    "\001\002\000\004\025\043\001\002\000\042\002\ufff7\027" +
    "\ufff7\030\ufff7\031\ufff7\035\ufff7\037\ufff7\045\ufff7\047\ufff7" +
    "\050\ufff7\051\ufff7\052\ufff7\053\ufff7\054\ufff7\055\ufff7\056" +
    "\ufff7\070\ufff7\001\002\000\006\011\uffba\070\uffba\001\002" +
    "\000\042\002\ufffb\027\ufffb\030\ufffb\031\ufffb\035\ufffb\037" +
    "\ufffb\045\ufffb\047\ufffb\050\ufffb\051\ufffb\052\ufffb\053\ufffb" +
    "\054\ufffb\055\ufffb\056\ufffb\070\ufffb\001\002\000\042\002" +
    "\ufff8\027\ufff8\030\ufff8\031\ufff8\035\ufff8\037\ufff8\045\ufff8" +
    "\047\ufff8\050\ufff8\051\ufff8\052\ufff8\053\ufff8\054\ufff8\055" +
    "\ufff8\056\ufff8\070\ufff8\001\002\000\022\006\061\010\044" +
    "\025\046\064\050\065\053\066\045\067\055\070\047\001" +
    "\002\000\006\066\146\067\145\001\002\000\044\004\uffc4" +
    "\005\uffc4\007\uffc4\010\uffc4\011\uffc4\012\uffc4\013\uffc4\014" +
    "\uffc4\015\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4" +
    "\024\uffc4\026\uffc4\036\uffc4\001\002\000\022\006\061\010" +
    "\044\025\046\064\050\065\053\066\045\067\055\070\047" +
    "\001\002\000\046\004\uffbe\005\uffbe\007\uffbe\010\uffbe\011" +
    "\uffbe\012\uffbe\013\uffbe\014\uffbe\015\uffbe\016\uffbe\017\uffbe" +
    "\020\uffbe\021\uffbe\022\uffbe\024\uffbe\025\134\026\uffbe\036" +
    "\uffbe\001\002\000\044\004\uffc0\005\uffc0\007\uffc0\010\uffc0" +
    "\011\uffc0\012\uffc0\013\uffc0\014\uffc0\015\uffc0\016\uffc0\017" +
    "\uffc0\020\uffc0\021\uffc0\022\uffc0\024\uffc0\026\uffc0\036\uffc0" +
    "\001\002\000\044\004\uffbc\005\uffbc\007\uffbc\010\uffbc\011" +
    "\uffbc\012\uffbc\013\uffbc\014\uffbc\015\uffbc\016\uffbc\017\uffbc" +
    "\020\uffbc\021\uffbc\022\uffbc\024\uffbc\026\uffbc\036\uffbc\001" +
    "\002\000\044\004\uffc5\005\uffc5\007\uffc5\010\uffc5\011\uffc5" +
    "\012\uffc5\013\132\014\uffc5\015\uffc5\016\uffc5\017\uffc5\020" +
    "\uffc5\021\uffc5\022\uffc5\024\uffc5\026\uffc5\036\uffc5\001\002" +
    "\000\044\004\uffbf\005\uffbf\007\uffbf\010\uffbf\011\uffbf\012" +
    "\uffbf\013\uffbf\014\uffbf\015\uffbf\016\uffbf\017\uffbf\020\uffbf" +
    "\021\uffbf\022\uffbf\024\uffbf\026\uffbf\036\uffbf\001\002\000" +
    "\004\036\116\001\002\000\044\004\uffc2\005\uffc2\007\uffc2" +
    "\010\uffc2\011\uffc2\012\uffc2\013\uffc2\014\uffc2\015\uffc2\016" +
    "\uffc2\017\uffc2\020\uffc2\021\uffc2\022\uffc2\024\uffc2\026\uffc2" +
    "\036\uffc2\001\002\000\014\015\112\016\113\024\uffd6\026" +
    "\uffd6\036\uffd6\001\002\000\032\004\102\007\074\010\076" +
    "\015\uffd1\016\uffd1\017\100\020\101\021\077\022\075\024" +
    "\uffd1\026\uffd1\036\uffd1\001\002\000\042\004\uffcd\005\065" +
    "\007\uffcd\010\uffcd\011\067\012\066\014\064\015\uffcd\016" +
    "\uffcd\017\uffcd\020\uffcd\021\uffcd\022\uffcd\024\uffcd\026\uffcd" +
    "\036\uffcd\001\002\000\022\006\061\010\044\025\046\064" +
    "\050\065\053\066\045\067\055\070\047\001\002\000\042" +
    "\004\uffc8\005\uffc8\007\uffc8\010\uffc8\011\uffc8\012\uffc8\014" +
    "\uffc8\015\uffc8\016\uffc8\017\uffc8\020\uffc8\021\uffc8\022\uffc8" +
    "\024\uffc8\026\uffc8\036\uffc8\001\002\000\042\004\uffc6\005" +
    "\uffc6\007\uffc6\010\uffc6\011\uffc6\012\uffc6\014\uffc6\015\uffc6" +
    "\016\uffc6\017\uffc6\020\uffc6\021\uffc6\022\uffc6\024\uffc6\026" +
    "\uffc6\036\uffc6\001\002\000\022\006\061\010\044\025\046" +
    "\064\050\065\053\066\045\067\055\070\047\001\002\000" +
    "\022\006\061\010\044\025\046\064\050\065\053\066\045" +
    "\067\055\070\047\001\002\000\022\006\061\010\044\025" +
    "\046\064\050\065\053\066\045\067\055\070\047\001\002" +
    "\000\022\006\061\010\044\025\046\064\050\065\053\066" +
    "\045\067\055\070\047\001\002\000\042\004\uffcb\005\uffcb" +
    "\007\uffcb\010\uffcb\011\uffcb\012\uffcb\014\uffcb\015\uffcb\016" +
    "\uffcb\017\uffcb\020\uffcb\021\uffcb\022\uffcb\024\uffcb\026\uffcb" +
    "\036\uffcb\001\002\000\042\004\uffca\005\uffca\007\uffca\010" +
    "\uffca\011\uffca\012\uffca\014\uffca\015\uffca\016\uffca\017\uffca" +
    "\020\uffca\021\uffca\022\uffca\024\uffca\026\uffca\036\uffca\001" +
    "\002\000\042\004\uffcc\005\uffcc\007\uffcc\010\uffcc\011\uffcc" +
    "\012\uffcc\014\uffcc\015\uffcc\016\uffcc\017\uffcc\020\uffcc\021" +
    "\uffcc\022\uffcc\024\uffcc\026\uffcc\036\uffcc\001\002\000\042" +
    "\004\uffc9\005\uffc9\007\uffc9\010\uffc9\011\uffc9\012\uffc9\014" +
    "\uffc9\015\uffc9\016\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9" +
    "\024\uffc9\026\uffc9\036\uffc9\001\002\000\022\006\061\010" +
    "\044\025\046\064\050\065\053\066\045\067\055\070\047" +
    "\001\002\000\022\006\061\010\044\025\046\064\050\065" +
    "\053\066\045\067\055\070\047\001\002\000\022\006\061" +
    "\010\044\025\046\064\050\065\053\066\045\067\055\070" +
    "\047\001\002\000\022\006\061\010\044\025\046\064\050" +
    "\065\053\066\045\067\055\070\047\001\002\000\022\006" +
    "\061\010\044\025\046\064\050\065\053\066\045\067\055" +
    "\070\047\001\002\000\022\006\061\010\044\025\046\064" +
    "\050\065\053\066\045\067\055\070\047\001\002\000\022" +
    "\006\061\010\044\025\046\064\050\065\053\066\045\067" +
    "\055\070\047\001\002\000\042\004\uffd0\005\065\007\uffd0" +
    "\010\uffd0\011\067\012\066\014\064\015\uffd0\016\uffd0\017" +
    "\uffd0\020\uffd0\021\uffd0\022\uffd0\024\uffd0\026\uffd0\036\uffd0" +
    "\001\002\000\022\004\102\007\074\010\076\015\uffd4\016" +
    "\uffd4\024\uffd4\026\uffd4\036\uffd4\001\002\000\022\004\102" +
    "\007\074\010\076\015\uffd5\016\uffd5\024\uffd5\026\uffd5\036" +
    "\uffd5\001\002\000\022\004\102\007\074\010\076\015\uffd3" +
    "\016\uffd3\024\uffd3\026\uffd3\036\uffd3\001\002\000\042\004" +
    "\uffce\005\065\007\uffce\010\uffce\011\067\012\066\014\064" +
    "\015\uffce\016\uffce\017\uffce\020\uffce\021\uffce\022\uffce\024" +
    "\uffce\026\uffce\036\uffce\001\002\000\022\004\102\007\074" +
    "\010\076\015\uffd2\016\uffd2\024\uffd2\026\uffd2\036\uffd2\001" +
    "\002\000\042\004\uffcf\005\065\007\uffcf\010\uffcf\011\067" +
    "\012\066\014\064\015\uffcf\016\uffcf\017\uffcf\020\uffcf\021" +
    "\uffcf\022\uffcf\024\uffcf\026\uffcf\036\uffcf\001\002\000\022" +
    "\006\061\010\044\025\046\064\050\065\053\066\045\067" +
    "\055\070\047\001\002\000\022\006\061\010\044\025\046" +
    "\064\050\065\053\066\045\067\055\070\047\001\002\000" +
    "\010\024\uffd7\026\uffd7\036\uffd7\001\002\000\010\024\uffd8" +
    "\026\uffd8\036\uffd8\001\002\000\022\006\061\010\044\025" +
    "\046\064\050\065\053\066\045\067\055\070\047\001\002" +
    "\000\006\026\120\036\121\001\002\000\004\034\127\001" +
    "\002\000\022\006\061\010\044\025\046\064\050\065\053" +
    "\066\045\067\055\070\047\001\002\000\004\026\123\001" +
    "\002\000\004\034\124\001\002\000\040\027\ufff6\030\ufff6" +
    "\031\ufff6\035\ufff6\037\ufff6\045\ufff6\047\ufff6\050\ufff6\051" +
    "\ufff6\052\ufff6\053\ufff6\054\ufff6\055\ufff6\056\ufff6\070\ufff6" +
    "\001\002\000\004\035\126\001\002\000\042\002\uffed\027" +
    "\uffed\030\uffed\031\uffed\035\uffed\037\uffed\045\uffed\047\uffed" +
    "\050\uffed\051\uffed\052\uffed\053\uffed\054\uffed\055\uffed\056" +
    "\uffed\070\uffed\001\002\000\040\027\ufff6\030\ufff6\031\ufff6" +
    "\035\ufff6\037\ufff6\045\ufff6\047\ufff6\050\ufff6\051\ufff6\052" +
    "\ufff6\053\ufff6\054\ufff6\055\ufff6\056\ufff6\070\ufff6\001\002" +
    "\000\004\035\131\001\002\000\042\002\uffee\027\uffee\030" +
    "\uffee\031\uffee\035\uffee\037\uffee\045\uffee\047\uffee\050\uffee" +
    "\051\uffee\052\uffee\053\uffee\054\uffee\055\uffee\056\uffee\070" +
    "\uffee\001\002\000\022\006\061\010\044\025\046\064\050" +
    "\065\053\066\045\067\055\070\047\001\002\000\042\004" +
    "\uffc7\005\uffc7\007\uffc7\010\uffc7\011\uffc7\012\uffc7\014\uffc7" +
    "\015\uffc7\016\uffc7\017\uffc7\020\uffc7\021\uffc7\022\uffc7\024" +
    "\uffc7\026\uffc7\036\uffc7\001\002\000\024\006\061\010\044" +
    "\025\046\026\uffdf\064\050\065\053\066\045\067\055\070" +
    "\047\001\002\000\006\024\141\026\uffe0\001\002\000\006" +
    "\024\uffdd\026\uffdd\001\002\000\004\026\140\001\002\000" +
    "\044\004\uffe1\005\uffe1\007\uffe1\010\uffe1\011\uffe1\012\uffe1" +
    "\013\uffe1\014\uffe1\015\uffe1\016\uffe1\017\uffe1\020\uffe1\021" +
    "\uffe1\022\uffe1\024\uffe1\026\uffe1\036\uffe1\001\002\000\022" +
    "\006\061\010\044\025\046\064\050\065\053\066\045\067" +
    "\055\070\047\001\002\000\006\024\uffde\026\uffde\001\002" +
    "\000\004\026\144\001\002\000\044\004\uffbd\005\uffbd\007" +
    "\uffbd\010\uffbd\011\uffbd\012\uffbd\013\uffbd\014\uffbd\015\uffbd" +
    "\016\uffbd\017\uffbd\020\uffbd\021\uffbd\022\uffbd\024\uffbd\026" +
    "\uffbd\036\uffbd\001\002\000\044\004\uffc1\005\uffc1\007\uffc1" +
    "\010\uffc1\011\uffc1\012\uffc1\013\uffc1\014\uffc1\015\uffc1\016" +
    "\uffc1\017\uffc1\020\uffc1\021\uffc1\022\uffc1\024\uffc1\026\uffc1" +
    "\036\uffc1\001\002\000\044\004\uffc3\005\uffc3\007\uffc3\010" +
    "\uffc3\011\uffc3\012\uffc3\013\uffc3\014\uffc3\015\uffc3\016\uffc3" +
    "\017\uffc3\020\uffc3\021\uffc3\022\uffc3\024\uffc3\026\uffc3\036" +
    "\uffc3\001\002\000\004\070\150\001\002\000\004\026\151" +
    "\001\002\000\004\036\152\001\002\000\042\002\uffe3\027" +
    "\uffe3\030\uffe3\031\uffe3\035\uffe3\037\uffe3\045\uffe3\047\uffe3" +
    "\050\uffe3\051\uffe3\052\uffe3\053\uffe3\054\uffe3\055\uffe3\056" +
    "\uffe3\070\uffe3\001\002\000\010\023\156\025\155\036\154" +
    "\001\002\000\042\002\ufff0\027\ufff0\030\ufff0\031\ufff0\035" +
    "\ufff0\037\ufff0\045\ufff0\047\ufff0\050\ufff0\051\ufff0\052\ufff0" +
    "\053\ufff0\054\ufff0\055\ufff0\056\ufff0\070\ufff0\001\002\000" +
    "\014\026\uffdb\051\011\052\023\053\035\070\162\001\002" +
    "\000\022\006\061\010\044\025\046\064\050\065\053\066" +
    "\045\067\055\070\047\001\002\000\004\036\160\001\002" +
    "\000\042\002\uffef\027\uffef\030\uffef\031\uffef\035\uffef\037" +
    "\uffef\045\uffef\047\uffef\050\uffef\051\uffef\052\uffef\053\uffef" +
    "\054\uffef\055\uffef\056\uffef\070\uffef\001\002\000\004\070" +
    "\175\001\002\000\006\011\uffb2\070\uffb2\001\002\000\006" +
    "\024\172\026\uffdc\001\002\000\004\026\165\001\002\000" +
    "\006\034\166\036\167\001\002\000\040\027\ufff6\030\ufff6" +
    "\031\ufff6\035\ufff6\037\ufff6\045\ufff6\047\ufff6\050\ufff6\051" +
    "\ufff6\052\ufff6\053\ufff6\054\ufff6\055\ufff6\056\ufff6\070\ufff6" +
    "\001\002\000\042\002\uffeb\027\uffeb\030\uffeb\031\uffeb\035" +
    "\uffeb\037\uffeb\045\uffeb\047\uffeb\050\uffeb\051\uffeb\052\uffeb" +
    "\053\uffeb\054\uffeb\055\uffeb\056\uffeb\070\uffeb\001\002\000" +
    "\004\035\171\001\002\000\042\002\uffea\027\uffea\030\uffea" +
    "\031\uffea\035\uffea\037\uffea\045\uffea\047\uffea\050\uffea\051" +
    "\uffea\052\uffea\053\uffea\054\uffea\055\uffea\056\uffea\070\uffea" +
    "\001\002\000\012\051\011\052\023\053\035\070\162\001" +
    "\002\000\004\070\174\001\002\000\006\024\uffda\026\uffda" +
    "\001\002\000\006\024\uffd9\026\uffd9\001\002\000\006\011" +
    "\uffb3\070\uffb3\001\002\000\022\006\061\010\044\025\046" +
    "\064\050\065\053\066\045\067\055\070\047\001\002\000" +
    "\004\026\201\001\002\000\004\036\202\001\002\000\042" +
    "\002\uffe7\027\uffe7\030\uffe7\031\uffe7\035\uffe7\037\uffe7\045" +
    "\uffe7\047\uffe7\050\uffe7\051\uffe7\052\uffe7\053\uffe7\054\uffe7" +
    "\055\uffe7\056\uffe7\070\uffe7\001\002\000\022\006\061\010" +
    "\044\025\046\064\050\065\053\066\045\067\055\070\047" +
    "\001\002\000\004\026\205\001\002\000\004\036\206\001" +
    "\002\000\042\002\uffe4\027\uffe4\030\uffe4\031\uffe4\035\uffe4" +
    "\037\uffe4\045\uffe4\047\uffe4\050\uffe4\051\uffe4\052\uffe4\053" +
    "\uffe4\054\uffe4\055\uffe4\056\uffe4\070\uffe4\001\002\000\006" +
    "\011\uffb7\070\uffb7\001\002\000\042\002\ufff5\027\ufff5\030" +
    "\ufff5\031\ufff5\035\ufff5\037\ufff5\045\ufff5\047\ufff5\050\ufff5" +
    "\051\ufff5\052\ufff5\053\ufff5\054\ufff5\055\ufff5\056\ufff5\070" +
    "\ufff5\001\002\000\022\006\061\010\044\025\046\064\050" +
    "\065\053\066\045\067\055\070\047\001\002\000\004\026" +
    "\213\001\002\000\004\036\214\001\002\000\042\002\uffe6" +
    "\027\uffe6\030\uffe6\031\uffe6\035\uffe6\037\uffe6\045\uffe6\047" +
    "\uffe6\050\uffe6\051\uffe6\052\uffe6\053\uffe6\054\uffe6\055\uffe6" +
    "\056\uffe6\070\uffe6\001\002\000\042\002\uffe2\027\uffe2\030" +
    "\uffe2\031\uffe2\035\uffe2\037\uffe2\045\uffe2\047\uffe2\050\uffe2" +
    "\051\uffe2\052\uffe2\053\uffe2\054\uffe2\055\uffe2\056\uffe2\070" +
    "\uffe2\001\002\000\022\006\061\010\044\025\046\064\050" +
    "\065\053\066\045\067\055\070\047\001\002\000\004\026" +
    "\220\001\002\000\004\034\221\001\002\000\040\027\ufff6" +
    "\030\ufff6\031\ufff6\035\ufff6\037\ufff6\045\ufff6\047\ufff6\050" +
    "\ufff6\051\ufff6\052\ufff6\053\ufff6\054\ufff6\055\ufff6\056\ufff6" +
    "\070\ufff6\001\002\000\004\035\223\001\002\000\046\002" +
    "\ufff1\027\ufff1\030\ufff1\031\ufff1\035\ufff1\037\ufff1\040\ufff1" +
    "\041\ufff1\045\ufff1\047\ufff1\050\ufff1\051\ufff1\052\ufff1\053" +
    "\ufff1\054\ufff1\055\ufff1\056\ufff1\070\ufff1\001\002\000\046" +
    "\002\ufff4\027\ufff4\030\ufff4\031\ufff4\035\ufff4\037\ufff4\040" +
    "\226\041\225\045\ufff4\047\ufff4\050\ufff4\051\ufff4\052\ufff4" +
    "\053\ufff4\054\ufff4\055\ufff4\056\ufff4\070\ufff4\001\002\000" +
    "\004\034\235\001\002\000\004\025\227\001\002\000\022" +
    "\006\061\010\044\025\046\064\050\065\053\066\045\067" +
    "\055\070\047\001\002\000\004\026\231\001\002\000\004" +
    "\034\232\001\002\000\040\027\ufff6\030\ufff6\031\ufff6\035" +
    "\ufff6\037\ufff6\045\ufff6\047\ufff6\050\ufff6\051\ufff6\052\ufff6" +
    "\053\ufff6\054\ufff6\055\ufff6\056\ufff6\070\ufff6\001\002\000" +
    "\004\035\234\001\002\000\046\002\ufff2\027\ufff2\030\ufff2" +
    "\031\ufff2\035\ufff2\037\ufff2\040\ufff2\041\ufff2\045\ufff2\047" +
    "\ufff2\050\ufff2\051\ufff2\052\ufff2\053\ufff2\054\ufff2\055\ufff2" +
    "\056\ufff2\070\ufff2\001\002\000\040\027\ufff6\030\ufff6\031" +
    "\ufff6\035\ufff6\037\ufff6\045\ufff6\047\ufff6\050\ufff6\051\ufff6" +
    "\052\ufff6\053\ufff6\054\ufff6\055\ufff6\056\ufff6\070\ufff6\001" +
    "\002\000\004\035\237\001\002\000\042\002\ufff3\027\ufff3" +
    "\030\ufff3\031\ufff3\035\ufff3\037\ufff3\045\ufff3\047\ufff3\050" +
    "\ufff3\051\ufff3\052\ufff3\053\ufff3\054\ufff3\055\ufff3\056\ufff3" +
    "\070\ufff3\001\002\000\006\011\uffbb\070\uffbb\001\002\000" +
    "\004\025\242\001\002\000\014\026\uffdb\051\011\052\023" +
    "\053\035\070\162\001\002\000\004\026\244\001\002\000" +
    "\006\034\245\036\246\001\002\000\040\027\ufff6\030\ufff6" +
    "\031\ufff6\035\ufff6\037\ufff6\045\ufff6\047\ufff6\050\ufff6\051" +
    "\ufff6\052\ufff6\053\ufff6\054\ufff6\055\ufff6\056\ufff6\070\ufff6" +
    "\001\002\000\042\002\uffe9\027\uffe9\030\uffe9\031\uffe9\035" +
    "\uffe9\037\uffe9\045\uffe9\047\uffe9\050\uffe9\051\uffe9\052\uffe9" +
    "\053\uffe9\054\uffe9\055\uffe9\056\uffe9\070\uffe9\001\002\000" +
    "\004\035\250\001\002\000\042\002\uffe8\027\uffe8\030\uffe8" +
    "\031\uffe8\035\uffe8\037\uffe8\045\uffe8\047\uffe8\050\uffe8\051" +
    "\uffe8\052\uffe8\053\uffe8\054\uffe8\055\uffe8\056\uffe8\070\uffe8" +
    "\001\002\000\022\006\061\010\044\025\046\064\050\065" +
    "\053\066\045\067\055\070\047\001\002\000\004\026\253" +
    "\001\002\000\004\034\254\001\002\000\040\027\ufff6\030" +
    "\ufff6\031\ufff6\035\ufff6\037\ufff6\045\ufff6\047\ufff6\050\ufff6" +
    "\051\ufff6\052\ufff6\053\ufff6\054\ufff6\055\ufff6\056\ufff6\070" +
    "\ufff6\001\002\000\004\035\256\001\002\000\042\002\uffec" +
    "\027\uffec\030\uffec\031\uffec\035\uffec\037\uffec\045\uffec\047" +
    "\uffec\050\uffec\051\uffec\052\uffec\053\uffec\054\uffec\055\uffec" +
    "\056\uffec\070\uffec\001\002\000\004\070\260\001\002\000" +
    "\004\026\261\001\002\000\004\036\262\001\002\000\042" +
    "\002\uffe5\027\uffe5\030\uffe5\031\uffe5\035\uffe5\037\uffe5\045" +
    "\uffe5\047\uffe5\050\uffe5\051\uffe5\052\uffe5\053\uffe5\054\uffe5" +
    "\055\uffe5\056\uffe5\070\uffe5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\260\000\006\002\004\003\003\001\001\000\036\004" +
    "\007\005\014\006\024\007\040\010\016\011\036\012\021" +
    "\013\041\014\011\023\020\024\026\025\031\026\032\027" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\015\053\016\055\017" +
    "\056\020\057\021\061\022\051\023\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\015\142\016\055\017" +
    "\056\020\057\021\061\022\051\023\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\021\062\022\051\023\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\021\072\022\051\023\050\001" +
    "\001\000\010\021\071\022\051\023\050\001\001\000\010" +
    "\021\070\022\051\023\050\001\001\000\010\021\067\022" +
    "\051\023\050\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\020\110\021" +
    "\061\022\051\023\050\001\001\000\014\017\107\020\057" +
    "\021\061\022\051\023\050\001\001\000\012\020\106\021" +
    "\061\022\051\023\050\001\001\000\014\017\105\020\057" +
    "\021\061\022\051\023\050\001\001\000\014\017\104\020" +
    "\057\021\061\022\051\023\050\001\001\000\014\017\103" +
    "\020\057\021\061\022\051\023\050\001\001\000\012\020" +
    "\102\021\061\022\051\023\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\016\114\017\056\020\057\021\061\022\051\023\050\001" +
    "\001\000\016\016\113\017\056\020\057\021\061\022\051" +
    "\023\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\015\116\016\055\017\056\020\057\021\061\022\051" +
    "\023\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\015\121\016\055\017\056\020\057\021\061\022\051" +
    "\023\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\002\124\003\003\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\002\127\003\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\021\132\022\051\023\050" +
    "\001\001\000\002\001\001\000\024\015\135\016\055\017" +
    "\056\020\057\021\061\022\051\023\050\033\136\034\134" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\015\141\016\055\017\056" +
    "\020\057\021\061\022\051\023\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\024\026\025\031\026\160\031\163\032" +
    "\162\001\001\000\020\015\156\016\055\017\056\020\057" +
    "\021\061\022\051\023\050\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\002" +
    "\167\003\003\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\024\026\025\031\026\172\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\015\177\016\055\017\056\020" +
    "\057\021\061\022\051\023\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\015\203\016" +
    "\055\017\056\020\057\021\061\022\051\023\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\015\211\016\055" +
    "\017\056\020\057\021\061\022\051\023\050\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\015\216\016\055\017\056\020\057\021" +
    "\061\022\051\023\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\002\221\003\003\001\001\000\002\001" +
    "\001\000\004\030\223\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\015\227\016\055\017" +
    "\056\020\057\021\061\022\051\023\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\002\232\003\003\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\002\235" +
    "\003\003\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\024\026\025\031" +
    "\026\160\031\242\032\162\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\002\246\003\003\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\015" +
    "\251\016\055\017\056\020\057\021\061\022\051\023\050" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\002" +
    "\254\003\003\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ConstructorASTExp$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ConstructorASTExp$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ConstructorASTExp$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny();
   AnalizadorLexicoSajax sajax = (AnalizadorLexicoSajax)getScanner();
   sajax.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ConstructorASTExp$actions {
  private final ConstructorASTExp parser;

  /** Constructor */
  CUP$ConstructorASTExp$actions(ConstructorASTExp parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ConstructorASTExp$do_action_part00000000(
    int                        CUP$ConstructorASTExp$act_num,
    java_cup.runtime.lr_parser CUP$ConstructorASTExp$parser,
    java.util.Stack            CUP$ConstructorASTExp$stack,
    int                        CUP$ConstructorASTExp$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ConstructorASTExp$result;

      /* select the action based on the action number */
      switch (CUP$ConstructorASTExp$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= BloqueGeneral 
            {
              Bloque RESULT =null;
		ArrayList<Statement> block = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new Bloque(block); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("S",0, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		Bloque start_val = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		RESULT = start_val;
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$ConstructorASTExp$parser.done_parsing();
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // BloqueGeneral ::= BloqueGeneral SAsign 
            {
              ArrayList<Statement> RESULT =null;
		ArrayList<Statement> genBlock = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Statement aDeexp = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 genBlock.add(aDeexp); RESULT=genBlock; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("BloqueGeneral",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // BloqueGeneral ::= BloqueGeneral SDec 
            {
              ArrayList<Statement> RESULT =null;
		ArrayList<Statement> genBlock = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Statement aDeexp = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 genBlock.add(aDeexp); RESULT=genBlock; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("BloqueGeneral",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // BloqueGeneral ::= BloqueGeneral SIf 
            {
              ArrayList<Statement> RESULT =null;
		ArrayList<Statement> genBlock = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Statement aDeexp = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 genBlock.add(aDeexp); RESULT=genBlock; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("BloqueGeneral",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // BloqueGeneral ::= BloqueGeneral SFor 
            {
              ArrayList<Statement> RESULT =null;
		ArrayList<Statement> genBlock = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Statement aDeexp = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 genBlock.add(aDeexp); RESULT=genBlock; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("BloqueGeneral",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // BloqueGeneral ::= BloqueGeneral SWhile 
            {
              ArrayList<Statement> RESULT =null;
		ArrayList<Statement> genBlock = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Statement aDeexp = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 genBlock.add(aDeexp); RESULT=genBlock; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("BloqueGeneral",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // BloqueGeneral ::= BloqueGeneral SBreak 
            {
              ArrayList<Statement> RESULT =null;
		ArrayList<Statement> genBlock = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Statement aDeexp = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 genBlock.add(aDeexp); RESULT=genBlock; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("BloqueGeneral",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // BloqueGeneral ::= BloqueGeneral SDecFuncionInline 
            {
              ArrayList<Statement> RESULT =null;
		ArrayList<Statement> genBlock = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		DecFuncion aDeexp = (DecFuncion)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 genBlock.add(aDeexp); RESULT=genBlock; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("BloqueGeneral",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // BloqueGeneral ::= BloqueGeneral SDecFuncion 
            {
              ArrayList<Statement> RESULT =null;
		ArrayList<Statement> genBlock = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		DecFuncion aDeexp = (DecFuncion)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 genBlock.add(aDeexp); RESULT=genBlock; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("BloqueGeneral",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // BloqueGeneral ::= BloqueGeneral SCallFun 
            {
              ArrayList<Statement> RESULT =null;
		ArrayList<Statement> genBlock = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Statement aDeexp = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 genBlock.add(aDeexp); RESULT=genBlock; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("BloqueGeneral",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // BloqueGeneral ::= 
            {
              ArrayList<Statement> RESULT =null;
		 RESULT=new ArrayList<Statement>(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("BloqueGeneral",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SBreak ::= BREAK PTOCOMA 
            {
              Statement RESULT =null;
		 RESULT=new Break(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SBreak",6, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SIf ::= IF PAP SExp4 PCIERRE LLAP S LLCIERRE SElsif 
            {
              Statement RESULT =null;
		E cond1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-5)).value;
		Bloque St = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		ArrayList<Elsif> arrayelsifs = (ArrayList<Elsif>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new IfElse(cond1, St, arrayelsifs); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SIf",4, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SIf ::= IF PAP SExp4 PCIERRE LLAP S LLCIERRE SElsif ELSE LLAP S LLCIERRE 
            {
              Statement RESULT =null;
		E cond2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-9)).value;
		Bloque St1 = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-6)).value;
		ArrayList<Elsif> arrayelsifs = (ArrayList<Elsif>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		Bloque St2 = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=new IfElse(cond2, St1, arrayelsifs, St2); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SIf",4, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SElsif ::= SElsif ELSIF PAP SExp4 PCIERRE LLAP S LLCIERRE 
            {
              ArrayList<Elsif> RESULT =null;
		ArrayList<Elsif> arrayelsifs = (ArrayList<Elsif>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-7)).value;
		E cond3 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		Bloque St3 = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 arrayelsifs.add(new Elsif(cond3, St3)); RESULT=arrayelsifs; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SElsif",22, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SElsif ::= 
            {
              ArrayList<Elsif> RESULT =null;
		 RESULT=new ArrayList<Elsif>(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SElsif",22, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SDec ::= Tipos IDEN PTOCOMA 
            {
              Statement RESULT =null;
		Tipo tipoAsig = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		TokenValue ident = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=new Dec(tipoAsig, ident.lexema); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SDec",3, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SAsign ::= Tipos IDEN IGUAL SExp4 PTOCOMA 
            {
              Statement RESULT =null;
		Tipo tipoAsig = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		TokenValue ident = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		E expterm = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=new Asign(tipoAsig, ident.lexema, expterm); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SAsign",2, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SFor ::= FOR PAP SExp4 PTOCOMA SExp4 PCIERRE LLAP S LLCIERRE 
            {
              Statement RESULT =null;
		E inicio = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-6)).value;
		E fin = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		Bloque statement = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=new For(inicio, fin, statement); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SFor",8, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SFor ::= FOR PAP SExp4 PTOCOMA SExp4 PTOCOMA SExp4 PCIERRE LLAP S LLCIERRE 
            {
              Statement RESULT =null;
		E inicio = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-8)).value;
		E fin = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-6)).value;
		E paso = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		Bloque statement = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=new For(inicio, fin, paso, statement); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SFor",8, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SWhile ::= WHILE PAP SExp4 PCIERRE LLAP S LLCIERRE 
            {
              Statement RESULT =null;
		E cond = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		Bloque instrucciones = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=new While(cond, instrucciones); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SWhile",5, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SDecFuncionInline ::= Tipos IDEN PAP SParams PCIERRE PTOCOMA 
            {
              DecFuncion RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-5)).value;
		TokenValue name = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		ArrayList<Parametro> params = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		 RESULT=new DecFuncion(tipo, name.lexema, params, null); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SDecFuncionInline",10, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SDecFuncion ::= Tipos IDEN PAP SParams PCIERRE LLAP S LLCIERRE 
            {
              DecFuncion RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-7)).value;
		TokenValue name = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-6)).value;
		ArrayList<Parametro> params = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		Bloque block = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=new DecFuncion(tipo, name.lexema, params, block); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SDecFuncion",9, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SDecFuncionInline ::= TipoVoid IDEN PAP SParams PCIERRE PTOCOMA 
            {
              DecFuncion RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-5)).value;
		TokenValue name = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		ArrayList<Parametro> params = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		 RESULT=new DecFuncion(tipo, name.lexema, params, null); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SDecFuncionInline",10, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SDecFuncion ::= TipoVoid IDEN PAP SParams PCIERRE LLAP S LLCIERRE 
            {
              DecFuncion RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-7)).value;
		TokenValue name = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-6)).value;
		ArrayList<Parametro> params = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		Bloque block = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=new DecFuncion(tipo, name.lexema, params, block); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SDecFuncion",9, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SCallFun ::= PRINT PAP SExp4 PCIERRE PTOCOMA 
            {
              Statement RESULT =null;
		E expresion = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		 RESULT=new Print(expresion, false); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SCallFun",7, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SCallFun ::= PRINTLN PAP SExp4 PCIERRE PTOCOMA 
            {
              Statement RESULT =null;
		E expresion = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		 RESULT=new Print(expresion, true); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SCallFun",7, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SCallFun ::= INPUT PAP IDEN PCIERRE PTOCOMA 
            {
              Statement RESULT =null;
		TokenValue expresion = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		 RESULT=new Input(new Ident(expresion.lexema)); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SCallFun",7, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SCallFun ::= MEMSPACE PAP SExp4 PCIERRE PTOCOMA 
            {
              Statement RESULT =null;
		E arg1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		 RESULT=new Memspace(arg1); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SCallFun",7, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SCallFun ::= FREE PAP IDEN PCIERRE PTOCOMA 
            {
              Statement RESULT =null;
		TokenValue arg1 = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		 RESULT=new Free(new Ident(arg1.lexema)); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SCallFun",7, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SCallFun ::= CallFun PTOCOMA 
            {
              Statement RESULT =null;
		E llamada = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=llamada; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SCallFun",7, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CallFun ::= IDEN PAP SParExp PCIERRE 
            {
              E RESULT =null;
		TokenValue ident = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		ArrayList<E> parexp = (ArrayList<E>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=new LlamadaFuncion(ident.lexema, parexp); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("CallFun",17, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SParExp ::= SParExp1 
            {
              ArrayList<E> RESULT =null;
		ArrayList<E> sparexp1 = (ArrayList<E>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=sparexp1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SParExp",25, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SParExp ::= 
            {
              ArrayList<E> RESULT =null;
		 RESULT=new ArrayList<E>(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SParExp",25, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SParExp1 ::= SParExp1 COMA SExp4 
            {
              ArrayList<E> RESULT =null;
		ArrayList<E> parlist = (ArrayList<E>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E expr = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 parlist.add(expr); RESULT=parlist; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SParExp1",26, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SParExp1 ::= SExp4 
            {
              ArrayList<E> RESULT =null;
		E expr = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new ArrayList<E>(Arrays.asList(expr)); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SParExp1",26, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SParams ::= SParamsNoVacio 
            {
              ArrayList<Parametro> RESULT =null;
		ArrayList<Parametro> params = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=params; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SParams",23, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SParams ::= 
            {
              ArrayList<Parametro> RESULT =null;
		 RESULT=new ArrayList<Parametro>(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SParams",23, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SParamsNoVacio ::= SParamsNoVacio COMA Tipos IDEN 
            {
              ArrayList<Parametro> RESULT =null;
		ArrayList<Parametro> params = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		TokenValue name = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 params.add(new Parametro(tipo, name.lexema)); RESULT=params; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SParamsNoVacio",24, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SParamsNoVacio ::= Tipos IDEN 
            {
              ArrayList<Parametro> RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		TokenValue name = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new ArrayList<Parametro>(Arrays.asList(new Parametro(tipo, name.lexema))); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SParamsNoVacio",24, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SExp4 ::= SExp3 IGDOBLE SExp3 
            {
              E RESULT =null;
		E expterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E expterm2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new EBin(expterm1, expterm2,KindE.ID); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp4",11, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SExp4 ::= SExp3 DISTINTO SExp3 
            {
              E RESULT =null;
		E expterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E expterm2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new EBin(expterm1, expterm2,KindE.DISTINTO); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp4",11, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SExp4 ::= SExp3 
            {
              E RESULT =null;
		E expterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=expterm1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp4",11, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SExp3 ::= SExp2 MENOR SExp2 
            {
              E RESULT =null;
		E expterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E expterm2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new EBin(expterm1, expterm2,KindE.MENOR); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp3",12, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SExp3 ::= SExp2 MAYOR SExp2 
            {
              E RESULT =null;
		E expterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E expterm2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new EBin(expterm1, expterm2,KindE.MAYOR); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp3",12, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SExp3 ::= SExp2 MENIGUAL SExp2 
            {
              E RESULT =null;
		E expterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E expterm2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new EBin(expterm1, expterm2,KindE.MENIGUAL); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp3",12, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SExp3 ::= SExp2 MAYIGUAL SExp2 
            {
              E RESULT =null;
		E expterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E expterm2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new EBin(expterm1, expterm2,KindE.MAYIGUAL); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp3",12, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SExp3 ::= SExp2 
            {
              E RESULT =null;
		E expterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=expterm1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp3",12, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SExp2 ::= SExp2 OR SExp1 
            {
              E RESULT =null;
		E expterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E expterm2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new EBin(expterm1, expterm2, KindE.OR); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp2",13, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SExp2 ::= SExp2 MAS SExp1 
            {
              E RESULT =null;
		E floatexp1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E expterm = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(floatexp1,expterm,KindE.SUMA); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp2",13, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SExp2 ::= SExp2 MENOS SExp1 
            {
              E RESULT =null;
		E floatexp1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E expterm = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(floatexp1,expterm,KindE.RESTA); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp2",13, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SExp2 ::= SExp1 
            {
              E RESULT =null;
		E expterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=expterm1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp2",13, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SExp1 ::= SExp1 AND SExp0 
            {
              E RESULT =null;
		E expterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E expterm2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new EBin(expterm1, expterm2, KindE.AND); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp1",14, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SExp1 ::= SExp1 POR SExp0 
            {
              E RESULT =null;
		E expterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E expfact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(expterm1,expfact, KindE.MUL); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp1",14, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SExp1 ::= SExp1 DIV SExp0 
            {
              E RESULT =null;
		E expterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E expfact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(expterm1,expfact, KindE.DIV); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp1",14, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SExp1 ::= SExp1 MOD SExp0 
            {
              E RESULT =null;
		E aDeterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E aDefact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(aDeterm1,aDefact, KindE.MOD); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp1",14, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SExp1 ::= SExp0 
            {
              E RESULT =null;
		E expterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=expterm1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp1",14, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SExp0 ::= Exp POT SExp0 
            {
              E RESULT =null;
		E expfact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E expterm2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(expfact,expterm2, KindE.POT); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp0",15, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SExp0 ::= NOT SExp0 
            {
              E RESULT =null;
		E boolVal = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new Not(boolVal); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp0",15, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SExp0 ::= Exp 
            {
              E RESULT =null;
		E expterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=expterm1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp0",15, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Exp ::= ENT 
            {
              E RESULT =null;
		TokenValue numEnt = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new Ent(numEnt.lexema); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp",16, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Exp ::= MENOS ENT 
            {
              E RESULT =null;
		TokenValue numEnt = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new Ent("-" + numEnt.lexema); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp",16, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Exp ::= REAL 
            {
              E RESULT =null;
		TokenValue numReal = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new Real(numReal.lexema); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp",16, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Exp ::= MENOS REAL 
            {
              E RESULT =null;
		TokenValue numReal = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new Real("-" + numReal.lexema); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp",16, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Exp ::= TRUE 
            {
              E RESULT =null;
		Object trueterm = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new True(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp",16, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Exp ::= FALSE 
            {
              E RESULT =null;
		Object falseterm = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new False(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp",16, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Exp ::= IDEN 
            {
              E RESULT =null;
		TokenValue ident = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new Ident(ident.lexema); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp",16, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Exp ::= PAP SExp4 PCIERRE 
            {
              E RESULT =null;
		E expterm = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=expterm; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp",16, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Exp ::= CallFun 
            {
              E RESULT =null;
		E callfun = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=callfun; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp",16, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // TipoVoid ::= TipoVoid POR 
            {
              Tipo RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=new Puntero(tipo); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("TipoVoid",21, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // TipoVoid ::= VOID 
            {
              Tipo RESULT =null;
		 RESULT= new Tipo(TipoEnum.VOID); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("TipoVoid",21, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Tipos ::= TipoBas 
            {
              Tipo RESULT =null;
		Tipo tipobas = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=tipobas; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Tipos",20, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Tipos ::= TipoStruct 
            {
              Tipo RESULT =null;
		Tipo tipostruct = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=tipostruct; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Tipos",20, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // TipoBas ::= TipoBas POR 
            {
              Tipo RESULT =null;
		Tipo tipobas = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=new Puntero(tipobas); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("TipoBas",18, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // TipoBas ::= BOOL 
            {
              Tipo RESULT =null;
		 RESULT=new Tipo(TipoEnum.BOOL); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("TipoBas",18, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // TipoBas ::= INT 
            {
              Tipo RESULT =null;
		 RESULT=new Tipo(TipoEnum.INT); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("TipoBas",18, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // TipoBas ::= FLOAT 
            {
              Tipo RESULT =null;
		 RESULT=new Tipo(TipoEnum.FLOAT); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("TipoBas",18, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // TipoStruct ::= TipoStruct POR 
            {
              Tipo RESULT =null;
		Tipo ident = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=new Puntero(ident); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("TipoStruct",19, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // TipoStruct ::= IDEN 
            {
              Tipo RESULT =null;
		TokenValue ident = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new TipoStruct(ident.lexema); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("TipoStruct",19, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ConstructorASTExp$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ConstructorASTExp$do_action(
    int                        CUP$ConstructorASTExp$act_num,
    java_cup.runtime.lr_parser CUP$ConstructorASTExp$parser,
    java.util.Stack            CUP$ConstructorASTExp$stack,
    int                        CUP$ConstructorASTExp$top)
    throws java.lang.Exception
    {
              return CUP$ConstructorASTExp$do_action_part00000000(
                               CUP$ConstructorASTExp$act_num,
                               CUP$ConstructorASTExp$parser,
                               CUP$ConstructorASTExp$stack,
                               CUP$ConstructorASTExp$top);
    }
}

