
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Thu Mar 23 01:07:02 CET 2023
//----------------------------------------------------

package constructorast;

import java_cup.runtime.*;
import sajax_lex.AnalizadorLexicoSajax;
import sajax_lex.UnidadLexica;
import sajax_lex.TokenValue;
import errors.GestionErroresTiny;
import ast.*;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Thu Mar 23 01:07:02 CET 2023
  */
public class ConstructorASTExp extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ConstructorASTExp() {super();}

  /** Constructor which sets the default scanner. */
  public ConstructorASTExp(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ConstructorASTExp(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\051\000\002\002\003\000\002\002\004\000\002\002" +
    "\003\000\002\002\003\000\002\003\005\000\002\003\005" +
    "\000\002\003\003\000\002\004\005\000\002\004\005\000" +
    "\002\004\005\000\002\004\003\000\002\005\005\000\002" +
    "\005\003\000\002\006\003\000\002\006\005\000\002\007" +
    "\005\000\002\007\005\000\002\007\003\000\002\010\005" +
    "\000\002\010\005\000\002\010\003\000\002\011\005\000" +
    "\002\011\003\000\002\012\003\000\002\012\005\000\002" +
    "\013\005\000\002\013\005\000\002\013\005\000\002\013" +
    "\005\000\002\013\005\000\002\013\005\000\002\013\003" +
    "\000\002\014\005\000\002\014\003\000\002\015\005\000" +
    "\002\015\003\000\002\016\004\000\002\016\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\112\000\016\006\011\025\016\064\012\065\017\066" +
    "\025\067\022\001\002\000\016\002\uffdc\004\uffdc\005\uffdc" +
    "\015\uffdc\016\uffdc\026\uffdc\001\002\000\014\002\uffff\007" +
    "\034\010\036\015\077\016\100\001\002\000\022\002\ufff0" +
    "\007\ufff0\010\ufff0\011\041\012\040\015\ufff0\016\ufff0\026" +
    "\ufff0\001\002\000\022\002\uffed\007\uffed\010\uffed\011\uffed" +
    "\012\uffed\015\uffed\016\uffed\026\uffed\001\002\000\004\002" +
    "\114\001\002\000\012\006\011\025\065\064\012\065\017" +
    "\001\002\000\016\002\uffdb\004\uffdb\005\uffdb\015\uffdb\016" +
    "\uffdb\026\uffdb\001\002\000\014\002\001\007\052\010\053" +
    "\015\073\016\074\001\002\000\024\002\ufffb\007\ufffb\010" +
    "\ufffb\011\057\012\056\014\055\015\ufffb\016\ufffb\026\ufffb" +
    "\001\002\000\024\002\ufff7\007\ufff7\010\ufff7\011\ufff7\012" +
    "\ufff7\014\ufff7\015\ufff7\016\ufff7\026\ufff7\001\002\000\016" +
    "\006\011\025\016\064\012\065\017\066\025\067\022\001" +
    "\002\000\016\002\uffda\004\uffda\005\uffda\015\uffda\016\uffda" +
    "\026\uffda\001\002\000\004\002\ufffe\001\002\000\014\002" +
    "\uffe2\004\105\015\103\016\104\026\uffe2\001\002\000\024" +
    "\002\uffea\007\uffea\010\uffea\011\uffea\012\uffea\013\uffea\015" +
    "\uffea\016\uffea\026\uffea\001\002\000\016\002\uffe0\004\uffe0" +
    "\005\064\015\uffe0\016\uffe0\026\uffe0\001\002\000\016\002" +
    "\uffde\004\uffde\005\uffde\015\uffde\016\uffde\026\uffde\001\002" +
    "\000\026\002\ufff4\007\ufff4\010\ufff4\011\ufff4\012\ufff4\013" +
    "\ufff4\014\ufff4\015\ufff4\016\ufff4\026\ufff4\001\002\000\026" +
    "\002\ufff5\007\ufff5\010\ufff5\011\ufff5\012\ufff5\013\045\014" +
    "\ufff5\015\ufff5\016\ufff5\026\ufff5\001\002\000\024\002\uffeb" +
    "\007\uffeb\010\uffeb\011\uffeb\012\uffeb\013\030\015\uffeb\016" +
    "\uffeb\026\uffeb\001\002\000\006\025\031\067\022\001\002" +
    "\000\006\025\031\067\022\001\002\000\022\002\uffec\007" +
    "\uffec\010\uffec\011\uffec\012\uffec\015\uffec\016\uffec\026\uffec" +
    "\001\002\000\010\007\034\010\036\026\035\001\002\000" +
    "\006\025\031\067\022\001\002\000\024\002\uffe9\007\uffe9" +
    "\010\uffe9\011\uffe9\012\uffe9\013\uffe9\015\uffe9\016\uffe9\026" +
    "\uffe9\001\002\000\006\025\031\067\022\001\002\000\022" +
    "\002\ufff1\007\ufff1\010\ufff1\011\041\012\040\015\ufff1\016" +
    "\ufff1\026\ufff1\001\002\000\006\025\031\067\022\001\002" +
    "\000\006\025\031\067\022\001\002\000\022\002\uffef\007" +
    "\uffef\010\uffef\011\uffef\012\uffef\015\uffef\016\uffef\026\uffef" +
    "\001\002\000\022\002\uffee\007\uffee\010\uffee\011\uffee\012" +
    "\uffee\015\uffee\016\uffee\026\uffee\001\002\000\022\002\ufff2" +
    "\007\ufff2\010\ufff2\011\041\012\040\015\ufff2\016\ufff2\026" +
    "\ufff2\001\002\000\006\025\046\066\025\001\002\000\006" +
    "\025\046\066\025\001\002\000\024\002\ufff6\007\ufff6\010" +
    "\ufff6\011\ufff6\012\ufff6\014\ufff6\015\ufff6\016\ufff6\026\ufff6" +
    "\001\002\000\010\007\052\010\053\026\051\001\002\000" +
    "\026\002\ufff3\007\ufff3\010\ufff3\011\ufff3\012\ufff3\013\ufff3" +
    "\014\ufff3\015\ufff3\016\ufff3\026\ufff3\001\002\000\006\025" +
    "\046\066\025\001\002\000\006\025\046\066\025\001\002" +
    "\000\024\002\ufffc\007\ufffc\010\ufffc\011\057\012\056\014" +
    "\055\015\ufffc\016\ufffc\026\ufffc\001\002\000\006\025\046" +
    "\066\025\001\002\000\006\025\046\066\025\001\002\000" +
    "\006\025\046\066\025\001\002\000\024\002\ufffa\007\ufffa" +
    "\010\ufffa\011\ufffa\012\ufffa\014\ufffa\015\ufffa\016\ufffa\026" +
    "\ufffa\001\002\000\024\002\ufff9\007\ufff9\010\ufff9\011\ufff9" +
    "\012\ufff9\014\ufff9\015\ufff9\016\ufff9\026\ufff9\001\002\000" +
    "\024\002\ufff8\007\ufff8\010\ufff8\011\ufff8\012\ufff8\014\ufff8" +
    "\015\ufff8\016\ufff8\026\ufff8\001\002\000\024\002\ufffd\007" +
    "\ufffd\010\ufffd\011\057\012\056\014\055\015\ufffd\016\ufffd" +
    "\026\ufffd\001\002\000\012\006\011\025\065\064\012\065" +
    "\017\001\002\000\016\006\011\025\016\064\012\065\017" +
    "\066\025\067\022\001\002\000\016\002\uffdf\004\uffdf\005" +
    "\uffdf\015\uffdf\016\uffdf\026\uffdf\001\002\000\012\007\034" +
    "\010\036\015\077\016\100\001\002\000\012\007\052\010" +
    "\053\015\073\016\074\001\002\000\004\026\072\001\002" +
    "\000\016\002\uffd9\004\uffd9\005\uffd9\015\uffd9\016\uffd9\026" +
    "\uffd9\001\002\000\006\025\046\066\025\001\002\000\006" +
    "\025\046\066\025\001\002\000\012\002\uffe4\007\052\010" +
    "\053\026\uffe4\001\002\000\012\002\uffe7\007\052\010\053" +
    "\026\uffe7\001\002\000\006\025\031\067\022\001\002\000" +
    "\006\025\031\067\022\001\002\000\012\002\uffe3\007\034" +
    "\010\036\026\uffe3\001\002\000\012\002\uffe6\007\034\010" +
    "\036\026\uffe6\001\002\000\012\006\011\025\065\064\012" +
    "\065\017\001\002\000\012\006\011\025\065\064\012\065" +
    "\017\001\002\000\012\006\011\025\065\064\012\065\017" +
    "\001\002\000\016\002\uffe1\004\uffe1\005\064\015\uffe1\016" +
    "\uffe1\026\uffe1\001\002\000\010\002\uffe5\004\105\026\uffe5" +
    "\001\002\000\010\002\uffe8\004\105\026\uffe8\001\002\000" +
    "\014\007\034\010\036\015\077\016\100\026\035\001\002" +
    "\000\014\007\052\010\053\015\073\016\074\026\051\001" +
    "\002\000\016\002\uffdd\004\uffdd\005\uffdd\015\uffdd\016\uffdd" +
    "\026\uffdd\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\112\000\036\002\007\003\012\004\013\005\014\006" +
    "\025\007\004\010\005\011\006\012\026\013\017\014\020" +
    "\015\022\016\023\017\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\016\112\017\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\003\111\004\013\005\014\006\025\007\110\010" +
    "\005\011\006\012\026\013\070\014\020\015\022\016\023" +
    "\017\003\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\011\031\012\026\001\001\000\012\007\032" +
    "\010\005\011\006\012\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\010\043\011\006\012\026\001\001" +
    "\000\002\001\001\000\010\010\036\011\006\012\026\001" +
    "\001\000\002\001\001\000\006\011\042\012\026\001\001" +
    "\000\006\011\041\012\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\046\006\025" +
    "\001\001\000\012\003\047\004\013\005\014\006\025\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\004\062\005\014\006\025\001\001\000\010\004" +
    "\053\005\014\006\025\001\001\000\002\001\001\000\006" +
    "\005\061\006\025\001\001\000\006\005\060\006\025\001" +
    "\001\000\006\005\057\006\025\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\016\065\017\003\001\001\000\034\003\067\004\013" +
    "\005\014\006\025\007\066\010\005\011\006\012\026\013" +
    "\070\014\020\015\022\016\023\017\003\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\003\075\004\013\005\014" +
    "\006\025\001\001\000\012\003\074\004\013\005\014\006" +
    "\025\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\007\101\010\005\011\006\012\026\001\001\000\012\007" +
    "\100\010\005\011\006\012\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\014\107\015\022\016\023\017" +
    "\003\001\001\000\012\014\106\015\022\016\023\017\003" +
    "\001\001\000\010\015\105\016\023\017\003\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ConstructorASTExp$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ConstructorASTExp$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ConstructorASTExp$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny();
   AnalizadorLexicoSajax sajax = (AnalizadorLexicoSajax)getScanner();
   sajax.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ConstructorASTExp$actions {
  private final ConstructorASTExp parser;

  /** Constructor */
  CUP$ConstructorASTExp$actions(ConstructorASTExp parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ConstructorASTExp$do_action_part00000000(
    int                        CUP$ConstructorASTExp$act_num,
    java_cup.runtime.lr_parser CUP$ConstructorASTExp$parser,
    java.util.Stack            CUP$ConstructorASTExp$stack,
    int                        CUP$ConstructorASTExp$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ConstructorASTExp$result;

      /* select the action based on the action number */
      switch (CUP$ConstructorASTExp$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= EntLvl2 
            {
              E RESULT =null;
		E aDeexp = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=aDeexp; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("S",0, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		E start_val = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		RESULT = start_val;
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$ConstructorASTExp$parser.done_parsing();
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= FloatLvl2 
            {
              E RESULT =null;
		E floatexp = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=floatexp; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("S",0, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // S ::= BoolLvl3 
            {
              E RESULT =null;
		E boolexp = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=boolexp; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("S",0, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // EntLvl2 ::= EntLvl2 MAS EntLvl1 
            {
              E RESULT =null;
		E aDeexp1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E aDeterm = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(aDeexp1,aDeterm,KindE.SUMA); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("EntLvl2",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // EntLvl2 ::= EntLvl2 MENOS EntLvl1 
            {
              E RESULT =null;
		E aDeexp1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E aDeterm = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(aDeexp1,aDeterm,KindE.RESTA); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("EntLvl2",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // EntLvl2 ::= EntLvl1 
            {
              E RESULT =null;
		E aDeterm = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=aDeterm; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("EntLvl2",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // EntLvl1 ::= EntLvl1 POR EntLvl0 
            {
              E RESULT =null;
		E aDeterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E aDefact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(aDeterm1,aDefact, KindE.MUL); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("EntLvl1",2, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // EntLvl1 ::= EntLvl1 DIV EntLvl0 
            {
              E RESULT =null;
		E aDeterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E aDefact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(aDeterm1,aDefact, KindE.DIV); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("EntLvl1",2, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // EntLvl1 ::= EntLvl1 MOD EntLvl0 
            {
              E RESULT =null;
		E aDeterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E aDefact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(aDeterm1,aDefact, KindE.MOD); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("EntLvl1",2, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // EntLvl1 ::= EntLvl0 
            {
              E RESULT =null;
		E aDefact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=aDefact; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("EntLvl1",2, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // EntLvl0 ::= NumEnt POT EntLvl0 
            {
              E RESULT =null;
		E aDefact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E aDeterm2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(aDefact,aDeterm2, KindE.POT); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("EntLvl0",3, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // EntLvl0 ::= NumEnt 
            {
              E RESULT =null;
		E aDefact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= aDefact; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("EntLvl0",3, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NumEnt ::= ENT 
            {
              E RESULT =null;
		TokenValue numValue = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new Ent(numValue.lexema); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("NumEnt",4, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NumEnt ::= PAP EntLvl2 PCIERRE 
            {
              E RESULT =null;
		E aDeexp = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = aDeexp; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("NumEnt",4, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // FloatLvl2 ::= FloatLvl2 MAS FloatLvl1 
            {
              E RESULT =null;
		E floatexp1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E floatterm = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(floatexp1,floatterm,KindE.SUMA); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("FloatLvl2",5, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // FloatLvl2 ::= FloatLvl2 MENOS FloatLvl1 
            {
              E RESULT =null;
		E floatexp1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E floatterm = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(floatexp1,floatterm,KindE.RESTA); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("FloatLvl2",5, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // FloatLvl2 ::= FloatLvl1 
            {
              E RESULT =null;
		E floatterm = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=floatterm; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("FloatLvl2",5, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // FloatLvl1 ::= FloatLvl1 POR FloatLvl0 
            {
              E RESULT =null;
		E floatterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E floatfact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(floatterm1,floatfact, KindE.MUL); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("FloatLvl1",6, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // FloatLvl1 ::= FloatLvl1 DIV FloatLvl0 
            {
              E RESULT =null;
		E floatterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E floatfact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(floatterm1,floatfact, KindE.DIV); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("FloatLvl1",6, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // FloatLvl1 ::= FloatLvl0 
            {
              E RESULT =null;
		E floatfact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=floatfact; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("FloatLvl1",6, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // FloatLvl0 ::= NumFloat POT FloatLvl0 
            {
              E RESULT =null;
		E floatfact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E floatterm2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(floatfact,floatterm2, KindE.POT); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("FloatLvl0",7, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // FloatLvl0 ::= NumFloat 
            {
              E RESULT =null;
		E floatfact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= floatfact; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("FloatLvl0",7, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NumFloat ::= REAL 
            {
              E RESULT =null;
		TokenValue realValue = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new Real(realValue.lexema); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("NumFloat",8, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NumFloat ::= PAP FloatLvl2 PCIERRE 
            {
              E RESULT =null;
		E floatexp = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = floatexp; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("NumFloat",8, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // BoolLvl3 ::= BoolLvl2 IGDOBLE BoolLvl2 
            {
              E RESULT =null;
		E boolterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E boolterm2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new EBin(boolterm1, boolterm2,KindE.ID); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("BoolLvl3",9, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // BoolLvl3 ::= EntLvl2 IGDOBLE EntLvl2 
            {
              E RESULT =null;
		E boolterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E boolterm2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new EBin(boolterm1, boolterm2,KindE.ID); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("BoolLvl3",9, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // BoolLvl3 ::= FloatLvl2 IGDOBLE FloatLvl2 
            {
              E RESULT =null;
		E boolterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E boolterm2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new EBin(boolterm1, boolterm2,KindE.ID); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("BoolLvl3",9, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // BoolLvl3 ::= BoolLvl2 DISTINTO BoolLvl2 
            {
              E RESULT =null;
		E boolterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E boolterm2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new EBin(boolterm1, boolterm2,KindE.DISTINTO); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("BoolLvl3",9, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // BoolLvl3 ::= EntLvl2 DISTINTO EntLvl2 
            {
              E RESULT =null;
		E boolterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E boolterm2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new EBin(boolterm1, boolterm2,KindE.DISTINTO); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("BoolLvl3",9, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // BoolLvl3 ::= FloatLvl2 DISTINTO FloatLvl2 
            {
              E RESULT =null;
		E boolterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E boolterm2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new EBin(boolterm1, boolterm2,KindE.DISTINTO); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("BoolLvl3",9, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // BoolLvl3 ::= BoolLvl2 
            {
              E RESULT =null;
		E boolterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=boolterm1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("BoolLvl3",9, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // BoolLvl2 ::= BoolLvl2 OR BoolLvl1 
            {
              E RESULT =null;
		E boolterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E boolterm2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new EBin(boolterm1, boolterm2, KindE.OR); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("BoolLvl2",10, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // BoolLvl2 ::= BoolLvl1 
            {
              E RESULT =null;
		E boolterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=boolterm1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("BoolLvl2",10, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // BoolLvl1 ::= BoolLvl1 AND BoolLvl0 
            {
              E RESULT =null;
		E boolterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E boolterm2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new EBin(boolterm1, boolterm2, KindE.AND); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("BoolLvl1",11, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // BoolLvl1 ::= BoolLvl0 
            {
              E RESULT =null;
		E boolterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=boolterm1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("BoolLvl1",11, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // BoolLvl0 ::= NOT BoolLvl0 
            {
              E RESULT =null;
		E boolVal = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new Not(boolVal); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("BoolLvl0",12, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // BoolLvl0 ::= valBool 
            {
              E RESULT =null;
		E boolVal = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=boolVal; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("BoolLvl0",12, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // valBool ::= TRUE 
            {
              E RESULT =null;
		 RESULT=new True(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("valBool",13, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // valBool ::= FALSE 
            {
              E RESULT =null;
		 RESULT=new False(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("valBool",13, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // valBool ::= PAP BoolLvl3 PCIERRE 
            {
              E RESULT =null;
		E boolterm = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=boolterm; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("valBool",13, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ConstructorASTExp$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ConstructorASTExp$do_action(
    int                        CUP$ConstructorASTExp$act_num,
    java_cup.runtime.lr_parser CUP$ConstructorASTExp$parser,
    java.util.Stack            CUP$ConstructorASTExp$stack,
    int                        CUP$ConstructorASTExp$top)
    throws java.lang.Exception
    {
              return CUP$ConstructorASTExp$do_action_part00000000(
                               CUP$ConstructorASTExp$act_num,
                               CUP$ConstructorASTExp$parser,
                               CUP$ConstructorASTExp$stack,
                               CUP$ConstructorASTExp$top);
    }
}

