
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Tue Apr 25 18:36:25 CEST 2023
//----------------------------------------------------

package constructorast;

import java_cup.runtime.*;
import sajax_lex.AnalizadorLexicoSajax;
import sajax_lex.UnidadLexica;
import sajax_lex.TokenValue;
import errors.GestionErroresTiny;
import ast.*;
import java.util.ArrayList;
import java.util.Arrays;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Tue Apr 25 18:36:25 CEST 2023
  */
public class ConstructorASTExp extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ConstructorASTExp() {super();}

  /** Constructor which sets the default scanner. */
  public ConstructorASTExp(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ConstructorASTExp(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\167\000\002\002\004\000\002\002\004\000\002\050" +
    "\004\000\002\050\004\000\002\050\004\000\002\050\004" +
    "\000\002\050\004\000\002\050\002\000\002\051\012\000" +
    "\002\003\004\000\002\003\004\000\002\003\004\000\002" +
    "\003\004\000\002\003\004\000\002\003\004\000\002\003" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\002" +
    "\000\002\020\007\000\002\020\007\000\002\004\004\000" +
    "\002\004\004\000\002\004\004\000\002\004\002\000\002" +
    "\012\012\000\002\012\016\000\002\012\013\000\002\012" +
    "\006\000\002\012\005\000\002\043\012\000\002\043\002" +
    "\000\002\010\005\000\002\010\004\000\002\010\007\000" +
    "\002\007\006\000\002\007\005\000\002\016\016\000\002" +
    "\016\020\000\002\013\011\000\002\014\011\000\002\014" +
    "\012\000\002\005\002\000\002\005\007\000\002\005\011" +
    "\000\002\024\005\000\002\024\007\000\002\022\010\000" +
    "\002\022\010\000\002\021\013\000\002\021\012\000\002" +
    "\011\006\000\002\023\006\000\002\023\005\000\002\006" +
    "\005\000\002\017\007\000\002\017\007\000\002\017\007" +
    "\000\002\017\007\000\002\017\007\000\002\017\004\000" +
    "\002\033\006\000\002\046\003\000\002\046\002\000\002" +
    "\047\005\000\002\047\003\000\002\044\003\000\002\044" +
    "\002\000\002\045\007\000\002\045\006\000\002\045\005" +
    "\000\002\045\004\000\002\025\005\000\002\025\005\000" +
    "\002\025\003\000\002\026\005\000\002\026\005\000\002" +
    "\026\005\000\002\026\005\000\002\026\003\000\002\027" +
    "\005\000\002\027\005\000\002\027\005\000\002\027\003" +
    "\000\002\030\005\000\002\030\005\000\002\030\005\000" +
    "\002\030\005\000\002\030\003\000\002\031\005\000\002" +
    "\031\004\000\002\031\003\000\002\032\003\000\002\032" +
    "\004\000\002\032\003\000\002\032\004\000\002\032\003" +
    "\000\002\032\003\000\002\032\003\000\002\032\003\000" +
    "\002\032\003\000\002\036\004\000\002\036\003\000\002" +
    "\035\005\000\002\035\005\000\002\035\006\000\002\035" +
    "\003\000\002\034\005\000\002\034\003\000\002\042\004" +
    "\000\002\042\003\000\002\041\003\000\002\041\003\000" +
    "\002\037\004\000\002\037\003\000\002\037\003\000\002" +
    "\037\003\000\002\040\004\000\002\040\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0116\000\016\031\ufffa\033\ufffa\051\ufffa\052\ufffa\053" +
    "\ufffa\072\ufffa\001\002\000\016\031\016\033\015\051\010" +
    "\052\026\053\012\072\014\001\002\000\004\002\006\001" +
    "\002\000\004\002\000\001\002\000\006\003\210\072\u0114" +
    "\001\002\000\012\003\uff8e\011\uff8e\057\u010d\072\uff8e\001" +
    "\002\000\016\031\ufffe\033\ufffe\051\ufffe\052\ufffe\053\ufffe" +
    "\072\ufffe\001\002\000\012\003\uff8f\011\uff8f\067\uff8f\072" +
    "\uff8f\001\002\000\016\031\ufffb\033\ufffb\051\ufffb\052\ufffb" +
    "\053\ufffb\072\ufffb\001\002\000\012\003\uff8b\011\uff8b\067" +
    "\uff8b\072\uff8b\001\002\000\004\072\363\001\002\000\006" +
    "\011\uff93\072\uff93\001\002\000\012\003\uff91\011\362\067" +
    "\uff91\072\uff91\001\002\000\006\011\031\072\030\001\002" +
    "\000\016\031\uffff\033\uffff\051\uffff\052\uffff\053\uffff\072" +
    "\uffff\001\002\000\016\031\ufffd\033\ufffd\051\ufffd\052\ufffd" +
    "\053\ufffd\072\ufffd\001\002\000\016\031\ufffc\033\ufffc\051" +
    "\ufffc\052\ufffc\053\ufffc\072\ufffc\001\002\000\004\002\001" +
    "\001\002\000\012\003\uff92\011\027\067\uff92\072\uff92\001" +
    "\002\000\012\003\uff8d\011\uff8d\067\uff8d\072\uff8d\001\002" +
    "\000\012\003\uff90\011\uff90\067\uff90\072\uff90\001\002\000" +
    "\004\025\032\001\002\000\006\011\uff94\072\uff94\001\002" +
    "\000\014\026\uffbe\051\034\052\026\053\012\072\014\001" +
    "\002\000\006\067\357\072\360\001\002\000\012\003\uff8e" +
    "\011\uff8e\067\uff8e\072\uff8e\001\002\000\006\024\352\026" +
    "\uffbf\001\002\000\004\026\037\001\002\000\006\034\040" +
    "\036\041\001\002\000\042\011\uffef\025\uffef\027\uffef\030" +
    "\uffef\035\uffef\037\uffef\042\uffef\046\uffef\047\uffef\051\uffef" +
    "\052\uffef\053\uffef\054\uffef\055\uffef\056\uffef\072\uffef\001" +
    "\002\000\016\031\uffd1\033\uffd1\051\uffd1\052\uffd1\053\uffd1" +
    "\072\uffd1\001\002\000\042\011\054\025\066\027\046\030" +
    "\073\035\065\037\053\042\051\046\067\047\072\051\034" +
    "\052\026\053\012\054\070\055\063\056\044\072\050\001" +
    "\002\000\052\011\ufff6\025\ufff6\027\ufff6\030\ufff6\032\ufff6" +
    "\035\ufff6\037\ufff6\042\ufff6\043\ufff6\044\ufff6\045\ufff6\046" +
    "\ufff6\047\ufff6\051\ufff6\052\ufff6\053\ufff6\054\ufff6\055\ufff6" +
    "\056\ufff6\072\ufff6\001\002\000\004\025\346\001\002\000" +
    "\052\011\ufff8\025\ufff8\027\ufff8\030\ufff8\032\ufff8\035\ufff8" +
    "\037\ufff8\042\ufff8\043\ufff8\044\ufff8\045\ufff8\046\ufff8\047" +
    "\ufff8\051\ufff8\052\ufff8\053\ufff8\054\ufff8\055\ufff8\056\ufff8" +
    "\072\ufff8\001\002\000\004\025\340\001\002\000\052\011" +
    "\ufff7\025\ufff7\027\ufff7\030\ufff7\032\ufff7\035\ufff7\037\ufff7" +
    "\042\ufff7\043\ufff7\044\ufff7\045\ufff7\046\ufff7\047\ufff7\051" +
    "\ufff7\052\ufff7\053\ufff7\054\ufff7\055\ufff7\056\ufff7\072\ufff7" +
    "\001\002\000\022\003\uff8b\011\uff8b\023\uff95\025\172\060" +
    "\uff95\062\uff95\063\uff95\072\uff8b\001\002\000\004\025\315" +
    "\001\002\000\052\011\ufff1\025\ufff1\027\ufff1\030\ufff1\032" +
    "\ufff1\035\ufff1\037\ufff1\042\ufff1\043\ufff1\044\ufff1\045\ufff1" +
    "\046\ufff1\047\ufff1\051\ufff1\052\ufff1\053\ufff1\054\ufff1\055" +
    "\ufff1\056\ufff1\072\ufff1\001\002\000\006\003\262\025\263" +
    "\001\002\000\010\011\054\025\066\072\244\001\002\000" +
    "\052\011\ufff2\025\ufff2\027\ufff2\030\ufff2\032\ufff2\035\ufff2" +
    "\037\ufff2\042\ufff2\043\ufff2\044\ufff2\045\ufff2\046\ufff2\047" +
    "\ufff2\051\ufff2\052\ufff2\053\ufff2\054\ufff2\055\ufff2\056\ufff2" +
    "\072\ufff2\001\002\000\004\036\260\001\002\000\052\011" +
    "\ufff4\025\ufff4\027\ufff4\030\ufff4\032\ufff4\035\ufff4\037\ufff4" +
    "\042\ufff4\043\ufff4\044\ufff4\045\ufff4\046\ufff4\047\ufff4\051" +
    "\ufff4\052\ufff4\053\ufff4\054\ufff4\055\ufff4\056\ufff4\072\ufff4" +
    "\001\002\000\004\023\254\001\002\000\052\011\ufff5\025" +
    "\ufff5\027\ufff5\030\ufff5\032\ufff5\035\ufff5\037\ufff5\042\ufff5" +
    "\043\ufff5\044\ufff5\045\ufff5\046\ufff5\047\ufff5\051\ufff5\052" +
    "\ufff5\053\ufff5\054\ufff5\055\ufff5\056\ufff5\072\ufff5\001\002" +
    "\000\056\004\uff97\005\uff97\007\uff97\010\uff97\011\uff97\012" +
    "\uff97\013\uff97\014\uff97\015\uff97\016\uff97\017\uff97\020\uff97" +
    "\021\uff97\022\uff97\023\uff97\024\uff97\026\uff97\036\uff97\060" +
    "\uff97\061\uff97\062\uff97\063\uff97\001\002\000\004\025\250" +
    "\001\002\000\056\004\uff9b\005\uff9b\007\uff9b\010\uff9b\011" +
    "\uff9b\012\uff9b\013\uff9b\014\uff9b\015\uff9b\016\uff9b\017\uff9b" +
    "\020\uff9b\021\uff9b\022\uff9b\023\uff9b\024\uff9b\026\uff9b\036" +
    "\uff9b\060\241\061\uff9b\062\240\063\242\001\002\000\026" +
    "\003\uffcf\011\uffcf\025\uffcf\031\uffcf\033\uffcf\035\uffcf\051" +
    "\uffcf\052\uffcf\053\uffcf\072\uffcf\001\002\000\026\006\103" +
    "\010\102\011\054\025\066\050\114\065\105\066\111\070" +
    "\117\071\112\072\104\001\002\000\004\025\232\001\002" +
    "\000\004\025\226\001\002\000\006\003\210\072\211\001" +
    "\002\000\004\025\204\001\002\000\004\025\076\001\002" +
    "\000\052\011\ufff0\025\ufff0\027\ufff0\030\ufff0\032\ufff0\035" +
    "\ufff0\037\ufff0\042\ufff0\043\ufff0\044\ufff0\045\ufff0\046\ufff0" +
    "\047\ufff0\051\ufff0\052\ufff0\053\ufff0\054\ufff0\055\ufff0\056" +
    "\ufff0\072\ufff0\001\002\000\052\011\ufff3\025\ufff3\027\ufff3" +
    "\030\ufff3\032\ufff3\035\ufff3\037\ufff3\042\ufff3\043\ufff3\044" +
    "\ufff3\045\ufff3\046\ufff3\047\ufff3\051\ufff3\052\ufff3\053\ufff3" +
    "\054\ufff3\055\ufff3\056\ufff3\072\ufff3\001\002\000\004\051" +
    "\077\001\002\000\004\072\100\001\002\000\004\023\101" +
    "\001\002\000\026\006\103\010\102\011\054\025\066\050" +
    "\114\065\105\066\111\070\117\071\112\072\104\001\002" +
    "\000\006\070\203\071\202\001\002\000\026\006\103\010" +
    "\102\011\054\025\066\050\114\065\105\066\111\070\117" +
    "\071\112\072\104\001\002\000\056\004\uff95\005\uff95\007" +
    "\uff95\010\uff95\011\uff95\012\uff95\013\uff95\014\uff95\015\uff95" +
    "\016\uff95\017\uff95\020\uff95\021\uff95\022\uff95\024\uff95\025" +
    "\172\026\uff95\036\uff95\060\uff95\061\uff95\062\uff95\063\uff95" +
    "\001\002\000\046\004\uffa1\005\uffa1\007\uffa1\010\uffa1\011" +
    "\uffa1\012\uffa1\013\uffa1\014\uffa1\015\uffa1\016\uffa1\017\uffa1" +
    "\020\uffa1\021\uffa1\022\uffa1\024\uffa1\026\uffa1\036\uffa1\061" +
    "\uffa1\001\002\000\046\004\uff9d\005\uff9d\007\uff9d\010\uff9d" +
    "\011\uff9d\012\uff9d\013\uff9d\014\uff9d\015\uff9d\016\uff9d\017" +
    "\uff9d\020\uff9d\021\uff9d\022\uff9d\024\uff9d\026\uff9d\036\uff9d" +
    "\061\uff9d\001\002\000\046\004\uff9e\005\uff9e\007\uff9e\010" +
    "\uff9e\011\uff9e\012\uff9e\013\uff9e\014\uff9e\015\uff9e\016\uff9e" +
    "\017\uff9e\020\uff9e\021\uff9e\022\uff9e\024\uff9e\026\uff9e\036" +
    "\uff9e\061\uff9e\001\002\000\046\004\uffa6\005\uffa6\007\uffa6" +
    "\010\uffa6\011\uffa6\012\uffa6\013\170\014\uffa6\015\uffa6\016" +
    "\uffa6\017\uffa6\020\uffa6\021\uffa6\022\uffa6\024\uffa6\026\uffa6" +
    "\036\uffa6\061\uffa6\001\002\000\046\004\uffa0\005\uffa0\007" +
    "\uffa0\010\uffa0\011\uffa0\012\uffa0\013\uffa0\014\uffa0\015\uffa0" +
    "\016\uffa0\017\uffa0\020\uffa0\021\uffa0\022\uffa0\024\uffa0\026" +
    "\uffa0\036\uffa0\061\uffa0\001\002\000\046\004\uffa3\005\uffa3" +
    "\007\uffa3\010\uffa3\011\uffa3\012\uffa3\013\uffa3\014\uffa3\015" +
    "\uffa3\016\uffa3\017\uffa3\020\uffa3\021\uffa3\022\uffa3\024\uffa3" +
    "\026\uffa3\036\uffa3\061\uffa3\001\002\000\004\036\154\001" +
    "\002\000\046\004\uff9f\005\uff9f\007\uff9f\010\uff9f\011\uff9f" +
    "\012\uff9f\013\uff9f\014\uff9f\015\uff9f\016\uff9f\017\uff9f\020" +
    "\uff9f\021\uff9f\022\uff9f\024\uff9f\026\uff9f\036\uff9f\061\uff9f" +
    "\001\002\000\016\015\150\016\151\024\uffb7\026\uffb7\036" +
    "\uffb7\061\uffb7\001\002\000\034\004\140\007\132\010\135" +
    "\015\uffb2\016\uffb2\017\136\020\137\021\134\022\133\024" +
    "\uffb2\026\uffb2\036\uffb2\061\uffb2\001\002\000\046\004\uffa5" +
    "\005\uffa5\007\uffa5\010\uffa5\011\uffa5\012\uffa5\013\uffa5\014" +
    "\uffa5\015\uffa5\016\uffa5\017\uffa5\020\uffa5\021\uffa5\022\uffa5" +
    "\024\uffa5\026\uffa5\036\uffa5\061\uffa5\001\002\000\044\004" +
    "\uffae\005\123\007\uffae\010\uffae\011\125\012\124\014\122" +
    "\015\uffae\016\uffae\017\uffae\020\uffae\021\uffae\022\uffae\024" +
    "\uffae\026\uffae\036\uffae\061\uffae\001\002\000\044\004\uffa9" +
    "\005\uffa9\007\uffa9\010\uffa9\011\uffa9\012\uffa9\014\uffa9\015" +
    "\uffa9\016\uffa9\017\uffa9\020\uffa9\021\uffa9\022\uffa9\024\uffa9" +
    "\026\uffa9\036\uffa9\061\uffa9\001\002\000\026\006\103\010" +
    "\102\011\054\025\066\050\114\065\105\066\111\070\117" +
    "\071\112\072\104\001\002\000\026\006\103\010\102\011" +
    "\054\025\066\050\114\065\105\066\111\070\117\071\112" +
    "\072\104\001\002\000\026\006\103\010\102\011\054\025" +
    "\066\050\114\065\105\066\111\070\117\071\112\072\104" +
    "\001\002\000\026\006\103\010\102\011\054\025\066\050" +
    "\114\065\105\066\111\070\117\071\112\072\104\001\002" +
    "\000\044\004\uffac\005\uffac\007\uffac\010\uffac\011\uffac\012" +
    "\uffac\014\uffac\015\uffac\016\uffac\017\uffac\020\uffac\021\uffac" +
    "\022\uffac\024\uffac\026\uffac\036\uffac\061\uffac\001\002\000" +
    "\044\004\uffab\005\uffab\007\uffab\010\uffab\011\uffab\012\uffab" +
    "\014\uffab\015\uffab\016\uffab\017\uffab\020\uffab\021\uffab\022" +
    "\uffab\024\uffab\026\uffab\036\uffab\061\uffab\001\002\000\044" +
    "\004\uffad\005\uffad\007\uffad\010\uffad\011\uffad\012\uffad\014" +
    "\uffad\015\uffad\016\uffad\017\uffad\020\uffad\021\uffad\022\uffad" +
    "\024\uffad\026\uffad\036\uffad\061\uffad\001\002\000\044\004" +
    "\uffaa\005\uffaa\007\uffaa\010\uffaa\011\uffaa\012\uffaa\014\uffaa" +
    "\015\uffaa\016\uffaa\017\uffaa\020\uffaa\021\uffaa\022\uffaa\024" +
    "\uffaa\026\uffaa\036\uffaa\061\uffaa\001\002\000\026\006\103" +
    "\010\102\011\054\025\066\050\114\065\105\066\111\070" +
    "\117\071\112\072\104\001\002\000\026\006\103\010\102" +
    "\011\054\025\066\050\114\065\105\066\111\070\117\071" +
    "\112\072\104\001\002\000\026\006\103\010\102\011\054" +
    "\025\066\050\114\065\105\066\111\070\117\071\112\072" +
    "\104\001\002\000\026\006\103\010\102\011\054\025\066" +
    "\050\114\065\105\066\111\070\117\071\112\072\104\001" +
    "\002\000\026\006\103\010\102\011\054\025\066\050\114" +
    "\065\105\066\111\070\117\071\112\072\104\001\002\000" +
    "\026\006\103\010\102\011\054\025\066\050\114\065\105" +
    "\066\111\070\117\071\112\072\104\001\002\000\026\006" +
    "\103\010\102\011\054\025\066\050\114\065\105\066\111" +
    "\070\117\071\112\072\104\001\002\000\044\004\uffb1\005" +
    "\123\007\uffb1\010\uffb1\011\125\012\124\014\122\015\uffb1" +
    "\016\uffb1\017\uffb1\020\uffb1\021\uffb1\022\uffb1\024\uffb1\026" +
    "\uffb1\036\uffb1\061\uffb1\001\002\000\024\004\140\007\132" +
    "\010\135\015\uffb5\016\uffb5\024\uffb5\026\uffb5\036\uffb5\061" +
    "\uffb5\001\002\000\024\004\140\007\132\010\135\015\uffb6" +
    "\016\uffb6\024\uffb6\026\uffb6\036\uffb6\061\uffb6\001\002\000" +
    "\044\004\uffaf\005\123\007\uffaf\010\uffaf\011\125\012\124" +
    "\014\122\015\uffaf\016\uffaf\017\uffaf\020\uffaf\021\uffaf\022" +
    "\uffaf\024\uffaf\026\uffaf\036\uffaf\061\uffaf\001\002\000\024" +
    "\004\140\007\132\010\135\015\uffb4\016\uffb4\024\uffb4\026" +
    "\uffb4\036\uffb4\061\uffb4\001\002\000\024\004\140\007\132" +
    "\010\135\015\uffb3\016\uffb3\024\uffb3\026\uffb3\036\uffb3\061" +
    "\uffb3\001\002\000\044\004\uffb0\005\123\007\uffb0\010\uffb0" +
    "\011\125\012\124\014\122\015\uffb0\016\uffb0\017\uffb0\020" +
    "\uffb0\021\uffb0\022\uffb0\024\uffb0\026\uffb0\036\uffb0\061\uffb0" +
    "\001\002\000\026\006\103\010\102\011\054\025\066\050" +
    "\114\065\105\066\111\070\117\071\112\072\104\001\002" +
    "\000\026\006\103\010\102\011\054\025\066\050\114\065" +
    "\105\066\111\070\117\071\112\072\104\001\002\000\012" +
    "\024\uffb8\026\uffb8\036\uffb8\061\uffb8\001\002\000\012\024" +
    "\uffb9\026\uffb9\036\uffb9\061\uffb9\001\002\000\026\006\103" +
    "\010\102\011\054\025\066\050\114\065\105\066\111\070" +
    "\117\071\112\072\104\001\002\000\006\026\156\036\157" +
    "\001\002\000\004\034\165\001\002\000\026\006\103\010" +
    "\102\011\054\025\066\050\114\065\105\066\111\070\117" +
    "\071\112\072\104\001\002\000\004\026\161\001\002\000" +
    "\004\034\162\001\002\000\042\011\uffef\025\uffef\027\uffef" +
    "\030\uffef\035\uffef\037\uffef\042\uffef\046\uffef\047\uffef\051" +
    "\uffef\052\uffef\053\uffef\054\uffef\055\uffef\056\uffef\072\uffef" +
    "\001\002\000\042\011\054\025\066\027\046\030\073\035" +
    "\164\037\053\042\051\046\067\047\072\051\034\052\026" +
    "\053\012\054\070\055\063\056\044\072\050\001\002\000" +
    "\052\011\uffdb\025\uffdb\027\uffdb\030\uffdb\032\uffdb\035\uffdb" +
    "\037\uffdb\042\uffdb\043\uffdb\044\uffdb\045\uffdb\046\uffdb\047" +
    "\uffdb\051\uffdb\052\uffdb\053\uffdb\054\uffdb\055\uffdb\056\uffdb" +
    "\072\uffdb\001\002\000\042\011\uffef\025\uffef\027\uffef\030" +
    "\uffef\035\uffef\037\uffef\042\uffef\046\uffef\047\uffef\051\uffef" +
    "\052\uffef\053\uffef\054\uffef\055\uffef\056\uffef\072\uffef\001" +
    "\002\000\042\011\054\025\066\027\046\030\073\035\167" +
    "\037\053\042\051\046\067\047\072\051\034\052\026\053" +
    "\012\054\070\055\063\056\044\072\050\001\002\000\052" +
    "\011\uffdc\025\uffdc\027\uffdc\030\uffdc\032\uffdc\035\uffdc\037" +
    "\uffdc\042\uffdc\043\uffdc\044\uffdc\045\uffdc\046\uffdc\047\uffdc" +
    "\051\uffdc\052\uffdc\053\uffdc\054\uffdc\055\uffdc\056\uffdc\072" +
    "\uffdc\001\002\000\026\006\103\010\102\011\054\025\066" +
    "\050\114\065\105\066\111\070\117\071\112\072\104\001" +
    "\002\000\044\004\uffa8\005\uffa8\007\uffa8\010\uffa8\011\uffa8" +
    "\012\uffa8\014\uffa8\015\uffa8\016\uffa8\017\uffa8\020\uffa8\021" +
    "\uffa8\022\uffa8\024\uffa8\026\uffa8\036\uffa8\061\uffa8\001\002" +
    "\000\030\006\103\010\102\011\054\025\066\026\uffc2\050" +
    "\114\065\105\066\111\070\117\071\112\072\104\001\002" +
    "\000\006\024\177\026\uffc3\001\002\000\004\026\176\001" +
    "\002\000\006\024\uffc0\026\uffc0\001\002\000\046\004\uffc4" +
    "\005\uffc4\007\uffc4\010\uffc4\011\uffc4\012\uffc4\013\uffc4\014" +
    "\uffc4\015\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4" +
    "\024\uffc4\026\uffc4\036\uffc4\061\uffc4\001\002\000\026\006" +
    "\103\010\102\011\054\025\066\050\114\065\105\066\111" +
    "\070\117\071\112\072\104\001\002\000\006\024\uffc1\026" +
    "\uffc1\001\002\000\044\004\uffa7\005\uffa7\007\uffa7\010\uffa7" +
    "\011\uffa7\012\uffa7\014\uffa7\015\uffa7\016\uffa7\017\uffa7\020" +
    "\uffa7\021\uffa7\022\uffa7\024\uffa7\026\uffa7\036\uffa7\061\uffa7" +
    "\001\002\000\046\004\uffa2\005\uffa2\007\uffa2\010\uffa2\011" +
    "\uffa2\012\uffa2\013\uffa2\014\uffa2\015\uffa2\016\uffa2\017\uffa2" +
    "\020\uffa2\021\uffa2\022\uffa2\024\uffa2\026\uffa2\036\uffa2\061" +
    "\uffa2\001\002\000\046\004\uffa4\005\uffa4\007\uffa4\010\uffa4" +
    "\011\uffa4\012\uffa4\013\uffa4\014\uffa4\015\uffa4\016\uffa4\017" +
    "\uffa4\020\uffa4\021\uffa4\022\uffa4\024\uffa4\026\uffa4\036\uffa4" +
    "\061\uffa4\001\002\000\004\072\205\001\002\000\004\026" +
    "\206\001\002\000\004\036\207\001\002\000\052\011\uffc6" +
    "\025\uffc6\027\uffc6\030\uffc6\032\uffc6\035\uffc6\037\uffc6\042" +
    "\uffc6\043\uffc6\044\uffc6\045\uffc6\046\uffc6\047\uffc6\051\uffc6" +
    "\052\uffc6\053\uffc6\054\uffc6\055\uffc6\056\uffc6\072\uffc6\001" +
    "\002\000\060\003\uffe0\011\uffe0\025\uffe0\027\uffe0\030\uffe0" +
    "\031\uffe0\032\uffe0\033\uffe0\035\uffe0\037\uffe0\042\uffe0\043" +
    "\uffe0\044\uffe0\045\uffe0\046\uffe0\047\uffe0\051\uffe0\052\uffe0" +
    "\053\uffe0\054\uffe0\055\uffe0\056\uffe0\072\uffe0\001\002\000" +
    "\010\023\214\036\213\060\212\001\002\000\026\006\103" +
    "\010\102\011\054\025\066\050\114\065\105\066\111\070" +
    "\117\071\112\072\104\001\002\000\060\003\uffe1\011\uffe1" +
    "\025\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1\035" +
    "\uffe1\037\uffe1\042\uffe1\043\uffe1\044\uffe1\045\uffe1\046\uffe1" +
    "\047\uffe1\051\uffe1\052\uffe1\053\uffe1\054\uffe1\055\uffe1\056" +
    "\uffe1\072\uffe1\001\002\000\026\006\103\010\102\011\054" +
    "\025\066\050\114\065\105\066\111\070\117\071\112\072" +
    "\104\001\002\000\006\036\217\060\216\001\002\000\026" +
    "\006\103\010\102\011\054\025\066\050\114\065\105\066" +
    "\111\070\117\071\112\072\104\001\002\000\056\011\uffce" +
    "\025\uffce\027\uffce\030\uffce\031\uffce\032\uffce\033\uffce\035" +
    "\uffce\037\uffce\042\uffce\043\uffce\044\uffce\045\uffce\046\uffce" +
    "\047\uffce\051\uffce\052\uffce\053\uffce\054\uffce\055\uffce\056" +
    "\uffce\072\uffce\001\002\000\004\061\221\001\002\000\006" +
    "\036\uffcd\060\uffcd\001\002\000\004\036\223\001\002\000" +
    "\060\003\uffdf\011\uffdf\025\uffdf\027\uffdf\030\uffdf\031\uffdf" +
    "\032\uffdf\033\uffdf\035\uffdf\037\uffdf\042\uffdf\043\uffdf\044" +
    "\uffdf\045\uffdf\046\uffdf\047\uffdf\051\uffdf\052\uffdf\053\uffdf" +
    "\054\uffdf\055\uffdf\056\uffdf\072\uffdf\001\002\000\004\061" +
    "\225\001\002\000\006\036\uffcc\060\uffcc\001\002\000\026" +
    "\006\103\010\102\011\054\025\066\050\114\065\105\066" +
    "\111\070\117\071\112\072\104\001\002\000\004\026\230" +
    "\001\002\000\004\036\231\001\002\000\052\011\uffca\025" +
    "\uffca\027\uffca\030\uffca\032\uffca\035\uffca\037\uffca\042\uffca" +
    "\043\uffca\044\uffca\045\uffca\046\uffca\047\uffca\051\uffca\052" +
    "\uffca\053\uffca\054\uffca\055\uffca\056\uffca\072\uffca\001\002" +
    "\000\026\006\103\010\102\011\054\025\066\050\114\065" +
    "\105\066\111\070\117\071\112\072\104\001\002\000\004" +
    "\026\234\001\002\000\004\036\235\001\002\000\052\011" +
    "\uffc7\025\uffc7\027\uffc7\030\uffc7\032\uffc7\035\uffc7\037\uffc7" +
    "\042\uffc7\043\uffc7\044\uffc7\045\uffc7\046\uffc7\047\uffc7\051" +
    "\uffc7\052\uffc7\053\uffc7\054\uffc7\055\uffc7\056\uffc7\072\uffc7" +
    "\001\002\000\004\026\237\001\002\000\056\004\uff96\005" +
    "\uff96\007\uff96\010\uff96\011\uff96\012\uff96\013\uff96\014\uff96" +
    "\015\uff96\016\uff96\017\uff96\020\uff96\021\uff96\022\uff96\023" +
    "\uff96\024\uff96\026\uff96\036\uff96\060\uff96\061\uff96\062\uff96" +
    "\063\uff96\001\002\000\006\025\066\072\244\001\002\000" +
    "\026\006\103\010\102\011\054\025\066\050\114\065\105" +
    "\066\111\070\117\071\112\072\104\001\002\000\006\025" +
    "\066\072\244\001\002\000\056\004\uff9a\005\uff9a\007\uff9a" +
    "\010\uff9a\011\uff9a\012\uff9a\013\uff9a\014\uff9a\015\uff9a\016" +
    "\uff9a\017\uff9a\020\uff9a\021\uff9a\022\uff9a\023\uff9a\024\uff9a" +
    "\026\uff9a\036\uff9a\060\uff9a\061\uff9a\062\uff9a\063\uff9a\001" +
    "\002\000\056\004\uff95\005\uff95\007\uff95\010\uff95\011\uff95" +
    "\012\uff95\013\uff95\014\uff95\015\uff95\016\uff95\017\uff95\020" +
    "\uff95\021\uff95\022\uff95\023\uff95\024\uff95\026\uff95\036\uff95" +
    "\060\uff95\061\uff95\062\uff95\063\uff95\001\002\000\004\061" +
    "\246\001\002\000\056\004\uff98\005\uff98\007\uff98\010\uff98" +
    "\011\uff98\012\uff98\013\uff98\014\uff98\015\uff98\016\uff98\017" +
    "\uff98\020\uff98\021\uff98\022\uff98\023\uff98\024\uff98\026\uff98" +
    "\036\uff98\060\uff98\061\uff98\062\uff98\063\uff98\001\002\000" +
    "\056\004\uff99\005\uff99\007\uff99\010\uff99\011\uff99\012\uff99" +
    "\013\uff99\014\uff99\015\uff99\016\uff99\017\uff99\020\uff99\021" +
    "\uff99\022\uff99\023\uff99\024\uff99\026\uff99\036\uff99\060\uff99" +
    "\061\uff99\062\uff99\063\uff99\001\002\000\026\006\103\010" +
    "\102\011\054\025\066\050\114\065\105\066\111\070\117" +
    "\071\112\072\104\001\002\000\004\026\252\001\002\000" +
    "\004\036\253\001\002\000\052\011\uffc9\025\uffc9\027\uffc9" +
    "\030\uffc9\032\uffc9\035\uffc9\037\uffc9\042\uffc9\043\uffc9\044" +
    "\uffc9\045\uffc9\046\uffc9\047\uffc9\051\uffc9\052\uffc9\053\uffc9" +
    "\054\uffc9\055\uffc9\056\uffc9\072\uffc9\001\002\000\030\003" +
    "\255\006\103\010\102\011\054\025\066\050\114\065\105" +
    "\066\111\070\117\071\112\072\104\001\002\000\056\003" +
    "\uffdd\011\uffdd\025\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd" +
    "\035\uffdd\037\uffdd\042\uffdd\043\uffdd\044\uffdd\045\uffdd\046" +
    "\uffdd\047\uffdd\051\uffdd\052\uffdd\053\uffdd\054\uffdd\055\uffdd" +
    "\056\uffdd\072\uffdd\001\002\000\004\036\257\001\002\000" +
    "\056\003\uffde\011\uffde\025\uffde\027\uffde\030\uffde\031\uffde" +
    "\032\uffde\035\uffde\037\uffde\042\uffde\043\uffde\044\uffde\045" +
    "\uffde\046\uffde\047\uffde\051\uffde\052\uffde\053\uffde\054\uffde" +
    "\055\uffde\056\uffde\072\uffde\001\002\000\052\011\uffc5\025" +
    "\uffc5\027\uffc5\030\uffc5\032\uffc5\035\uffc5\037\uffc5\042\uffc5" +
    "\043\uffc5\044\uffc5\045\uffc5\046\uffc5\047\uffc5\051\uffc5\052" +
    "\uffc5\053\uffc5\054\uffc5\055\uffc5\056\uffc5\072\uffc5\001\002" +
    "\000\050\004\uff9c\005\uff9c\007\uff9c\010\uff9c\011\uff9c\012" +
    "\uff9c\013\uff9c\014\uff9c\015\uff9c\016\uff9c\017\uff9c\020\uff9c" +
    "\021\uff9c\022\uff9c\023\uff9c\024\uff9c\026\uff9c\036\uff9c\061" +
    "\uff9c\001\002\000\004\035\314\001\002\000\030\003\264" +
    "\006\103\010\102\011\054\025\066\050\114\065\105\066" +
    "\111\070\117\071\112\072\104\001\002\000\004\035\306" +
    "\001\002\000\004\026\266\001\002\000\004\034\267\001" +
    "\002\000\042\011\uffef\025\uffef\027\uffef\030\uffef\035\uffef" +
    "\037\uffef\042\uffef\046\uffef\047\uffef\051\uffef\052\uffef\053" +
    "\uffef\054\uffef\055\uffef\056\uffef\072\uffef\001\002\000\042" +
    "\011\054\025\066\027\046\030\073\035\271\037\053\042" +
    "\051\046\067\047\072\051\034\052\026\053\012\054\070" +
    "\055\063\056\044\072\050\001\002\000\056\011\uffe2\025" +
    "\uffe2\027\uffe2\030\uffe2\032\uffe2\035\uffe2\037\uffe2\040\uffe2" +
    "\041\uffe2\042\uffe2\043\uffe2\044\uffe2\045\uffe2\046\uffe2\047" +
    "\uffe2\051\uffe2\052\uffe2\053\uffe2\054\uffe2\055\uffe2\056\uffe2" +
    "\072\uffe2\001\002\000\056\011\uffe8\025\uffe8\027\uffe8\030" +
    "\uffe8\032\uffe8\035\uffe8\037\uffe8\040\274\041\273\042\uffe8" +
    "\043\uffe8\044\uffe8\045\uffe8\046\uffe8\047\uffe8\051\uffe8\052" +
    "\uffe8\053\uffe8\054\uffe8\055\uffe8\056\uffe8\072\uffe8\001\002" +
    "\000\004\034\303\001\002\000\004\025\275\001\002\000" +
    "\026\006\103\010\102\011\054\025\066\050\114\065\105" +
    "\066\111\070\117\071\112\072\104\001\002\000\004\026" +
    "\277\001\002\000\004\034\300\001\002\000\042\011\uffef" +
    "\025\uffef\027\uffef\030\uffef\035\uffef\037\uffef\042\uffef\046" +
    "\uffef\047\uffef\051\uffef\052\uffef\053\uffef\054\uffef\055\uffef" +
    "\056\uffef\072\uffef\001\002\000\042\011\054\025\066\027" +
    "\046\030\073\035\302\037\053\042\051\046\067\047\072" +
    "\051\034\052\026\053\012\054\070\055\063\056\044\072" +
    "\050\001\002\000\056\011\uffe3\025\uffe3\027\uffe3\030\uffe3" +
    "\032\uffe3\035\uffe3\037\uffe3\040\uffe3\041\uffe3\042\uffe3\043" +
    "\uffe3\044\uffe3\045\uffe3\046\uffe3\047\uffe3\051\uffe3\052\uffe3" +
    "\053\uffe3\054\uffe3\055\uffe3\056\uffe3\072\uffe3\001\002\000" +
    "\042\011\uffef\025\uffef\027\uffef\030\uffef\035\uffef\037\uffef" +
    "\042\uffef\046\uffef\047\uffef\051\uffef\052\uffef\053\uffef\054" +
    "\uffef\055\uffef\056\uffef\072\uffef\001\002\000\042\011\054" +
    "\025\066\027\046\030\073\035\305\037\053\042\051\046" +
    "\067\047\072\051\034\052\026\053\012\054\070\055\063" +
    "\056\044\072\050\001\002\000\052\011\uffe7\025\uffe7\027" +
    "\uffe7\030\uffe7\032\uffe7\035\uffe7\037\uffe7\042\uffe7\043\uffe7" +
    "\044\uffe7\045\uffe7\046\uffe7\047\uffe7\051\uffe7\052\uffe7\053" +
    "\uffe7\054\uffe7\055\uffe7\056\uffe7\072\uffe7\001\002\000\056" +
    "\011\uffe5\025\uffe5\027\uffe5\030\uffe5\032\uffe5\035\uffe5\037" +
    "\uffe5\040\uffe2\041\uffe2\042\uffe5\043\uffe5\044\uffe5\045\uffe5" +
    "\046\uffe5\047\uffe5\051\uffe5\052\uffe5\053\uffe5\054\uffe5\055" +
    "\uffe5\056\uffe5\072\uffe5\001\002\000\006\040\274\041\310" +
    "\001\002\000\004\034\311\001\002\000\042\011\uffef\025" +
    "\uffef\027\uffef\030\uffef\035\uffef\037\uffef\042\uffef\046\uffef" +
    "\047\uffef\051\uffef\052\uffef\053\uffef\054\uffef\055\uffef\056" +
    "\uffef\072\uffef\001\002\000\042\011\054\025\066\027\046" +
    "\030\073\035\313\037\053\042\051\046\067\047\072\051" +
    "\034\052\026\053\012\054\070\055\063\056\044\072\050" +
    "\001\002\000\052\011\uffe6\025\uffe6\027\uffe6\030\uffe6\032" +
    "\uffe6\035\uffe6\037\uffe6\042\uffe6\043\uffe6\044\uffe6\045\uffe6" +
    "\046\uffe6\047\uffe6\051\uffe6\052\uffe6\053\uffe6\054\uffe6\055" +
    "\uffe6\056\uffe6\072\uffe6\001\002\000\052\011\uffe4\025\uffe4" +
    "\027\uffe4\030\uffe4\032\uffe4\035\uffe4\037\uffe4\042\uffe4\043" +
    "\uffe4\044\uffe4\045\uffe4\046\uffe4\047\uffe4\051\uffe4\052\uffe4" +
    "\053\uffe4\054\uffe4\055\uffe4\056\uffe4\072\uffe4\001\002\000" +
    "\026\006\103\010\102\011\054\025\066\050\114\065\105" +
    "\066\111\070\117\071\112\072\104\001\002\000\004\026" +
    "\317\001\002\000\004\034\320\001\002\000\010\035\uffd7" +
    "\043\uffd7\044\uffd7\001\002\000\010\035\324\043\325\044" +
    "\322\001\002\000\004\064\334\001\002\000\004\035\333" +
    "\001\002\000\052\011\uffd9\025\uffd9\027\uffd9\030\uffd9\032" +
    "\uffd9\035\uffd9\037\uffd9\042\uffd9\043\uffd9\044\uffd9\045\uffd9" +
    "\046\uffd9\047\uffd9\051\uffd9\052\uffd9\053\uffd9\054\uffd9\055" +
    "\uffd9\056\uffd9\072\uffd9\001\002\000\004\070\326\001\002" +
    "\000\004\064\327\001\002\000\050\011\uffef\025\uffef\027" +
    "\uffef\030\uffef\035\uffef\037\uffef\042\uffef\043\uffef\044\uffef" +
    "\045\uffef\046\uffef\047\uffef\051\uffef\052\uffef\053\uffef\054" +
    "\uffef\055\uffef\056\uffef\072\uffef\001\002\000\050\011\054" +
    "\025\066\027\046\030\073\035\uffd6\037\053\042\051\043" +
    "\uffd6\044\uffd6\045\331\046\067\047\072\051\034\052\026" +
    "\053\012\054\070\055\063\056\044\072\050\001\002\000" +
    "\004\036\332\001\002\000\010\035\uffd5\043\uffd5\044\uffd5" +
    "\001\002\000\052\011\uffd8\025\uffd8\027\uffd8\030\uffd8\032" +
    "\uffd8\035\uffd8\037\uffd8\042\uffd8\043\uffd8\044\uffd8\045\uffd8" +
    "\046\uffd8\047\uffd8\051\uffd8\052\uffd8\053\uffd8\054\uffd8\055" +
    "\uffd8\056\uffd8\072\uffd8\001\002\000\044\011\uffef\025\uffef" +
    "\027\uffef\030\uffef\035\uffef\037\uffef\042\uffef\045\uffef\046" +
    "\uffef\047\uffef\051\uffef\052\uffef\053\uffef\054\uffef\055\uffef" +
    "\056\uffef\072\uffef\001\002\000\044\011\054\025\066\027" +
    "\046\030\073\035\uffd4\037\053\042\051\045\336\046\067" +
    "\047\072\051\034\052\026\053\012\054\070\055\063\056" +
    "\044\072\050\001\002\000\004\036\337\001\002\000\004" +
    "\035\uffd3\001\002\000\026\006\103\010\102\011\054\025" +
    "\066\050\114\065\105\066\111\070\117\071\112\072\104" +
    "\001\002\000\004\026\342\001\002\000\004\034\343\001" +
    "\002\000\042\011\uffef\025\uffef\027\uffef\030\uffef\035\uffef" +
    "\037\uffef\042\uffef\046\uffef\047\uffef\051\uffef\052\uffef\053" +
    "\uffef\054\uffef\055\uffef\056\uffef\072\uffef\001\002\000\042" +
    "\011\054\025\066\027\046\030\073\035\345\037\053\042" +
    "\051\046\067\047\072\051\034\052\026\053\012\054\070" +
    "\055\063\056\044\072\050\001\002\000\052\011\uffda\025" +
    "\uffda\027\uffda\030\uffda\032\uffda\035\uffda\037\uffda\042\uffda" +
    "\043\uffda\044\uffda\045\uffda\046\uffda\047\uffda\051\uffda\052" +
    "\uffda\053\uffda\054\uffda\055\uffda\056\uffda\072\uffda\001\002" +
    "\000\004\072\347\001\002\000\004\026\350\001\002\000" +
    "\004\036\351\001\002\000\052\011\uffc8\025\uffc8\027\uffc8" +
    "\030\uffc8\032\uffc8\035\uffc8\037\uffc8\042\uffc8\043\uffc8\044" +
    "\uffc8\045\uffc8\046\uffc8\047\uffc8\051\uffc8\052\uffc8\053\uffc8" +
    "\054\uffc8\055\uffc8\056\uffc8\072\uffc8\001\002\000\012\051" +
    "\034\052\026\053\012\072\014\001\002\000\006\067\354" +
    "\072\355\001\002\000\004\072\356\001\002\000\006\024" +
    "\uffbc\026\uffbc\001\002\000\006\024\uffbd\026\uffbd\001\002" +
    "\000\004\072\361\001\002\000\006\024\uffba\026\uffba\001" +
    "\002\000\006\024\uffbb\026\uffbb\001\002\000\012\003\uff8c" +
    "\011\uff8c\067\uff8c\072\uff8c\001\002\000\004\034\364\001" +
    "\002\000\024\003\uffe9\011\uffe9\025\uffe9\031\uffe9\035\uffe9" +
    "\051\uffe9\052\uffe9\053\uffe9\072\uffe9\001\002\000\024\003" +
    "\373\011\054\025\066\031\016\035\372\051\034\052\026" +
    "\053\012\072\371\001\002\000\024\003\uffec\011\uffec\025" +
    "\uffec\031\uffec\035\uffec\051\uffec\052\uffec\053\uffec\072\uffec" +
    "\001\002\000\006\011\031\072\u0109\001\002\000\024\003" +
    "\uffeb\011\uffeb\025\uffeb\031\uffeb\035\uffeb\051\uffeb\052\uffeb" +
    "\053\uffeb\072\uffeb\001\002\000\020\003\uff8b\011\uff8b\023" +
    "\uff95\060\uff95\062\uff95\063\uff95\072\uff8b\001\002\000\016" +
    "\031\uffee\033\uffee\051\uffee\052\uffee\053\uffee\072\uffee\001" +
    "\002\000\016\031\uffed\033\uffed\051\uffed\052\uffed\053\uffed" +
    "\072\uffed\001\002\000\006\003\210\072\376\001\002\000" +
    "\024\003\uffea\011\uffea\025\uffea\031\uffea\035\uffea\051\uffea" +
    "\052\uffea\053\uffea\072\uffea\001\002\000\010\023\214\025" +
    "\377\036\213\001\002\000\014\026\uffbe\051\034\052\026" +
    "\053\012\072\014\001\002\000\004\026\u0101\001\002\000" +
    "\004\034\u0102\001\002\000\042\011\uffef\025\uffef\027\uffef" +
    "\030\uffef\032\uffef\037\uffef\042\uffef\046\uffef\047\uffef\051" +
    "\uffef\052\uffef\053\uffef\054\uffef\055\uffef\056\uffef\072\uffef" +
    "\001\002\000\042\011\054\025\066\027\046\030\073\032" +
    "\u0104\037\053\042\051\046\067\047\072\051\034\052\026" +
    "\053\012\054\070\055\063\056\044\072\050\001\002\000" +
    "\026\006\103\010\102\011\054\025\066\050\114\065\105" +
    "\066\111\070\117\071\112\072\104\001\002\000\004\035" +
    "\u0106\001\002\000\026\003\uffd0\011\uffd0\025\uffd0\031\uffd0" +
    "\033\uffd0\035\uffd0\051\uffd0\052\uffd0\053\uffd0\072\uffd0\001" +
    "\002\000\004\036\u0108\001\002\000\004\035\uffcb\001\002" +
    "\000\004\025\u010a\001\002\000\014\026\uffbe\051\034\052" +
    "\026\053\012\072\014\001\002\000\004\026\u010c\001\002" +
    "\000\004\034\040\001\002\000\004\025\u010e\001\002\000" +
    "\004\026\u010f\001\002\000\004\034\u0110\001\002\000\042" +
    "\011\uffef\025\uffef\027\uffef\030\uffef\032\uffef\037\uffef\042" +
    "\uffef\046\uffef\047\uffef\051\uffef\052\uffef\053\uffef\054\uffef" +
    "\055\uffef\056\uffef\072\uffef\001\002\000\042\011\054\025" +
    "\066\027\046\030\073\032\u0104\037\053\042\051\046\067" +
    "\047\072\051\034\052\026\053\012\054\070\055\063\056" +
    "\044\072\050\001\002\000\004\035\u0113\001\002\000\004" +
    "\002\ufff9\001\002\000\012\023\214\025\u0115\036\213\060" +
    "\212\001\002\000\014\026\uffbe\051\034\052\026\053\012" +
    "\072\014\001\002\000\004\026\u0117\001\002\000\006\034" +
    "\u0102\036\u0118\001\002\000\016\031\uffd2\033\uffd2\051\uffd2" +
    "\052\uffd2\053\uffd2\072\uffd2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0116\000\006\002\004\050\003\001\001\000\026\010" +
    "\022\011\012\020\021\021\010\022\020\037\024\040\016" +
    "\041\006\042\017\051\023\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\037\024\040\016\041\032\044\035\045\034" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\041" +
    "\001\001\000\002\001\001\000\042\007\044\010\046\011" +
    "\042\012\060\013\074\014\054\015\051\016\056\017\073" +
    "\033\055\034\061\035\063\036\057\037\024\040\016\041" +
    "\070\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\034\061\035\063\036\260\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\025\235\026\114" +
    "\027\115\030\117\031\120\032\107\033\105\034\061\035" +
    "\063\036\106\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\025\112\026\114\027" +
    "\115\030\117\031\120\032\107\033\105\034\061\035\063" +
    "\036\106\001\001\000\002\001\001\000\016\031\200\032" +
    "\107\033\105\034\061\035\063\036\106\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\031\130\032\107\033\105\034\061\035" +
    "\063\036\106\001\001\000\016\031\127\032\107\033\105" +
    "\034\061\035\063\036\106\001\001\000\016\031\126\032" +
    "\107\033\105\034\061\035\063\036\106\001\001\000\016" +
    "\031\125\032\107\033\105\034\061\035\063\036\106\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\030\146\031\120\032\107\033" +
    "\105\034\061\035\063\036\106\001\001\000\022\027\145" +
    "\030\117\031\120\032\107\033\105\034\061\035\063\036" +
    "\106\001\001\000\022\027\144\030\117\031\120\032\107" +
    "\033\105\034\061\035\063\036\106\001\001\000\020\030" +
    "\143\031\120\032\107\033\105\034\061\035\063\036\106" +
    "\001\001\000\022\027\142\030\117\031\120\032\107\033" +
    "\105\034\061\035\063\036\106\001\001\000\022\027\141" +
    "\030\117\031\120\032\107\033\105\034\061\035\063\036" +
    "\106\001\001\000\020\030\140\031\120\032\107\033\105" +
    "\034\061\035\063\036\106\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\026" +
    "\152\027\115\030\117\031\120\032\107\033\105\034\061" +
    "\035\063\036\106\001\001\000\024\026\151\027\115\030" +
    "\117\031\120\032\107\033\105\034\061\035\063\036\106" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\025" +
    "\154\026\114\027\115\030\117\031\120\032\107\033\105" +
    "\034\061\035\063\036\106\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\025\157\026\114\027\115\030\117" +
    "\031\120\032\107\033\105\034\061\035\063\036\106\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\162" +
    "\001\001\000\042\007\044\010\046\011\042\012\060\013" +
    "\074\014\054\015\051\016\056\017\073\033\055\034\061" +
    "\035\063\036\057\037\024\040\016\041\070\001\001\000" +
    "\002\001\001\000\004\003\165\001\001\000\042\007\044" +
    "\010\046\011\042\012\060\013\074\014\054\015\051\016" +
    "\056\017\073\033\055\034\061\035\063\036\057\037\024" +
    "\040\016\041\070\001\001\000\002\001\001\000\016\031" +
    "\170\032\107\033\105\034\061\035\063\036\106\001\001" +
    "\000\002\001\001\000\032\025\174\026\114\027\115\030" +
    "\117\031\120\032\107\033\105\034\061\035\063\036\106" +
    "\046\173\047\172\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\025\177" +
    "\026\114\027\115\030\117\031\120\032\107\033\105\034" +
    "\061\035\063\036\106\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\214\001\001\000\026\025" +
    "\223\026\114\027\115\030\117\031\120\032\107\033\105" +
    "\034\061\035\063\036\106\001\001\000\002\001\001\000" +
    "\026\025\221\026\114\027\115\030\117\031\120\032\107" +
    "\033\105\034\061\035\063\036\106\001\001\000\002\001" +
    "\001\000\026\025\217\026\114\027\115\030\117\031\120" +
    "\032\107\033\105\034\061\035\063\036\106\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\025\226\026\114\027\115\030\117\031\120" +
    "\032\107\033\105\034\061\035\063\036\106\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\025\232\026\114\027\115\030\117\031\120\032\107\033" +
    "\105\034\061\035\063\036\106\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\034\246\001\001\000\026\025\244" +
    "\026\114\027\115\030\117\031\120\032\107\033\105\034" +
    "\061\035\063\036\106\001\001\000\004\034\242\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\025\250\026\114" +
    "\027\115\030\117\031\120\032\107\033\105\034\061\035" +
    "\063\036\106\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\025\255\026\114\027\115\030" +
    "\117\031\120\032\107\033\105\034\061\035\063\036\106" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\025\264\026\114\027\115\030\117\031\120\032" +
    "\107\033\105\034\061\035\063\036\106\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\267\001\001\000\042\007\044\010\046\011\042\012\060" +
    "\013\074\014\054\015\051\016\056\017\073\033\055\034" +
    "\061\035\063\036\057\037\024\040\016\041\070\001\001" +
    "\000\004\043\271\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\025\275\026\114\027\115" +
    "\030\117\031\120\032\107\033\105\034\061\035\063\036" +
    "\106\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\300\001\001\000\042\007\044\010\046\011\042\012" +
    "\060\013\074\014\054\015\051\016\056\017\073\033\055" +
    "\034\061\035\063\036\057\037\024\040\016\041\070\001" +
    "\001\000\002\001\001\000\004\003\303\001\001\000\042" +
    "\007\044\010\046\011\042\012\060\013\074\014\054\015" +
    "\051\016\056\017\073\033\055\034\061\035\063\036\057" +
    "\037\024\040\016\041\070\001\001\000\002\001\001\000" +
    "\004\043\306\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\003\311\001\001\000\042\007\044\010\046\011" +
    "\042\012\060\013\074\014\054\015\051\016\056\017\073" +
    "\033\055\034\061\035\063\036\057\037\024\040\016\041" +
    "\070\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\025\315\026\114\027\115\030\117\031\120\032\107\033" +
    "\105\034\061\035\063\036\106\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\320\001\001\000\004\024" +
    "\322\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\327\001\001\000\042\007\044\010\046\011\042\012\060" +
    "\013\074\014\054\015\051\016\056\017\073\033\055\034" +
    "\061\035\063\036\057\037\024\040\016\041\070\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\334\001\001\000\042\007\044\010\046\011\042" +
    "\012\060\013\074\014\054\015\051\016\056\017\073\033" +
    "\055\034\061\035\063\036\057\037\024\040\016\041\070" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\025" +
    "\340\026\114\027\115\030\117\031\120\032\107\033\105" +
    "\034\061\035\063\036\106\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\343\001\001\000\042\007\044" +
    "\010\046\011\042\012\060\013\074\014\054\015\051\016" +
    "\056\017\073\033\055\034\061\035\063\036\057\037\024" +
    "\040\016\041\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\037\024\040\016\041\352\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\364\001\001" +
    "\000\026\007\365\010\367\021\374\034\061\035\063\036" +
    "\057\037\024\040\016\041\373\042\366\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\037\024\040" +
    "\016\041\032\044\377\045\034\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\u0102\001\001\000\044\006" +
    "\u0104\007\044\010\046\011\042\012\060\013\074\014\054" +
    "\015\051\016\056\017\073\033\055\034\061\035\063\036" +
    "\057\037\024\040\016\041\070\001\001\000\026\025\u0106" +
    "\026\114\027\115\030\117\031\120\032\107\033\105\034" +
    "\061\035\063\036\106\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\037\024\040\016\041\032\044\u010a\045\034" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\u0110" +
    "\001\001\000\044\006\u0111\007\044\010\046\011\042\012" +
    "\060\013\074\014\054\015\051\016\056\017\073\033\055" +
    "\034\061\035\063\036\057\037\024\040\016\041\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\023\214" +
    "\001\001\000\014\037\024\040\016\041\032\044\u0115\045" +
    "\034\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ConstructorASTExp$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ConstructorASTExp$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ConstructorASTExp$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny();
   AnalizadorLexicoSajax sajax = (AnalizadorLexicoSajax)getScanner();
   sajax.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ConstructorASTExp$actions {
  private final ConstructorASTExp parser;

  /** Constructor */
  CUP$ConstructorASTExp$actions(ConstructorASTExp parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ConstructorASTExp$do_action_part00000000(
    int                        CUP$ConstructorASTExp$act_num,
    java_cup.runtime.lr_parser CUP$ConstructorASTExp$parser,
    java.util.Stack            CUP$ConstructorASTExp$stack,
    int                        CUP$ConstructorASTExp$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ConstructorASTExp$result;

      /* select the action based on the action number */
      switch (CUP$ConstructorASTExp$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= GrupoDefs Main 
            {
              Programa RESULT =null;
		ArrayList<Definicion> defs = (ArrayList<Definicion>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		MainFun main = (MainFun)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new Programa(new BloqueDef(defs), main); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("S",0, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		Programa start_val = (Programa)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		RESULT = start_val;
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$ConstructorASTExp$parser.done_parsing();
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // GrupoDefs ::= GrupoDefs SDecFuncionInline 
            {
              ArrayList<Definicion> RESULT =null;
		ArrayList<Definicion> defs = (ArrayList<Definicion>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Definicion newdef = (Definicion)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 defs.add(newdef); RESULT = defs; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("GrupoDefs",38, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // GrupoDefs ::= GrupoDefs SDecFuncion 
            {
              ArrayList<Definicion> RESULT =null;
		ArrayList<Definicion> defs = (ArrayList<Definicion>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Definicion newdef = (Definicion)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 defs.add(newdef); RESULT = defs; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("GrupoDefs",38, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // GrupoDefs ::= GrupoDefs SStruct 
            {
              ArrayList<Definicion> RESULT =null;
		ArrayList<Definicion> defs = (ArrayList<Definicion>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Definicion newdef = (Definicion)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 defs.add(newdef); RESULT = defs; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("GrupoDefs",38, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // GrupoDefs ::= GrupoDefs SDec 
            {
              ArrayList<Definicion> RESULT =null;
		ArrayList<Definicion> defs = (ArrayList<Definicion>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Statement newdef = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 defs.add(new VarGlobal(newdef)); RESULT = defs; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("GrupoDefs",38, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // GrupoDefs ::= GrupoDefs SDecArray 
            {
              ArrayList<Definicion> RESULT =null;
		ArrayList<Definicion> defs = (ArrayList<Definicion>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Statement newdef = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 defs.add(new VarGlobal(newdef)); RESULT = defs; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("GrupoDefs",38, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // GrupoDefs ::= 
            {
              ArrayList<Definicion> RESULT =null;
		 RESULT = new ArrayList<Definicion>(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("GrupoDefs",38, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Main ::= INT MAIN PAP PCIERRE LLAP BloqueGeneral SReturn LLCIERRE 
            {
              MainFun RESULT =null;
		ArrayList<Statement> bloque = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Return ret = (Return)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=new MainFun(new BloqueIns(bloque), ret); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Main",39, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // BloqueGeneral ::= BloqueGeneral SAsign 
            {
              ArrayList<Statement> RESULT =null;
		ArrayList<Statement> genBlock = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Statement aDeexp = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 genBlock.add(aDeexp); RESULT=genBlock; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("BloqueGeneral",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // BloqueGeneral ::= BloqueGeneral SDec 
            {
              ArrayList<Statement> RESULT =null;
		ArrayList<Statement> genBlock = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Statement aDeexp = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 genBlock.add(aDeexp); RESULT=genBlock; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("BloqueGeneral",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // BloqueGeneral ::= BloqueGeneral SDecArray 
            {
              ArrayList<Statement> RESULT =null;
		ArrayList<Statement> genBlock = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Statement aDeexp = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 genBlock.add(aDeexp); RESULT=genBlock; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("BloqueGeneral",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // BloqueGeneral ::= BloqueGeneral SIf 
            {
              ArrayList<Statement> RESULT =null;
		ArrayList<Statement> genBlock = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Statement aDeexp = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 genBlock.add(aDeexp); RESULT=genBlock; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("BloqueGeneral",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // BloqueGeneral ::= BloqueGeneral SFor 
            {
              ArrayList<Statement> RESULT =null;
		ArrayList<Statement> genBlock = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Statement aDeexp = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 genBlock.add(aDeexp); RESULT=genBlock; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("BloqueGeneral",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // BloqueGeneral ::= BloqueGeneral SWhile 
            {
              ArrayList<Statement> RESULT =null;
		ArrayList<Statement> genBlock = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Statement aDeexp = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 genBlock.add(aDeexp); RESULT=genBlock; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("BloqueGeneral",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // BloqueGeneral ::= BloqueGeneral SSwitch 
            {
              ArrayList<Statement> RESULT =null;
		ArrayList<Statement> genBlock = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Statement aDeexp = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 genBlock.add(aDeexp); RESULT=genBlock; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("BloqueGeneral",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // BloqueGeneral ::= BloqueGeneral SBreak 
            {
              ArrayList<Statement> RESULT =null;
		ArrayList<Statement> genBlock = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Statement aDeexp = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 genBlock.add(aDeexp); RESULT=genBlock; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("BloqueGeneral",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // BloqueGeneral ::= BloqueGeneral SCallFun 
            {
              ArrayList<Statement> RESULT =null;
		ArrayList<Statement> genBlock = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Statement aDeexp = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 genBlock.add(aDeexp); RESULT=genBlock; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("BloqueGeneral",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // BloqueGeneral ::= 
            {
              ArrayList<Statement> RESULT =null;
		 RESULT=new ArrayList<Statement>(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("BloqueGeneral",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SStruct ::= STRUCT IDEN LLAP AtribStruct LLCIERRE 
            {
              Definicion RESULT =null;
		TokenValue name = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		ArrayList<ASTNode> atributos = (ArrayList<ASTNode>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=new Struct(name.lexema, new Bloque(atributos)); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SStruct",14, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SStruct ::= STRUCT IDEN LLAP AtribStruct error 
            {
              Definicion RESULT =null;
		TokenValue name = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		ArrayList<ASTNode> atributos = (ArrayList<ASTNode>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 System.out.println("Se esperaba \"}\""); RESULT=null; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SStruct",14, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // AtribStruct ::= AtribStruct SAsign 
            {
              ArrayList<ASTNode> RESULT =null;
		ArrayList<ASTNode> bloqueatr = (ArrayList<ASTNode>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Statement asign = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 bloqueatr.add(asign); RESULT=bloqueatr; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("AtribStruct",2, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // AtribStruct ::= AtribStruct SDec 
            {
              ArrayList<ASTNode> RESULT =null;
		ArrayList<ASTNode> bloqueatr = (ArrayList<ASTNode>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Statement dec = (Statement)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 bloqueatr.add(dec); RESULT=bloqueatr; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("AtribStruct",2, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // AtribStruct ::= AtribStruct SDecFuncion 
            {
              ArrayList<ASTNode> RESULT =null;
		ArrayList<ASTNode> bloqueatr = (ArrayList<ASTNode>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Definicion dec = (Definicion)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 bloqueatr.add(dec); RESULT=bloqueatr; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("AtribStruct",2, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // AtribStruct ::= 
            {
              ArrayList<ASTNode> RESULT =null;
		 RESULT=new ArrayList<ASTNode>(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("AtribStruct",2, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SIf ::= IF PAP SExp4 PCIERRE LLAP BloqueGeneral LLCIERRE SElsif 
            {
              Statement RESULT =null;
		E cond1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-5)).value;
		ArrayList<Statement> St = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		ArrayList<Elsif> arrayelsifs = (ArrayList<Elsif>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new IfElse(cond1, new BloqueIns(St), arrayelsifs); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SIf",8, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SIf ::= IF PAP SExp4 PCIERRE LLAP BloqueGeneral LLCIERRE SElsif ELSE LLAP BloqueGeneral LLCIERRE 
            {
              Statement RESULT =null;
		E cond2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-9)).value;
		ArrayList<Statement> St1 = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-6)).value;
		ArrayList<Elsif> arrayelsifs = (ArrayList<Elsif>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		ArrayList<Statement> St2 = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=new IfElse(cond2, new BloqueIns(St1), arrayelsifs, new BloqueIns(St2)); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SIf",8, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SIf ::= IF PAP error LLCIERRE SElsif ELSE LLAP BloqueGeneral LLCIERRE 
            {
              Statement RESULT =null;
		ArrayList<Elsif> arrayelsifs = (ArrayList<Elsif>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		ArrayList<Statement> St2 = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 System.out.println("Se esperaba \")\""); RESULT=null; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SIf",8, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SIf ::= IF PAP error LLCIERRE 
            {
              Statement RESULT =null;
		 System.out.println("Se esperaba \")\""); RESULT=null; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SIf",8, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SIf ::= IF error LLCIERRE 
            {
              Statement RESULT =null;
		 System.out.println("Se esperaba \"(\""); RESULT=null; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SIf",8, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SElsif ::= SElsif ELSIF PAP SExp4 PCIERRE LLAP BloqueGeneral LLCIERRE 
            {
              ArrayList<Elsif> RESULT =null;
		ArrayList<Elsif> arrayelsifs = (ArrayList<Elsif>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-7)).value;
		E cond3 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		ArrayList<Statement> St3 = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 arrayelsifs.add(new Elsif(cond3, new BloqueIns(St3))); RESULT=arrayelsifs; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SElsif",33, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SElsif ::= 
            {
              ArrayList<Elsif> RESULT =null;
		 RESULT=new ArrayList<Elsif>(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SElsif",33, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SDec ::= Tipos IDEN PTOCOMA 
            {
              Statement RESULT =null;
		Tipo tipoAsig = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		TokenValue ident = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=new Dec(tipoAsig, ident.lexema); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SDec",6, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SDec ::= Tipos error 
            {
              Statement RESULT =null;
		Tipo tipoAsig = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 System.out.println("Se esperaba \";\""); RESULT=null; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SDec",6, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SDec ::= Tipos IDEN IGUAL SExp4 PTOCOMA 
            {
              Statement RESULT =null;
		Tipo tipoAsig = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		TokenValue ident = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		E expterm = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=new Dec(tipoAsig, ident.lexema, expterm); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SDec",6, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SAsign ::= IdenOps1 IGUAL SExp4 PTOCOMA 
            {
              Statement RESULT =null;
		E designador = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		E expterm = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=new Asign(designador, expterm); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SAsign",5, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SAsign ::= IdenOps1 IGUAL error 
            {
              Statement RESULT =null;
		E designador = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		 System.out.println("Se esperaba ;"); RESULT=null; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SAsign",5, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SFor ::= FOR PAP INT IDEN IGUAL SExp4 PTOCOMA SExp4 PCIERRE LLAP BloqueGeneral LLCIERRE 
            {
              Statement RESULT =null;
		TokenValue iden = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-8)).value;
		E inicio = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-6)).value;
		E fin = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		ArrayList<Statement> statement = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=new For(new Dec(new Tipo(TipoEnum.INT),iden.lexema,inicio), fin, new BloqueIns(statement)); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SFor",12, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SFor ::= FOR PAP INT IDEN IGUAL SExp4 PTOCOMA SExp4 PTOCOMA SExp4 PCIERRE LLAP BloqueGeneral LLCIERRE 
            {
              Statement RESULT =null;
		TokenValue iden = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-10)).value;
		E inicio = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-8)).value;
		E fin = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-6)).value;
		E paso = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		ArrayList<Statement> statement = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=new For(new Dec(new Tipo(TipoEnum.INT),iden.lexema,inicio), fin, paso, new BloqueIns(statement)); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SFor",12, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SWhile ::= WHILE PAP SExp4 PCIERRE LLAP BloqueGeneral LLCIERRE 
            {
              Statement RESULT =null;
		E cond = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		ArrayList<Statement> instrucciones = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=new While(cond, new BloqueIns(instrucciones)); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SWhile",9, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SSwitch ::= SWITCH PAP SExp4 PCIERRE LLAP Cases LLCIERRE 
            {
              Statement RESULT =null;
		E exp = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		ArrayList<Case> cases = (ArrayList<Case>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=new Switch(exp, cases); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SSwitch",10, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SSwitch ::= SWITCH PAP SExp4 PCIERRE LLAP Cases Default LLCIERRE 
            {
              Statement RESULT =null;
		E exp = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-5)).value;
		ArrayList<Case> cases = (ArrayList<Case>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		DefaultCase defCase = (DefaultCase)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=new Switch(exp, cases, defCase); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SSwitch",10, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Cases ::= 
            {
              ArrayList<Case> RESULT =null;
		 RESULT=new ArrayList<Case>(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Cases",3, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Cases ::= Cases CASE ENT DOSPTOS BloqueGeneral 
            {
              ArrayList<Case> RESULT =null;
		ArrayList<Case> cases = (ArrayList<Case>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		TokenValue ent = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		ArrayList<Statement> bloqGen = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 cases.add(new Case(new Ent(ent.lexema), bloqGen, false)); RESULT=cases; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Cases",3, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Cases ::= Cases CASE ENT DOSPTOS BloqueGeneral BREAK PTOCOMA 
            {
              ArrayList<Case> RESULT =null;
		ArrayList<Case> cases = (ArrayList<Case>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-6)).value;
		TokenValue ent = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		ArrayList<Statement> bloqGen = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		 cases.add(new Case(new Ent(ent.lexema), bloqGen, true)); RESULT=cases; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Cases",3, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Default ::= DEFAULT DOSPTOS BloqueGeneral 
            {
              DefaultCase RESULT =null;
		ArrayList<Statement> bloqGen = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new DefaultCase(bloqGen, false); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Default",18, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Default ::= DEFAULT DOSPTOS BloqueGeneral BREAK PTOCOMA 
            {
              DefaultCase RESULT =null;
		ArrayList<Statement> bloqGen = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		 RESULT=new DefaultCase(bloqGen, true); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Default",18, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SDecFuncionInline ::= Tipos IDEN PAP SParams PCIERRE PTOCOMA 
            {
              Definicion RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-5)).value;
		TokenValue name = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		ArrayList<Parametro> params = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		 RESULT=new DecFuncion(tipo, name.lexema, params, null, null); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SDecFuncionInline",16, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SDecFuncionInline ::= TipoVoid IDEN PAP SParams PCIERRE PTOCOMA 
            {
              Definicion RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-5)).value;
		TokenValue name = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		ArrayList<Parametro> params = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		 RESULT=new DecFuncion(tipo, name.lexema, params, null, null); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SDecFuncionInline",16, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SDecFuncion ::= Tipos IDEN PAP SParams PCIERRE LLAP BloqueGeneral SReturn LLCIERRE 
            {
              Definicion RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-8)).value;
		TokenValue name = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-7)).value;
		ArrayList<Parametro> params = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-5)).value;
		ArrayList<Statement> block = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Return ret = (Return)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=new DecFuncion(tipo, name.lexema, params, new BloqueIns(block), ret); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SDecFuncion",15, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SDecFuncion ::= TipoVoid IDEN PAP SParams PCIERRE LLAP BloqueGeneral LLCIERRE 
            {
              Definicion RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-7)).value;
		TokenValue name = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-6)).value;
		ArrayList<Parametro> params = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		ArrayList<Statement> block = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=new DecFuncion(tipo, name.lexema, params, new BloqueIns(block), null); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SDecFuncion",15, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SDecArray ::= Tipos IDEN Dims PTOCOMA 
            {
              Statement RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		TokenValue iden = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		ArrayList<E> dims = (ArrayList<E>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=new DecArray(tipo, iden.lexema, dims); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SDecArray",7, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Dims ::= Dims CAP SExp4 CCIERRE 
            {
              ArrayList<E> RESULT =null;
		ArrayList<E> dims = (ArrayList<E>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		E tam = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 dims.add(tam); RESULT=dims; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Dims",17, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Dims ::= CAP SExp4 CCIERRE 
            {
              ArrayList<E> RESULT =null;
		E tam = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=new ArrayList<E>(Arrays.asList(tam)); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Dims",17, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SReturn ::= RETURN SExp4 PTOCOMA 
            {
              Return RESULT =null;
		E expresion = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=new Return(expresion); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SReturn",4, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SCallFun ::= PRINT PAP SExp4 PCIERRE PTOCOMA 
            {
              Statement RESULT =null;
		E expresion = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		 RESULT=new Print(expresion, false); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SCallFun",13, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SCallFun ::= PRINTLN PAP SExp4 PCIERRE PTOCOMA 
            {
              Statement RESULT =null;
		E expresion = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		 RESULT=new Print(expresion, true); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SCallFun",13, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SCallFun ::= INPUT PAP IDEN PCIERRE PTOCOMA 
            {
              Statement RESULT =null;
		TokenValue expresion = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		 RESULT=new Input(new Ident(expresion.lexema)); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SCallFun",13, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SCallFun ::= MEMSPACE PAP SExp4 PCIERRE PTOCOMA 
            {
              Statement RESULT =null;
		E arg1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		 RESULT=new Memspace(arg1); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SCallFun",13, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SCallFun ::= FREE PAP IDEN PCIERRE PTOCOMA 
            {
              Statement RESULT =null;
		TokenValue arg1 = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		 RESULT=new Free(new Ident(arg1.lexema)); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SCallFun",13, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SCallFun ::= CallFun PTOCOMA 
            {
              Statement RESULT =null;
		E llamada = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=llamada; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SCallFun",13, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // CallFun ::= IDEN PAP SParExp PCIERRE 
            {
              E RESULT =null;
		TokenValue ident = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		ArrayList<E> parexp = (ArrayList<E>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=new LlamadaFuncion(ident.lexema, parexp); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("CallFun",25, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // SParExp ::= SParExp1 
            {
              ArrayList<E> RESULT =null;
		ArrayList<E> sparexp1 = (ArrayList<E>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=sparexp1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SParExp",36, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SParExp ::= 
            {
              ArrayList<E> RESULT =null;
		 RESULT=new ArrayList<E>(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SParExp",36, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // SParExp1 ::= SParExp1 COMA SExp4 
            {
              ArrayList<E> RESULT =null;
		ArrayList<E> parlist = (ArrayList<E>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E expr = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 parlist.add(expr); RESULT=parlist; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SParExp1",37, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // SParExp1 ::= SExp4 
            {
              ArrayList<E> RESULT =null;
		E expr = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new ArrayList<E>(Arrays.asList(expr)); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SParExp1",37, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // SParams ::= SParamsNoVacio 
            {
              ArrayList<Parametro> RESULT =null;
		ArrayList<Parametro> params = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=params; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SParams",34, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // SParams ::= 
            {
              ArrayList<Parametro> RESULT =null;
		 RESULT=new ArrayList<Parametro>(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SParams",34, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // SParamsNoVacio ::= SParamsNoVacio COMA Tipos OPREF IDEN 
            {
              ArrayList<Parametro> RESULT =null;
		ArrayList<Parametro> params = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		TokenValue name = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 params.add(new Parametro(tipo, true, name.lexema)); RESULT=params; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SParamsNoVacio",35, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // SParamsNoVacio ::= SParamsNoVacio COMA Tipos IDEN 
            {
              ArrayList<Parametro> RESULT =null;
		ArrayList<Parametro> params = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		TokenValue name = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 params.add(new Parametro(tipo, false, name.lexema)); RESULT=params; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SParamsNoVacio",35, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // SParamsNoVacio ::= Tipos OPREF IDEN 
            {
              ArrayList<Parametro> RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		TokenValue name = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new ArrayList<Parametro>(Arrays.asList(new Parametro(tipo, true, name.lexema))); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SParamsNoVacio",35, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // SParamsNoVacio ::= Tipos IDEN 
            {
              ArrayList<Parametro> RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		TokenValue name = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new ArrayList<Parametro>(Arrays.asList(new Parametro(tipo, false, name.lexema))); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SParamsNoVacio",35, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SExp4 ::= SExp3 IGDOBLE SExp3 
            {
              E RESULT =null;
		E expterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E expterm2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new EBin(expterm1, expterm2,KindE.ID); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp4",19, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // SExp4 ::= SExp3 DISTINTO SExp3 
            {
              E RESULT =null;
		E expterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E expterm2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new EBin(expterm1, expterm2,KindE.DISTINTO); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp4",19, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // SExp4 ::= SExp3 
            {
              E RESULT =null;
		E expterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=expterm1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp4",19, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // SExp3 ::= SExp2 MENOR SExp2 
            {
              E RESULT =null;
		E expterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E expterm2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new EBin(expterm1, expterm2,KindE.MENOR); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp3",20, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // SExp3 ::= SExp2 MAYOR SExp2 
            {
              E RESULT =null;
		E expterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E expterm2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new EBin(expterm1, expterm2,KindE.MAYOR); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp3",20, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // SExp3 ::= SExp2 MENIGUAL SExp2 
            {
              E RESULT =null;
		E expterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E expterm2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new EBin(expterm1, expterm2,KindE.MENIGUAL); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp3",20, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // SExp3 ::= SExp2 MAYIGUAL SExp2 
            {
              E RESULT =null;
		E expterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E expterm2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new EBin(expterm1, expterm2,KindE.MAYIGUAL); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp3",20, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // SExp3 ::= SExp2 
            {
              E RESULT =null;
		E expterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=expterm1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp3",20, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // SExp2 ::= SExp2 OR SExp1 
            {
              E RESULT =null;
		E expterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E expterm2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new EBin(expterm1, expterm2, KindE.OR); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp2",21, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // SExp2 ::= SExp2 MAS SExp1 
            {
              E RESULT =null;
		E floatexp1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E expterm = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(floatexp1,expterm,KindE.SUMA); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp2",21, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // SExp2 ::= SExp2 MENOS SExp1 
            {
              E RESULT =null;
		E floatexp1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E expterm = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(floatexp1,expterm,KindE.RESTA); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp2",21, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // SExp2 ::= SExp1 
            {
              E RESULT =null;
		E expterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=expterm1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp2",21, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // SExp1 ::= SExp1 AND SExp0 
            {
              E RESULT =null;
		E expterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E expterm2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new EBin(expterm1, expterm2, KindE.AND); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp1",22, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // SExp1 ::= SExp1 POR SExp0 
            {
              E RESULT =null;
		E expterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E expfact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(expterm1,expfact, KindE.MUL); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp1",22, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // SExp1 ::= SExp1 DIV SExp0 
            {
              E RESULT =null;
		E expterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E expfact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(expterm1,expfact, KindE.DIV); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp1",22, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // SExp1 ::= SExp1 MOD SExp0 
            {
              E RESULT =null;
		E aDeterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E aDefact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(aDeterm1,aDefact, KindE.MOD); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp1",22, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // SExp1 ::= SExp0 
            {
              E RESULT =null;
		E expterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=expterm1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp1",22, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // SExp0 ::= Exp POT SExp0 
            {
              E RESULT =null;
		E expfact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E expterm2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT= new EBin(expfact,expterm2, KindE.POT); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp0",23, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // SExp0 ::= NOT SExp0 
            {
              E RESULT =null;
		E boolVal = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new EUnar(boolVal, KindE.NOT); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp0",23, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // SExp0 ::= Exp 
            {
              E RESULT =null;
		E expterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=expterm1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SExp0",23, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Exp ::= ENT 
            {
              E RESULT =null;
		TokenValue numEnt = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new Ent(numEnt.lexema); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp",24, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Exp ::= MENOS ENT 
            {
              E RESULT =null;
		TokenValue numEnt = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new Ent("-" + numEnt.lexema); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp",24, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Exp ::= REAL 
            {
              E RESULT =null;
		TokenValue numReal = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new Real(numReal.lexema); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp",24, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Exp ::= MENOS REAL 
            {
              E RESULT =null;
		TokenValue numReal = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new Real("-" + numReal.lexema); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp",24, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Exp ::= TRUE 
            {
              E RESULT =null;
		Object trueterm = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new True(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp",24, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Exp ::= FALSE 
            {
              E RESULT =null;
		Object falseterm = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new False(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp",24, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Exp ::= NULL 
            {
              E RESULT =null;
		 RESULT=new Null(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp",24, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Exp ::= IdenOps1 
            {
              E RESULT =null;
		E idenops = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=idenops; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp",24, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Exp ::= CallFun 
            {
              E RESULT =null;
		E callfun = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=callfun; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Exp",24, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // IdenOps1 ::= POR IdenOps1 
            {
              E RESULT =null;
		E idenOps = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		RESULT = new EUnar(idenOps, KindE.ASTERISCO); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("IdenOps1",28, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // IdenOps1 ::= IdenOps0 
            {
              E RESULT =null;
		E idenOps = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = idenOps; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("IdenOps1",28, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // IdenOps0 ::= IdenOps0 PUNTO IdenOps 
            {
              E RESULT =null;
		E idenOps0 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E idenOps = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new EBin(idenOps0, idenOps, KindE.PUNTO); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("IdenOps0",27, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // IdenOps0 ::= IdenOps0 FLECHA IdenOps 
            {
              E RESULT =null;
		E idenOps0 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E idenOps = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new EBin(idenOps0, idenOps, KindE.FLECHA); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("IdenOps0",27, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // IdenOps0 ::= IdenOps0 CAP SExp4 CCIERRE 
            {
              E RESULT =null;
		E idenOps0 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		E exp = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = new EBin(idenOps0, exp, KindE.CORCHETES); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("IdenOps0",27, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // IdenOps0 ::= IdenOps 
            {
              E RESULT =null;
		E idenOps = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = idenOps; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("IdenOps0",27, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // IdenOps ::= PAP SExp4 PCIERRE 
            {
              E RESULT =null;
		E idenOps = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = idenOps; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("IdenOps",26, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // IdenOps ::= IDEN 
            {
              E RESULT =null;
		TokenValue iden = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT =  new Ident(iden.lexema); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("IdenOps",26, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // TipoVoid ::= TipoVoid POR 
            {
              Tipo RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=new Puntero(tipo); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("TipoVoid",32, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // TipoVoid ::= VOID 
            {
              Tipo RESULT =null;
		 RESULT= new Tipo(TipoEnum.VOID); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("TipoVoid",32, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Tipos ::= TipoBas 
            {
              Tipo RESULT =null;
		Tipo tipobas = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=tipobas; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Tipos",31, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Tipos ::= TipoStruct 
            {
              Tipo RESULT =null;
		Tipo tipostruct = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=tipostruct; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Tipos",31, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // TipoBas ::= TipoBas POR 
            {
              Tipo RESULT =null;
		Tipo tipobas = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=new Puntero(tipobas); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("TipoBas",29, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // TipoBas ::= BOOL 
            {
              Tipo RESULT =null;
		 RESULT=new Tipo(TipoEnum.BOOL); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("TipoBas",29, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // TipoBas ::= INT 
            {
              Tipo RESULT =null;
		 RESULT=new Tipo(TipoEnum.INT); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("TipoBas",29, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // TipoBas ::= FLOAT 
            {
              Tipo RESULT =null;
		 RESULT=new Tipo(TipoEnum.FLOAT); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("TipoBas",29, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // TipoStruct ::= TipoStruct POR 
            {
              Tipo RESULT =null;
		Tipo ident = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=new Puntero(ident); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("TipoStruct",30, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // TipoStruct ::= IDEN 
            {
              Tipo RESULT =null;
		TokenValue ident = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=new TipoStruct(ident.lexema); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("TipoStruct",30, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ConstructorASTExp$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ConstructorASTExp$do_action(
    int                        CUP$ConstructorASTExp$act_num,
    java_cup.runtime.lr_parser CUP$ConstructorASTExp$parser,
    java.util.Stack            CUP$ConstructorASTExp$stack,
    int                        CUP$ConstructorASTExp$top)
    throws java.lang.Exception
    {
              return CUP$ConstructorASTExp$do_action_part00000000(
                               CUP$ConstructorASTExp$act_num,
                               CUP$ConstructorASTExp$parser,
                               CUP$ConstructorASTExp$stack,
                               CUP$ConstructorASTExp$top);
    }
}

