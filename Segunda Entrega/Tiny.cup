 package asint;

import java_cup.runtime.*;
import sajax_lex.AnalizadorLexicoSajax;
import sajax_lex.UnidadLexica;
import errors.GestionErroresTiny;

scan with {: return getScanner().next_token(); :};
parser code {:
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }
:};
init with {:
   errores = new GestionErroresTiny();
   AnalizadorLexicoSajax sajax = (AnalizadorLexicoSajax)getScanner();
   sajax.fijaGestionErrores(errores);
:};


terminal     IDEN, OR, AND, NOT,
             MAS, MENOS, POR, DIV, POT, MOD,
             IGDOBLE, DISTINTO, MENOR, MAYOR, MENIGUAL, MAYIGUAL,
             IGUAL, COMA, PAP, PCIERRE, WHILE, FOR, VOID, RETURN,
             STRUCT, LLAP, LLCIERRE, PTOCOMA, IF, ELSIF, ELSE,
	     SWITCH, CASE, DEFAULT, BREAK, DOSPTOS,
	     INT, FLOAT, BOOL;

non terminal  S, E0, E1, E2, E3, E4, E5, OP0, OP1, OP2, OP3, B0, B1, B2, B3, B4,
              MAIN, M, INST, IFST, ELIF, BLOCK, WHILEST, FORST, SWITCHST, CASELST, ASIG, DEC,
              GLOBVAR, STRUCTST, FUNDER, ATRIBS, METODOS, PARAMS, ARGS, EXP, COND, BLCONTENT;

S	::= GLOBVAR S | STRUCTST S | FUNDER S | MAIN;
GLOBVAR ::= DEC ;
STRUCTST ::= STRUCT IDEN LLAP ATRIBS METODOS LLCIERRE ;
ATRIBS ::= DEC ATRIBS | ;
METODOS ::= FUNDER METODOS | ;
FUNDER ::= TYPE IDEN PAP PARAMS PCIERRE BLOCK ;
MAIN	::= INT MAIN PAP ARGS PCIERRE LLAP M RETURN EXP PTOCOMA LLCIERRE | VOID MAIN PAP ARGS PCIERRE LLAP M LLCIERRE ;
M   	::= INST | M ;
INST	::= DEC | ASIG | IFST | SWITCHST | WHILEST | FORST | PTOCOMA | BLOCK ;
IFST	::= IF PAP COND PCIERRE BLOCK ELIF | IF PAP COND PCIERRE BLOCK ELIF ELSE BLOCK ;
ELIF	::= ELSIF PAP COND PCIERRE BLOCK ELIF | ;
BLOCK	::= INST | LLAP BLCONTENT LLCIERRE ;
BLCONTENT ::= INST BLCONTENT | ;
WHILEST	::= WHILE PAP COND PCIERRE BLOCK ;
FORST	::= FOR PAP INT IDEN IGUAL EXP PTOCOMA EXP PCIERRE BLOCK | FOR PAP IDEN IGUAL EXP PTOCOMA EXP PCIERRE BLOCK | FOR PAP INT IDEN IGUAL EXP PTOCOMA EXP PTOCOMA EXP PCIERRE BLOCK | FOR PAP IDEN IGUAL EXP PTOCOMA EXP PTOCOMA EXP PCIERRE BLOCK ;
SWITCHST ::= SWITCH PAP IDEN PCIERRE LLAP CASELST LLCIERRE ;
CASELST	::= CASE EXP DOSPTOS BLOCK CASELST | CASE EXP DOSPTOS BLOCK BREAK DOSPTOS CASELST | DEFAULT DOSPTOS BLOCK | DEFAULT DOSPTOS BLOCK BREAK | ;
ASIG	::= IDEN IGUAL EXP PTOCOMA ;
DEC	::= TYPE IDEN PTOCOMA | TYPE IDEN IGUAL EXP PTOCOMA ;
EXP	::= E0 | B0 ;
E0  	::= E0 OP0 E1 | E1 ;
E1  	::= E1 OP1 E2 | E2 ;
E2  	::= E2 OP2 E3 | E3 ;
E3  	::= E3 OP3 E4 | E4 ;
E4  	::= E5 POT E4 | E5 ;
E5  	::= ENT | REAL | IDEN | PAP E0 PCIERRE ;
OP0  ::= IGDOBLE | DISTINTO ;
OP1  ::= MENOR | MAYOR | MENIGUAL | MAYIGUAL ;
OP2 	::= MAS  | MENOS ;
OP3 	::= POR | DIV | MOD ;
B0   ::= B0 OP0 B1 | B1 ;
B1   ::= B1 OP1 B2 | B2 ;
B2  	::= B2 OR B3 | B3 ;
B3  	::= B3 AND B4 | B4 ;
B4  	::= NOT B5 | B5 ;
B5   ::= BOOLEAN | IDEN | PAP B0 PCIERRE ;
TYPE ::= INT | FLOAT | BOOL ;